<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 300233 Maintainer: hcrow Status: ready$ -->
<!-- Reviewed: 02 -->
 <chapter xml:id="faq.languages" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>PHP y otros lenguajes</title>
  <titleabbrev>PHP y otros lenguajes</titleabbrev>

  <para>
   PHP es el mejor lenguaje para programación WEB,
   pero que pasa con otros lenguajes?
  </para>

  <qandaset>
   <qandaentry xml:id="faq.languages.asp">
    <question>
     <para>PHP vs. ASP?</para>
    </question>
    <answer>
     <para>
      ASP no es realmente un lenguaje en si, pero es un acrónimo para  
      Active Server Pages; los actuales lenguajes usados para programar ASP
      incluyen Visual Basic Script, JScript, and C#, entre otros. El mayor
      inconveniente de ASP es ser un sistema propietario y que es nativo y
      usado únicamente por Microsoft Internet  Information Server (IIS).
      Esto limita su disponibilidad únicamente a servidores con WIN32.
      Hay un par de proyectos que permiten a ASP funcionar con otros
      ambientes y webservers.
      <link xlink:href="&url.instantasp;">InstantASP</link>
      de<link xlink:href="&url.halcyon;">Halcyon</link> (Comercial)
      Chili!Soft ASP de
      <link xlink:href="&url.chilisoft;">Chili!Soft</link> (Comercial) y
      <link xlink:href="&url.mono;">Mono</link> (open-source).
      Se dice que ASP es mas lento y mas incomodo que PHP, con menos
      estabilidad. Una de las ventajas de ASP es que, al usar VBScript, es
      relativamente fácil de aprender si se es bueno con Visual Basic.
      ASP es habilitado por defecto en IIS, haciéndolo fácil de obtener
      y hacerlo funcionar.
      Sin embargo, los componentes hechos en ASP son realmente limitados,
      así que si se necesitan características "avanzadas" (como interactuar)
      con servidores FTP), se necesitará comprar componentes adicionales.
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.languages.coldfusion">
    <question>
     <para>PHP vs. ColdFusion?</para>
    </question>
    <answer>
     <para>
      Se dice comúnmente que PHP es más rápido y más eficiente para 
      tareas de programación complejas, así como para probar nuevas ideas,
      y es considerado por muchos el más estable y el que usa menos
      recursos intensivos. Mientras que ColdFusion tuvo en algún momento
      un buen manejo de los errores, abstracción de bases de datos, y manejo
      de fechas, la abstracción de bases de datos dejo que desear cuando fue
      abordado en PHP 4. Una particular cualidad que es listada como una de
      las fuerzas de ColdFusion  es su excelente motor de búsqueda, pero
      muchos argumentos sólidos sugieren que un motor de búsqueda no es algo
      que debería ser incluido en un lenguaje de scripts para la WEB. Además,
      PHP se ejecuta en casi todas las plataformas modernas que existen,
      mientras que ColdFusion esta disponible únicamente para Windows, Solaris,
      Linux, MacOS, y AIX. ColdFusion tiene un buen IDE y es generalmente
      rápido para dar resultados para los nuevos programadores, mientras que
      PHP requiere de más conocimiento de programación. ColdFusion ha sido
      diseñado teniendo en mente a los que no son programadores, mientras
      que PHP esta enfocado en los programadores.
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.languages.perl">
    <question>
     <para>PHP vs. Perl?</para>
    </question>
    <answer>
     <para>
      La mayor ventaja de PHP sobre Perl es que PHP fue diseñado para hacer
      scripts para la web, mientras que Perl fue diseñado para muchas otras
      cosas. Por esto, Perl puede volverse complicado. La flexibilidad /
      complejidad de Perl pueden hacerlo de difícil colaboración
      por parte de desarrolladores de diferentes niveles. PHP es menos
      confuso y estricto en su formato sin perder la flexibilidad. PHP es
      también fácil de integrar en un HTML existente que Perl. En gran medida,
      PHP tiene todas las bondades de Perl - construcciones, sintaxis, etc -
      sin hacer las cosas complicadas como Perl. Además, el interprete de la
      linea de comandos de PHP (CLI por sus siglas en ingles) es suficientemente
      poderoso para realizar tareas de alto nivel en la misma forma en que
      Perl ha sido tradicionalmente empleado. Perl es uno de los lenguajes
      mas usados y un verdadero lenguaje, y se ha mantenido firme desde los 80's,
      pero PHP ha madurado y evolucionado rápido, y continúa haciendo un
      progreso fantástico.
     </para>
    </answer>
   </qandaentry>

  </qandaset>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
