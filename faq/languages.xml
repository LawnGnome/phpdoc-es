<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 328095 Maintainer: hcrow Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->
<chapter xml:id="faq.languages" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>PHP y otros lenguajes</title>
 <titleabbrev>PHP y otros lenguajes</titleabbrev>
 
 <para>
  PHP es el mejor lenguaje para programación web,
  pero, ¿qué hay de los demás lenguajes?
 </para>
 
 <qandaset>
  <qandaentry xml:id="faq.languages.asp">
   <question>
    <para>¿PHP versus ASP?</para>
   </question>
   <answer>
    <para>
     ASP no es realmente un lenguaje en si, si no que es un acrónimo de Active
     Server Pages; los verdaderos lenguajes utilizados para programar con ASP incluyen
     Visual Basic Script, JScript, y C#, entre otros. El mayor
     inconveniente de ASP es ser un sistema propietario y que es nativo y
     usado únicamente en la plataforma Microsoft Internet Information Server (IIS).
     Esto limita su disponibilidad únicamente a servidores basados en Win32. Existen un
     par de proyectos que permiten a ASP funcionar con
     otros entornos y servidores web:
     <link xlink:href="&url.instantasp;">InstantASP</link>
     de<link xlink:href="&url.halcyon;">Halcyon</link> (comercial)
     Chili!Soft ASP de
     <link xlink:href="&url.chilisoft;">Chili!Soft</link> (comercial) y
     <link xlink:href="&url.mono;">Mono</link> (código abierto).
     Se dice que ASP es más lento y más incómodo que PHP, con menos
     estabilidad en general. Una de las ventajas de ASP es que, ya que utiliza
     principalmente VBScript, es relativamente fácil de aprender si uno ya es
     competente con Visual Basic. El soporte para ASP también está habilitado de
     forma predeterminada en IIS, haciéndolo fácil de obtener y hacerlo funcionar.
     Sin embargo, los componentes construidos en ASP están realmente limitados,
     por lo que si se necesitan características "avanzadas" (como interactuar
     con servidores FTP), será necesario comprar componentes adicionales.
    </para>
   </answer>
  </qandaentry>
  
  <qandaentry xml:id="faq.languages.coldfusion">
   <question>
    <para>¿PHP versus ColdFusion?</para>
   </question>
   <answer>
    <para>
     Se dice comúnmente que PHP es más rápido y más eficiente para tareas de
     programación complejas, así como para probar nuevas ideas, y es considerado
     por muchos el más estable y el que usa menos recursos intensivos. Mientras que
     ColdFusion tuvo en algún momento un mejor manejo de los errores, abstracción de bases
     de datos, y conversión de fechas, la abstracción de bases de datos dejó que desear
     cuando fue abordado en PHP 4. Una particular cualidad que está enumerada como uno de
     los fuertes de ColdFusion es su excelente motor de búsqueda, pero muchos argumentos
     sólidos sugieren que un motor de búsqueda no es algo que debería ser incluido en un 
     lenguaje de scripts para la web. Además, PHP se ejecuta en casi todas las plataformas
     modernas que existen, mientras que ColdFusion esta disponible únicamente para Windows,
     Solaris, Linux, MacOS, y AIX. ColdFusion tiene un buen IDE y es generalmente
     más rápido para programadores nuevos que quieran lograr resultados para aplicaciones
     muy sencillas, mientras que PHP inicialmente requiere más conocimientos de programación.
     ColdFusion está diseñado teniendo en cueta a los no programadores, mientras
     que PHP esta enfocado a los programadores.
    </para>
   </answer>
  </qandaentry>
  
  <qandaentry xml:id="faq.languages.perl">
   <question>
    <para>PHP versus Perl?</para>
   </question>
   <answer>
    <para>
     La mayor ventaja de PHP sobre Perl es que PHP fue diseñado para hacer
     scripts para la web, mientras que Perl fue diseñado para muchas otras
     cosas. Por esto, Perl puede ser complicado. La flexibilidad /
     complejidad de Perl puede hacer difícil la colaboración entre
     desarrolladores de diferentes niveles de destreza. PHP tiene un formato
     menos confuso y estricto sin perder la flexibilidad. PHP es también fácil de
     integrar en un HTML existente que Perl. En gran medida, PHP tiene toda la "buena"
     funcionalidad de Perl - construcciones, sintaxis, etc - sin las complicaciones de
     Perl. Además, el intérprete de la linea de comandos de PHP (CLI por sus siglas en
     inglés) es suficientemente poderoso para realizar tareas de alto nivel en la misma
     forma en que Perl ha sido tradicionalmente empleado. Perl es uno de los lenguajes
     más utilizados y es un verdadero lenguaje, y se ha mantenido firme desde los 80, pero
     PHP ha madurado y evolucionado rápidamente, y continúa haciendo un progreso fantástico.
    </para>
   </answer>
  </qandaentry>
  
 </qandaset>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
