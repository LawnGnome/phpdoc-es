<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 306780 Maintainer: lboshell Status: ready -->
 <chapter xml:id="faq.html" xmlns="http://docbook.org/ns/docbook">
  <title>PHP y HTML</title>
  <titleabbrev>PHP y HTML</titleabbrev>

  <para>
   PHP y HTML interactúan bastante: PHP puede generar HTML, y HTML puede
   pasar información a PHP. Antes de leer estas preguntas, es importante que
   aprenda cómo recuperar <link
   linkend="language.variables.external">variables desde fuentes
   externas</link>. La página del manual sobre este tema incluye bastantes
   ejemplos también. Preste atención especialmente a lo que
   <literal>register_globals</literal> representa para usted.
  </para>

  <qandaset>
   <qandaentry xml:id="faq.html.encoding">
    <question>
     <para>
      ¿Qué codificación/decodificación necesito al pasar un valor a través
      de un formulario/URL?
     </para>
    </question>
    <answer>
     <para>
      Existen varias etapas en las que la codificación es importante.
      Asumiendo que tiene un valor tipo <type>string</type>
      <varname>$datos</varname>, que contiene la cadena que desea pasar sin
      codificar, estas son las etapas relevantes:
      <itemizedlist>
       <listitem>
        <para>
         Interpretación de HTML. Para especificar una cadena cualquiera, es
         <emphasis>necesario</emphasis> incluirla en comillas dobles, y
         aplicar <function>htmlspecialchars</function> sobre el valor
         completo.
        </para>
       </listitem>
       <listitem>
        <para>
         URL: Una URL consiste de varias partes. Si desea que sus datos sean
         interpretados como un ítem, es <emphasis>necesario</emphasis>
         codificarla con <function>urlencode</function>.
        </para>
       </listitem>
      </itemizedlist>
     </para>
     <para>
      <example>
       <title>Un elemento escondido de un formulario HTML</title>
        <programlisting role="php">
<![CDATA[
<?php
    echo "<input type='hidden' value='" . htmlspecialchars($datos) . "' />\n";
?>
]]>
        </programlisting>
      </example>
      <note>
       <simpara>
        No es correcto aplicar <function>urlencode</function> sobre
        <varname>$datos</varname>, ya que es responsabilidad de los
        navegadores codificar los datos. Todos los navegadores populares lo
        hacen correctamente. Note que esto ocurrirá independientemente del
        método (es decir, GET o POST). Sin embargo, solo notará esto en el
        caso de una petición GET, ya que las peticiones POST usualmente son
        escondidas.
       </simpara>
      </note>
      <example>
       <title>Datos a ser editados por el usuario</title>
        <programlisting role="php">
<![CDATA[
<?php
    echo "<textarea name='misdatos'>\n";
    echo htmlspecialchars($datos)."\n";
    echo "</textarea>";
?>
]]>
        </programlisting>
      </example>
      <note>
       <simpara>
        Los datos son mostrados en el navegador como es de esperarse, ya que
        el navegador interpretará los símbolos HTML escapados.
       </simpara>
       <simpara>
        Luego de ser enviados, ya sea por GET o POST, los datos serás
        codificados por el navegador para su transferencia, y serán
        decodificados directamente por PHP. Así que en lo que a usted
        concierne, no necesitará realizar ninguna
        codificación/decodificación, todo es manejado automáticamente.
       </simpara>
      </note>
      <example>
       <title>En una URL</title>
        <programlisting role="php">
<![CDATA[
<?php
    echo "<a href='" . htmlspecialchars("/siguientepagina.php?etapa=23&datos=" .
        urlencode($datos)) . "'>\n";
?>
]]>
        </programlisting>
      </example>
      <note>
       <simpara>
        En realidad está imitando una peticián HTML GET, por lo tanto no es
        necesario aplicar <function>urlencode</function> manualmente a los
        datos.
       </simpara>
      </note>
      <note>
       <simpara>
        Es necesario usar <function>htmlspecialchars</function> sobre la URL
        completa, ya que la URL ocurre como el valor de un atributo HTML. En
        este caso, el navegador primero reemplazará las entidades HTML
        especiales por los caracteres correctos en el valor, y luego pasa la
        URL. PHP entenderá la URL correctamente, ya que ya se utilizó
        <function>urlencode</function> sobre los datos.
       </simpara>
       <simpara>
        Notará que el caracter <literal>&amp;</literal> en la URL es
        reemplazado por <literal>&amp;amp;</literal>. Aunque la mayoría de
        navegadores entenderán el caracter si olvida esto, no siempre es
        posible que ocurra. Así que incluso si su URL no es dinámica, es
        <emphasis>necesario</emphasis> usar
        <function>htmlspecialchars</function> sobre la URL.
       </simpara>
      </note>
     </para>
     <!-- TODO: a note about addgpcslashes? -->
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.html.form-image">
    <question>
     <para>
      Intento usar una etiqueta &lt;input type="image"&gt;, pero las
      variables <varname>$foo.x</varname> y <varname>$foo.y</varname> no
      están disponibles. <varname>$_GET['foo.x']</varname> no existe
      tampoco. ¿Dónde están?
     </para>
    </question>
    <answer>
     <para>
      Cuando se envía un formulario, es posible usar una imagen en lugar del
      botón de envío estándar con una etiqueta como esta:
      <programlisting role="html">
<![CDATA[
<input type="image" src="imagen.gif" name="foo" />
]]>
      </programlisting>
      Cuando el usuario pulsa sobre la imagen, el formulario acompañante
      será transmitido al servidor con dos variables adicionales:
      <varname>foo.x</varname> y <varname>foo.y</varname>.
     </para>
     <para>
      Dado que <varname>foo.x</varname> y <varname>foo.y</varname> habrían
      representado nombres de variable inválidos en PHP, éstos son
      convertidos automáticamente a <varname>foo_x</varname> y
      <varname>foo_y</varname>. Es decir, los puntos son reemplazados con
      caracteres de subrayado. Así que, es posible acceder a estas variables
      como cualquier otra descrita en la sección sobre recuperación de <link
      linkend="language.variables.external">variables desde fuentes
      externas</link>. Por ejemplo, <varname>$_GET['foo_x']</varname>.
      <note>
       <para>
        Los espacios en nombres de variables de petición son convertidos a
        caracteres de subrayado.
       </para>
      </note>
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.html.arrays">
    <question>
     <para>¿Cómo creo matrices en un &lt;form&gt; HTML?</para>
    </question>
    <answer>
     <para>
      Para hacer que el resultado de &lt;form&gt; sea enviado como un valor
      <link linkend="language.types.array">array</link> a su script PHP, se
      deben nombrar los elementos &lt;input&gt;, &lt;select&gt; o
      &lt;textarea&gt; de esta forma:
      <programlisting role="html">
<![CDATA[
<input name="MiMatriz[]" />
<input name="MiMatriz[]" />
<input name="MiMatriz[]" />
<input name="MiMatriz[]" />
]]>
      </programlisting>
      Note los paréntesis cuadrados después del nombre de la variable, ellos
      son los que la convierten en una matriz. Es posible agrupar los
      elementos en diferentes matrices asignando el mismo nombre a elementos
      diferentes:
      <programlisting role="html">
<![CDATA[
<input name="MiMatriz[]" />
<input name="MiMatriz[]" />
<input name="MiOtraMatriz[]" />
<input name="MiOtraMatriz[]" />
]]>
      </programlisting>
      Esto produce dos matrices, MiMatriz y MiOtraMatriz, que son enviadas
      al script PHP. También es posible asignar claves específicas a sus
      matrices:
      <programlisting role="html">
<![CDATA[
<input name="OtraMatriz[]" />
<input name="OtraMatriz[]" />
<input name="OtraMatriz[email]" />
<input name="OtraMatriz[telefono]" />
]]>
      </programlisting>
      La matriz OtraMatriz ahora tendrá las claves 0, 1, email y phone.
      </para>
      <para>
       <note>
        <para>
         Especificar claves de matrices es opcional en HTML. Si no
         especifica las claves, la matriz es llenada en el orden en que
         aparecen los elementos en el formulario. Nuestro primer ejemplo
         contendrá las claves 0, 1, 2 y 3.
        </para>
       </note>
      </para>
      <para>
      Vea también <link linkend="ref.array">Funciones de Matrices</link> y
      <link linkend="language.variables.external">Variables Desde Fuentes
      Externas</link>.
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.html.select-multiple">
    <question>
     <para>
      ¿Cómo obtengo todos los resultados de una etiqueta de selección
      múltiple en HTML?
     </para>
    </question>
    <answer>
     <para>
      La etiqueta de selección múltiple en una construcción HTML le permite
      a los usuarios elegir varios ítems desde una lista. Estos ítems son
      pasados entonces al gestor de acción del formulario. El problema es
      que todos son pasados con el mismo nombre de control. Es decir,
      <programlisting role="html">
<![CDATA[
<select name="var" multiple="yes">
]]>
      </programlisting>
      Cada opción elegida llegará al gestor de acción como:
      <programlisting>
var=opcion1
var=opcion2
var=opcion3
      </programlisting>
      Cada opción sobrescribirá los contenidos de la variable
      <varname>$var</varname> previa. La solución es usar la característica
      de PHP "matriz desde un elemento de formulario". Debe usarse la
      siguiente forma:
      <programlisting role="html">
<![CDATA[
<select name="var[]" multiple="yes">
]]>
      </programlisting>
      Esto le dice a PHP que debe tratar <varname>$var</varname> como una
      matriz y cada asignación de valor a var[] agrega un ítem a la matriz.
      El primer elemento se convierte en <varname>$var[0]</varname>, el
      siguiente <varname>$var[1]</varname>, etc. La función
      <function>count</function> puede usarse para determinar cuántas
      opciones fueron seleccionadas, y la función <function>sort</function>
      puede ser usada para ordenar la matriz de opciones si es necesario.
     </para>
     <para>
      Note que si está usando JavaScript los caracteres
      <literal>[]</literal> en el nombre del elemento pueden causar
      problemas cuando intente referirse al elemento por su nombre. Use su
      ID numérico de elemento de formulario en su lugar, o encierre el
      nombre de variables en comillas sencillas y úselo como índice de la
      matriz de elementos, por ejemplo:
      <programlisting>
variable = documents.forms[0].elements['var[]'];
      </programlisting>
     </para>
    </answer>
   </qandaentry>

   <qandaentry xml:id="faq.html.javascript-variable">
    <question>
     <para>
      ¿Cómo puedo pasar una variable de Javascript a PHP?
     </para>
    </question>
    <answer>
     <para>
      Ya que Javascript es una tecnología (usualmente) del lado del cliente,
      y PHP es (usualmente) una tecnología del lado del servidor, y dado que
      HTTP es un protocolo "sin estados", los dos lenguajes no pueden
      compartir variables directamente.
     </para>
     <para>
      Sin embargo, es posible pasar variables entre los dos. Una forma de
      hacerlo es generar código Javascript con PHP, y hacer que el navegador
      se refresque a sí mismo, pasando variables específicas de vuelta al
      script PHP. El ejemplo a continuación muestra precisamente cómo hacer
      esto -- permite que código PHP capture la altura y el ancho de la
      pantalla, algo que normalmente sólo es posible en el lado del cliente.
     </para>
     <para>
      <example>
       <title>Generación de Javascript con PHP</title>
       <programlisting role="php">
<![CDATA[
<?php
if (isset($_GET['ancho']) AND isset($_GET['altura'])) {
  // imprimir las variables de geometría
  echo "El ancho de la pantalla es: ". $_GET['ancho'] ."<br />\n";
  echo "La altura de la pantalla es: ". $_GET['altura'] ."<br />\n";
} else {
  // pasar las variables de geometría
  // (preservar la cadena query original
  //   -- las variables post deberán ser pasadas de otra forma)

  echo "<script language='javascript'>\n";
  echo "  location.href=\"${_SERVER['SCRIPT_NAME']}?${_SERVER['QUERY_STRING']}"
            . "&ancho=\" + screen.width + \"&altura=\" + screen.height;\n";
  echo "</script>\n";
  exit();
}
?>
]]>
       </programlisting>
      </example>
     </para>
    </answer>
   </qandaentry>

  </qandaset>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
