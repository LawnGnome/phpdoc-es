<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.29 Maintainer: lboshell Status: ready -->
 <chapter id="faq.html">
  <title>PHP y HTML</title>
  <titleabbrev>PHP y HTML</titleabbrev>

  <para>
   PHP y HTML interact&uacute;an bastante: PHP puede generar HTML, y
   HTML puede pasar informaci&oacute;n a PHP. Antes de leer estas
   preguntas, es importante que aprenda c&oacute;mo <link
   linkend="language.variables.external">recuperar variables desde el
   exterior de PHP</link>. La p&aacute;gina del manual sobre este tema
   incluye bastantes ejemplos tambi&eacute;n. Preste atenci&oacute;n
   especialmente a lo que <literal>register_globals</literal>
   representa para usted.
  </para>

  <qandaset>
   <qandaentry id="faq.html.encoding">
    <question>
     <para>
      &iquest;Qu&eacute; codificaci&oacute;n/decodificaci&oacute;n
      necesito al pasar un valor a trav&eacute;s de un formulario/URL?
     </para>
    </question>
    <answer>
     <para>
      Existen varias etapas en las que la codificaci&oacute;n es
      importante. Asumiendo que tiene un valor tipo
      <type>string</type> <varname>$datos</varname>, que contiene la
      cadena que desea pasar sin codificar, estas son las etapas
      relevantes:
      <itemizedlist>
       <listitem>
        <para>
         Interpretaci&oacute;n de HTML. Para especificar una cadena
         cualquiera, es <emphasis>necesario</emphasis> incluirla en
         comillas dobles, y aplicar
         <function>htmlspecialchars</function> sobre el valor
         completo.
        </para>
       </listitem>
       <listitem>
        <para>
         URL: Una URL consiste de varias partes. Si desea que sus
         datos sean interpretados como un &iacute;tem, es
         <emphasis>necesario</emphasis> codificarla con
         <function>urlencode</function>.
        </para>
       </listitem>
      </itemizedlist>
     </para>
     <para>
      <example>
       <title>Un elemento escondido de un formulario HTML</title>
        <programlisting role="php">
<![CDATA[
<?php
    echo "<input type='hidden' value='" . htmlspecialchars($datos) . "' />\n";
?>
]]>
        </programlisting>
      </example>
      <note>
       <simpara>
        No es correcto aplicar <function>urlencode</function> sobre
        <varname>$datos</varname>, ya que es responsabilidad de los
        navegadores codificar los datos. Todos los navegadores
        populares lo hacen correctamente. Note que esto
        ocurrir&aacute; independientemente del m&eacute;todo (es
        decir, GET o POST). Sin embargo, solo notar&aacute; esto en el
        caso de una petici&oacute;n GET, ya que las peticiones POST
        usualmente son escondidas.
       </simpara>
      </note>
      <example>
       <title>Datos a ser editados por el usuario</title>
        <programlisting role="php">
<![CDATA[
<?php
    echo "<textarea name='misdatos'>\n";
    echo htmlspecialchars($datos)."\n";
    echo "</textarea>";
?>
]]>
        </programlisting>
      </example>
      <note>
       <simpara>
        Los datos son mostrados en el navegador como es de esperarse,
        ya que el navegador interpretar&aacute; los s&iacute;mbolos
        HTML escapados.
       </simpara>
       <simpara>
        Luego de ser enviados, ya sea por GET o POST, los datos
        ser&aacute;s codificados por el navegador para su
        transferencia, y ser&aacute;n decodificados directamente por
        PHP. As&iacute; que en lo que a usted concierne, no
        necesitar&aacute; realizar ninguna
        codificaci&oacute;n/decodificaci&oacute;n, todo es manejado
        autom&aacute;ticamente.
       </simpara>
      </note>
      <example>
       <title>En una URL</title>
        <programlisting role="php">
<![CDATA[
<?php
    echo "<a href='" . htmlspecialchars("/siguientepagina.php?etapa=23&datos=" .
        urlencode($datos)) . "'>\n";
?>
]]>
        </programlisting>
      </example>
      <note>
       <simpara>
        En realidad est&aacute; imitando una petici&aacute;n HTML GET,
        por lo tanto no es necesario aplicar
        <function>urlencode</function> manualmente a los datos.
       </simpara>
      </note>
      <note>
       <simpara>
        Es necesario usar <function>htmlspecialchars</function> sobre
        la URL completa, ya que la URL ocurre como el valor de un
        atributo HTML. En este caso, el navegador primero
        reemplazar&aacute; las entidades HTML especiales por los
        caracteres correctos en el valor, y luego pasa la URL. PHP
        entender&aacute; la URL correctamente, ya que ya usado
        <function>urlencode</function> sobre los datos.
       </simpara>
       <simpara>
        Notar&aacute; que el caracter <literal>&amp;</literal> en la
        URL es reemplazado por <literal>&amp;amp;</literal>. Aunque la
        mayor&iacute;a de navegadores entender&aacute;n el caracter si
        olvida esto, no siempre es posible que ocurra. As&iacute; que
        incluso si su URL no es din&aacute;mica, es
        <emphasis>necesario</emphasis> usar
        <function>htmlspecialchars</function> sobre la URL.
       </simpara>
      </note>
     </para>
     <!-- TODO: a note about addgpcslashes? -->
    </answer>
   </qandaentry>

   <qandaentry id="faq.html.form-image">
    <question>
     <para>
      Intento usar una etiqueta &lt;input type="image"&gt;, pero las
      variables <varname>$foo.x</varname> y <varname>$foo.y</varname>
      no est&aacute;n disponibles. <varname>$_GET['foo.x']</varname>
      no existe tampoco. &iquest;D&oacute;nde est&aacute;n?
     </para>
    </question>
    <answer>
     <para>
      Cuando se env&iacute;a un formulario, es posible usar una imagen
      en lugar del bot&oacute;n de env&iacute;o est&aacute;ndar con
      una etiqueta como esta:
      <programlisting role="html">
<![CDATA[
<input type="image" src="imagen.gif" name="foo" />
]]>
      </programlisting>
      Cuando el usuario pulsa sobre la imagen, el formulario
      acompa&ntilde;ante ser&aacute; transmitido al servidor con dos
      variables adicionales: <varname>foo.x</varname> y
      <varname>foo.y</varname>.
     </para>
     <para>
      Dado que <varname>foo.x</varname> y <varname>foo.y</varname>
      habr&iacute;an representado nombres de variable inv&aacute;lidos
      en PHP, &eacute;stos son convertidos autom&aacute;ticamente a
      <varname>foo_x</varname> y <varname>foo_y</varname>. Es decir,
      los puntos son reemplazados con caracteres de
      subrayado. As&iacute; que, es posible acceder a estas variables
      como cualquier otra descrita en la secci&oacute;n sobre
      recuperaci&oacute;n de <link
      linkend="language.variables.external">variables desde el
      exterior de PHP</link>. Por ejemplo,
      <varname>$_GET['foo_x']</varname>.
      <note>
       <para>
        Los espacios en nombres de variables de petici&oacute;n son
        convertidos a caracteres de subrayado.
       </para>
      </note>
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.html.arrays">
    <question>
     <para>&iquest;C&oacute;mo creo matrices en un &lt;form&gt;
     HTML?</para>
    </question>
    <answer>
     <para>
      Para hacer que el resultado de &lt;form&gt; sea enviado como un
      valor <link linkend="language.types.array">array</link> a su
      script PHP, se deben nombrar los elementos &lt;input&gt;,
      &lt;select&gt; o &lt;textarea&gt; de esta forma:
      <programlisting role="html">
<![CDATA[
<input name="MiMatriz[]" />
<input name="MiMatriz[]" />
<input name="MiMatriz[]" />
<input name="MiMatriz[]" />
]]>
      </programlisting>
      Note los par&eacute;ntesis cuadrados despu&eacute;s del nombre
      de la variable, ellos son los que la convierten en una
      matriz. Es posible agrupar los elementos en diferentes matrices
      asignando el mismo nombre a elementos diferentes:
      <programlisting role="html">
<![CDATA[
<input name="MiMatriz[]" />
<input name="MiMatriz[]" />
<input name="MiOtraMatriz[]" />
<input name="MiOtraMatriz[]" />
]]>
      </programlisting>
      Esto produce dos matrices, MiMatriz y MiOtraMatriz, que son
      enviadas al script PHP. Tambi&eacute;n es posible asignar claves
      espec&iacute;ficas a sus matrices:
      <programlisting role="html">
<![CDATA[
<input name="OtraMatriz[]" />
<input name="OtraMatriz[]" />
<input name="OtraMatriz[email]" />
<input name="OtraMatriz[telefono]" />
]]>
      </programlisting>
      La matriz OtraMatriz ahora tendr&aacute; las claves 0, 1, email
      y phone.
      </para>
      <para>
       <note>
        <para>
         Especificar claves de matrices es opcional en HTML. Si no
         especifica las claves, la matriz es llenada en el orden en
         que aparecen los elementos en el formulario. Nuestro primer
         ejemplo contendr&aacute; las claves 0, 1, 2 y 3.
        </para>
       </note>
      </para>
      <para>
      Vea tambi&eacute;n <link linkend="ref.array">Funciones de
      Matrices</link> y <link
      linkend="language.variables.external">Variables desde el
      exterior de PHP</link>.
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.html.select-multiple">
    <question>
     <para>
      &iquest;C&oacute;mo obtengo todos los resultados de una etiqueta
      de selecci&oacute;n m&uacute;ltiple en HTML?
     </para>
    </question>
    <answer>
     <para>
      La etiquete de selecci&oacute;n m&uacute;ltiple en una
      construcci&oacute;n HTML le permite a los usuarios elegir varios
      &iacute;tems desde una lista. Estos &iacute;tems son pasados
      entonces al gestor de acci&oacute;n del formulario. El problema
      es que todos son pasados con el mismo nombre de control. Es
      decir,
      <programlisting role="html">
<![CDATA[
<select name="var" multiple="yes">
]]>
      </programlisting>
      Cada opci&oacute;n elegida llegar&aacute; al gestor de
      acci&oacute;n como:
      <programlisting>
var=opcion1
var=opcion2
var=opcion3
      </programlisting>
      Cada opci&oacute;n sobrescribir&aacute; los contenidos de la
      variable <varname>$var</varname> previa. La soluci&oacute;n es
      usar la caracter&iacute;stica de PHP "matriz desde un elemento
      de formulario". Debe usarse la siguiente forma:
      <programlisting role="html">
<![CDATA[
<select name="var[]" multiple="yes">
]]>
      </programlisting>
      Esto le dice a PHP que debe tratar <varname>$var</varname> como
      una matriz y cada asignaci&oacute;n de valor a var[] agrega un
      &iacute;tem a la matriz. El primer elemento se convierte en
      <varname>$var[0]</varname>, el siguiente
      <varname>$var[1]</varname>, etc. La funci&oacute;n
      <function>count</function> puede usarse para determinar
      cu&aacute;ntas opciones fueron seleccionadas, y la
      funci&oacute;n <function>sort</function> puede ser usada para
      ordenar la matriz de opciones si es necesario.
     </para>
     <para>
      Note que si est&aacute; usando JavaScript los caracteres
      <literal>[]</literal> en el nombre del elemento pueden causar
      problemas cuando intente referirse al elemento por su
      nombre. Use su ID num&eacute;rico de elemento de formulario en
      su lugar, o encierre el nombre de variables en comillas
      sencillas y &uacute;selo como &iacute;ndice de la matriz de
      elementos, por ejemplo:
      <programlisting>
variable = documents.forms[0].elements['var[]'];
      </programlisting>
     </para>
    </answer>
   </qandaentry>

   <qandaentry id="faq.html.javascript-variable">
    <question>
     <para>
      &iquest;C&oacute;mo puedo pasar una variable de Javascript a
      PHP?
     </para>
    </question>
    <answer>
     <para>
      Ya que Javascript es una tecnolog&iacute;a (usualmente) del lado
      del cliente, y PHP es (usualmente) una tecnolog&iacute;a del
      lado del servidor, y dado que HTTP es un protocolo "sin
      estados", los dos lenguajes no pueden compartir variables
      directamente.
     </para>
     <para>
      Sin embargo, es posible pasar variables entre los dos. Una forma
      de hacerlo es generar c&oacute;digo Javascript con PHP, y hacer
      que el navegador se refresque a s&iacute; mismo, pasando
      variables espec&iacute;ficas de vuelta al script PHP. El ejemplo
      a continuaci&oacute;n muestra precisamente c&oacute;mo hacer
      esto -- permite que c&oacute;digo PHP capture la altura y el
      ancho de la pantalla, algo que normalmente s&oacute;lo es
      posible en el lado del cliente.
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
<?php
if (isset($_GET['ancho']) AND isset($_GET['altura'])) {
  // imprimir las variables de geometria
  echo "El ancho de la pantalla es: ". $_GET['ancho'] ."<br />\n";
  echo "La altura de la pantalla es: ". $_GET['altura'] ."<br />\n";
} else {
  // pasar las variables de geometria
  // (preservar la cadena query original
  //   -- las variables post deberan ser pasadas de otra forma)

  echo "<script language='javascript'>\n";
  echo "  location.href=\"${_SERVER['SCRIPT_NAME']}?${_SERVER['QUERY_STRING']}"
            . "&ancho=\" + screen.width + \"&altura=\" + screen.height;\n";
  echo "</script>\n";
  exit();
}
?>
]]>
      </programlisting>
     </para>
    </answer>
   </qandaentry>

  </qandaset>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
