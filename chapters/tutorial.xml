<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision: 292331 $ -->
<!-- EN-Revision: 288790 Maintainer: yago Status: ready -->
 <chapter xml:id="tutorial" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <info><title>Un tutorial sencillo</title></info>

  <para>
   A continuación, nos gustaría mostrate las bases de PHP en un corto y
   sencillo tutorial. Este documento explica cómo crear páginas web
   dinámicas con PHP, aunque PHP no solamente es capaz de crear páginas
   web. Consulte la sección titulada <link linkend="intro-whatcando">¿Qué 
   se puede hacer con PHP?</link> para más información.      
  </para>
  <para>
   Las páginas web que usan PHP se tratan igual que páginas HTML 
   comunes y corrientes, y se pueden crear o editar de la misma manera
   que normalmente crea páginas HTML.   
  </para>

  <section xml:id="tutorial.requirements">
   <info><title>What do I need?</title></info>
   <para>
    En este manual asumimos que cuenta con un servidor que
    soporta PHP y que todos los archivos con la extensión 
    <filename>.php</filename> son usados por PHP. En la mayoría 
    de servidores, ésta es la extensión que toman los archivos PHP 
    por defecto, pero pregunte al administrador de su servidor para 
    estar seguro. Si su servidor soporta PHP, entonces no necesita 
    hacer nada, solamente crear sus archivos <filename>.php</filename> 
    y guardarlos en su directorio web y el servidor los analizará 
    por usted. No hay necesidad de compilar nada o instalar otras 
    herramientas. Mírelo de esta manera, los archivos PHP
    son tan simples como archivos de HTML con el añadido de una 
    nueva familia de etiquetas que permiten todo tipo de cosas. La
    mayoría de las compañías de hospedaje de páginas web ofrecen 
    el soporte que necesita para usar PHP, pero si por alguna razón 
    ellos no lo hacen, considere leer la sección titulada 
    <link xlink:href="&url.php.links;">Recursos PHP</link> para más 
    información acerca de compañías de hospedaje que soportan PHP.
   </para>
   <para>    
    Digamos que quiere ahorrar preciado ancho de banda y programar en local.
    En este caso, querrá instalar un servidor web, como
    <link xlink:href="&url.apache;">Apache</link>, y por supuesto
    <link xlink:href="&url.php.downloads;">PHP</link>. Lo más seguro
    es que también quiera instalar una base de datos como
    <link xlink:href="&url.mysql.docs;">MySQL</link>.
   </para>
   <para>
    Instálelos de forma independientemente o bien puede elegir una manera más 
    sencilla. Nuestro manual contiene <link linkend="install">Instrucciones de 
    instalación de PHP</link> (asumiendo que tiene algún tipo de servidor web 
    ya configurado). En el caso que tenga problemas con la instalación, sugerimos 
    que haga sus preguntas en nuestra <link xlink:href="&url.php.mailing-lists;">
    lista de correo de instalación</link>. Si elige la manera más sencilla, entonces 
    <link xlink:href="&url.installkits;">localice paquete pre-configurado</link> 
    para su sistema operativo, incluyendo MacOSX, Linux y Windows. En Linux,
    quizá encuentra que <link xlink:href="&url.rpmfind;">rpmfind</link> y
    <link xlink:href="&url.rpmfind.pbone;">PBone</link> le son de ayuda para encontrar
    los RPMs. Para encontrar paquetes para Debian quizá quiera visitar <link
    xlink:href="&url.apt-get;">apt-get</link>.
   </para>
  </section>

  <section xml:id="tutorial.firstpage">
   <info><title>Su primera página con PHP</title></info>
   <para>
    Comienze por crear un archivo llamado <filename>hola.php</filename> 
    y póngalo en el "directorio raíz" (<varname>DOCUMENT_ROOT</varname>) 
    con el siguiente contenido:    
   </para>
   <para>
    <example>
     <info><title>Nuestro primer script PHP: <filename>hola.php</filename></title></info>
     <programlisting role="php">
<![CDATA[
<html>
 <head>
  <title>Ejemplo PHP</title>
 </head>
 <body>
 <?php echo '<p>Hola Mundo</p>'; ?> 
 </body>
</html>
]]>
     </programlisting>
     <simpara>
      Utilice su navegador web para acceder al archivo en su servidor, con la 
      URL terminando en <literal>/hola.php</literal>. Si está programando localmente
      este URL será algo como <literal>http://localhost/hola.php</literal> o
      <literal>http://127.0.0.1/hola.php</literal> pero esto depende de la 
      configuración de su servidor web. Si todo está configurado correctamente,
      el fichero será analizado por PHP y el siguiente contenido aparecerá en
      su navegador:      
     </simpara>
     <screen role="html">
<![CDATA[
<html>
 <head>
  <title>Ejemplo PHP</title>
 </head>
 <body>
 <p>Hola mundo</p>
 </body>
</html>
]]>
     </screen>
    </example>
   </para>
   <para>    
    Este script es extremadamente simple y no es necesario usar PHP para
    crear una página como esta. Lo único que muestra es:
    <literal>Hola mundo</literal> usando la función de PHP 
    <function>echo</function>. El fichero <emphasis>no debe ser ejecutable</emphasis>
    o especial de ninguna forma. El servidor reconoce que este fichero debe ser 
    interpretado por PHP porque estamos usando la extensión ".php", el cuál está
    configurado para enviarlo a PHP. Piensa como si fuera un fichero HTML normal
    el cual tiene una serie de etiquetas especiales disponibles con las que puedes
    hacer muchas cosas interesantes.
   </para>
   <para>
    Si ha intentado usar este ejemplo y no produjo ningún resultado, 
    preguntando si deseaba descargar el archivo, o mostró todo el archivo como 
    texto, lo más seguro es que PHP no se encuentra habilitado en su servidor. 
    Pídale a su administrador que active esta función usando el capítulo 
    titulado <link linkend="install">Instalación</link> en el manual. Si está 
    trabajando localmente, lea también el capítulo dedicado a la instalación para
    asegurarse de que todo esté configurado apropiadamente. Asegúrese que está
    accediendo al fichero vía http a través del servidor para mostrar el 
    resultado. Si está abriendo el archivo desde el sistema de archivos, entonces
    probablemente no estará siendo analizado por PHP. Si el problema persiste no
    dude en usar alguna de las múltiples opciones de 
    <link xlink:href="&url.php.support;">Soporte de PHP</link>.
   </para>
   <para>
    El objetivo de este ejemplo es demostrar cómo puede usar el formato especial
    de las etiquetas PHP. En este ejemplo usamos <literal>&lt;?php</literal> 
    para indicar el inicio de la etiqueta PHP. Después indicamos la sentencia y 
    abandonamos el modo PHP usando <literal>?&gt;</literal>. Puede salir de PHP 
    y regresar cuantas veces lo desee usando este método. Para más información, 
    puede leer la sección en el manual titulada 
    <link linkend="language.basic-syntax">Sintaxis básica de PHP</link>.       
   </para>
  
   <note>
    <info><title>Anotación los avances de línea</title></info>
    <para>
     Los avances de línia tienen poco sentido en HTML, igualmente sigue 
     siendo buena idea hacer que el código HTML se vea limpio y bien, poniendo
     avances de línea. PHP automáticamente eliminará los avances de línea puestos 
     inmediatamente después de cerrar <literal>?&gt;</literal>. Esto puede ser
     muy útil si pone muchos bloques de PHP o incluye ficheros que contienen PHP
     que no se supone que deban mostarar nada. Al mismo tiempo, puede resultar
     un poco confuso. Se puede poner un espacio después de cerrar 
     <literal>?&gt;</literal> para forzar el mostrar un espacio y un avance de 
     línea , o se puede poner un avance de línea explícitamente en el último 
     echo o print dentro de tu bloque en PHP.
    </para> 
   </note> 

   <note>
    <info><title>Anotación acerca de editores de texto</title></info>
    <para>
     Hay muchos editores de texto y Entornos Integrados de Desarrollo (IDE por sus 
     siglas en Inglés) que puede usar para crear, editar, y organizar archivos PHP.
     Puede encontrar una lista parcial de éstos en 
     <link xlink:href="&url.phpeditorlist;">Lista de editores de PHP</link>. Si 
     desea recomendar un editor, por favor visite la página mencionada 
     anteriormente, y comunique su recomendación a las personas encargadas del
     mantenimiento para que lo incluyan en la lista. Contar con un editor que 
     resalte la sintaxis de PHP puede ser de mucha ayuda.     
    </para>
   </note>
   
   <note>
    <info><title>Anotación acerca de los procesadores de texto</title></info>
    <para>
     Los procesadores de texto como StarOffice Writer, Microsoft word y Abiword
     no son buenas opciones para editar archivos de PHP. Si desea usar uno de 
     éstos programas para probar sus scripts, primero debe asegurarse de guardar 
     el documento en <emphasis>texto sin formato</emphasis> o PHP no será capaz 
     de leer y ejecutar el script.
    </para>
   </note>
   
   <note>
    <info><title>Una nota acerca del "Bloc de Notas de Windows"</title></info>
    <para>
     Si escribe sus archivos PHP usando el "Bloc de Notas de Windows", debe asegurarse 
     de que sus archivos sean guardados con la extensión <filename>.php</filename> 
     (El Bloc de Notas automáticamente añade la extensión <filename>.txt</filename> 
     a los archivos a menos que tome los siguientes pasos para prevenirlo). Cuando 
     guarde sus archivos y el programa le pregunte qué nombre le desea dar al
     archivo, use comillas para indicar el nombre (es decir,
     "<filename>hola.php</filename>"). Una alternativa es, en la lista de opciones 
     "Archivos de Texto *.txt", seleccionar la opción "Todos los archivos *.*". 
     Aquí puede escribir el nombre del archivo sin las comillas.     
    </para>
   </note>
  
   <para>
    Ahora que ha creado un pequeño script de PHP que funciona correctamente, es 
    hora de trabajar con el script de PHP más famoso; vamos a hacer una llamada a la
    función <function>phpinfo</function> para obtener información acerca de su 
    sistema y configuración como las <link linkend="language.variables.predefined">variables
    predefinidas disponibles</link>, los módulos utilizados por PHP, y las diferentes 
    opciones de <link linkend="configuration">configuración</link>. Tomemos algo de tiempo
    para revisar esta información.    
   </para>
   <para>
    <example>
     <info><title>Obtener la información del sistema desde PHP</title></info>
     <programlisting role="php">
<![CDATA[
<?php phpinfo(); ?>
]]>
     </programlisting>
    </example>
   </para>
  </section>

  <section xml:id="tutorial.useful">
   <info><title>Algo útil</title></info>
   <para>
    Hagamos ahora algo que puede ser más útil. Vamos a comprobar qué clase de 
    navegador está utilizando el usuario. Para hacerlo, vamos a consultar la 
    información que el navegador nos envía como parte de su petición HTTP. 
    Esta información es guardada en una 
    <link linkend="language.variables">variable</link>. Las variables
    siempre comienzan con un signo de dólar ("$") en PHP. La variable que 
    vamos a utilizar en esta situación es
    <varname>$_SERVER["HTTP_USER_AGENT"]</varname>.    
   </para>
   <note>
    <para>    
     <varname>$_SERVER</varname> es una variable especial reservada 
     por PHP que contiene toda la información del servidor web. Es 
     conocida como Superglobal.  Consulte el manual en su sección 
     titulada <link
     linkend="language.variables.superglobals">Superglobales</link>
     para más información. Éstas variables especiales fueron 
     introducidas en la versión <link
     xlink:href="&url.php.release4.1.0;">4.1.0</link> de PHP. Antes
     podíamos usar las arrays <varname>$HTTP_*_VARS</varname>, 
     tales como <varname>$HTTP_SERVER_VARS</varname>. Aunque éstas han
     sido marcadas como obsoletas, tales arrays todavía existen. 
     (También puede echar un vistazo a las notas relacionadas con el <link
     linkend="tutorial.oldcode">código antiguo</link>.)     
    </para>
   </note>
   <para>
    To display this variable, you can simply do:
   </para>
   <para>
    <example>
     <info><title>Imprimir una variable (Elemento array)</title></info>
    <programlisting role="php">
<![CDATA[
<?php
echo $_SERVER['HTTP_USER_AGENT'];
?>
]]>
    </programlisting>
    <para>
     Un ejemplo del resultado de esta secuencia de comandos sería:
    </para>
    <screen role="html">
Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)
    </screen>
   </example>
   </para>
   <para>
    Hay muchos <link linkend="language.types">tipos</link> de
    variables en PHP.  En el ejemplo anterior imprimimos una <link
    linkend="language.types.array">array</link>. Las arrays pueden
    ser muy útiles.    
   </para>
   <para>
    <varname>$_SERVER</varname> es simplemente una variable que se encuentra 
    disponible automáticamente en PHP. Puede encontrar una lista en la 
    sección titulada <link
    linkend="reserved.variables">Variables Reservadas</link> del manual, o 
    puede generar una lista completa creando un archivo como el ejemplo
    de la sección anterior.    
   </para>
   <para>
    Puede usar más de un declaración PHP dentro de una etiqueta PHP, y 
    crear pequeños segmentos de código que pueden hacer más que un único echo. 
    Por ejemplo, si quisiéramos detectar el uso de Internet Explorer,
    haríamos algo así:  
   </para>
   <para>
    <example>
     <info><title>Ejemplo usando <link linkend="language.control-structures">estructuras
     de control</link> y <link linkend="language.functions">functiones</link></title></info>
     <programlisting role="php">
<![CDATA[
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== FALSE) {
    echo 'Está usando Internet Explorer.<br />';
}
?>
]]>
     </programlisting>
     <para>
      Un ejemplo del resultado de esta secuencia de comandos sería:
     </para>
     <screen role="html">
<![CDATA[
Está usando Internet Explorer.<br />
]]>
     </screen>
    </example>
   </para>
   <para>   
    A continuación introduciremos un par de conceptos nuevos. 
    Tenemos una declaración 
    <link linkend="control-structures.if">if</link>. Si está
    familiarizado con la sintaxis básica del lenguaje C, esto
    se vera lógico, Pero si no entiende C, u otros lenguajes
    de programación donde encuentra la sintaxis usada
    anteriormente, probablemente debería conseguir un libro que
    le introduzca mejor a PHP, y lea los primeros capítulos, o
    también puede ver la parte del manual titulada <link
    linkend="langref">Referencia del lenguaje</link> parte del
    manual.   
   </para>
   <para>
   
       El segundo concepto que introducimos fue la función llamada
    <function>strstr</function>. <function>strstr</function> es una
    función integrada de PHP que busca un cadena dentro de otra
    cadena. En este caso anterior estamos buscando
    <literal>'MSIE'</literal> (llamado aguja) dentro de
    <varname>$_SERVER['HTTP_USER_AGENT']</varname> (llamado pajar). 
    Si la cadena fue encontrada, la función devolverá la posición 
    de la aguja relativa al inicio del pajar. De lo contrario 
    devolverá &false;. Si no devuelve &false;, la declaración
    <link linkend="control-structures.if">if</link> se evalúa
    a &true; y el código adentro de las llaves {}
    es ejecutado. De lo contrario, el código no será ejecutado. Tómese
    la libertad de crear ejemplos similares usando <link
    linkend="control-structures.if">if</link>, <link
    linkend="control-structures.else">else</link>, y otras funciones
    como <function>strtoupper</function> y <function>strlen</function>. 
    Cada página del manual contiene ejemplos que puede usar. Si no está 
    seguro sobre el modo de uso éstas funciones, es recomendable que lea las
    páginas del manual tituladas <link linkend="about.prototypes">Cómo leer
    una definición de función</link> y la sección relacionada a <link
    linkend="functions">Funciones en PHP</link>.
   </para>
   <para>
    Podemos continuar y demostrar cómo puede saltar adentro y afuera 
    del modo PHP en el medio de un bloque de código:    
   </para>
   <para>
    <example>
     <info><title>Mezcla de los modos HTML y PHP</title></info>
     <programlisting role="php">
<![CDATA[
<?php
if (strpos($_SERVER['HTTP_USER_AGENT'], 'MSIE') !== FALSE) {
?>
<h3>strpos() debe haber devuelto no falso</h3>
<p>Está usando Internet Explorer</p>
<?php
} else {
?>
<h3>strpos() debió devolver algo diferente de falso</h3>
<p>No está usando Internet Explorer</p>
<?php
}
?>
]]>
     </programlisting>
     <para>
     Un ejemplo del resultado de la secuencia de comandos podría ser: 
     </para>
     <screen role="html">
<![CDATA[
<h3>strpos() debe haber devuelto falso</h3>
<p>Está usando Internet Explorer</p>
]]>
     </screen>
    </example>
   </para>
   <para>
    En vez de usar una sentencia PHP echo para demostrar algo, saltamos fuera 
    del código PHP y escribimos solamente HTML. Este es un punto muy importante 
    y potente que debemos observar aquí, y es que la fluidez lógica de la secuencia
    de comandos permanece intacta. Sólamente las partes donde hay bloques HTML 
    serán enviadas al visor dependiendo del resultado que <function>strstr</function> 
    devuelva. En otras palabras, si la cadena <literal>MSIE</literal> fue 
    encontrada o no.   
   </para>
  </section>
   
  <section xml:id="tutorial.forms">
   <info><title>Uso de Formularios</title></info>
   <para>
    Otra de las características más importantes de PHP es que gestiona 
    formularios HTML. El concepto básico que es importante entender es que 
    cualquier elemento de los formularios estará disponible automáticamente 
    en su código PHP. Por favor lea la sección del manual
    titulada <link linkend="language.variables.external">Variables
    fuera de PHP</link> para más información y ejemplos sobre cómo usar 
    formularios HTML con PHP. Observemos un ejemplo:    
   </para>
   <para>
    <example>
     <info><title>A simple HTML form</title></info>
     <programlisting role="html">
<![CDATA[
<form action="accion.php" method="post">
 <p>Su nombre: <input type="text" name="nombre" /></p>
 <p>Su edad: <input type="text" name="edad" /></p>
 <p><input type="submit" /></p>
</form>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    No hay nada especial en este formularo, es solamente HTML sin ninguna
    clase de etiquetas especiales de ningún tipo. Cuando el usario rellena
    éste formulario y oprime el botón Submit, una página titulada 
    <filename>action.php</filename> es llamada. En este archivo 
    encontrará algo así:   
   </para>
   <para>
    <example>
     <info><title>Printing data from our form</title></info>
     <programlisting role="php">
<![CDATA[
Hola <?php echo htmlspecialchars($_POST['nombre']); ?>.
Usted tiene <?php echo (int)$_POST['edad']; ?> años de edad.
]]>
     </programlisting>
     <para>
      Un ejemplo del resultado de esta secuencia de comandos puede ser:
     </para>
     <screen role="html">
<![CDATA[
Hola José. Usted tiene 22 años de edad.
]]>
     </screen>
    </example>
   </para>
   <para>
       Es aparentemente obvio lo que hace. No hay mucho más que
    decir al respecto. Las
    variables <varname>$_POST["nombre"]</varname>
    y <varname>$_POST["edad"]</varname> son definidas
    automáticamente por PHP. Hace un momento usamos la variable
    autoglobal <varname>$_SERVER</varname>, ahora hemos introducido
    autoglobal <link linkend="reserved.variables.post">$_POST</link>,
    que contiene toda la información enviada por el
    método POST. Fíjese en el
    atributo <emphasis>method</emphasis> en nuestro formulario; es
    POST. Si hubiéramos usado <emphasis>GET</emphasis>,
    entonces nuestra información estaría en la variable
    autoglobal <link
    linkend="reserved.variables.get">$_GET</link>. También
    puede utilizar la autoglobal <link
    linkend="reserved.variables.request">$_REQUEST</link> si no le
    importa el origen de la petición. ésta variable
    contiene una mezcla de información GET, POST y
    COOKIE. También puede ver la función
    <function>import_request_variables</function>.
    
    Aparte de las funciones <function>htmlspecialchars</function> y 
    <literal>(int)</literal>, debería ser obvio de que hace el código.
    <function>htmlspecialchars</function> se asegura que todos los
    caracteres que son especiales en html sean codificados adecuadamente
    de manera que nadie pueda inyectar etiquetas HTML o Javascript en 
    tu página web. El campo edad, como sabemos que es un número, podemos
    convertirlo en un <type>entero</type> que automáticamente se deshará
    de cualquier carácter no numérico. También puede hacer lo mismo
    con PHP con la extensión <link linkend="ref.filter">filter</link>
    Las variables <varname>$_POST['nombre']</varname> y 
    <varname>$_POST['edad']</varname> son establecidas automáticamente 
    por PHP. Anteriormente hemos usado la superglobal 
    <varname>$_SERVER</varname> y ahora estamos apunto de introducirte
    la superglobal <varname>$_POST</varname> que contiene todos los datos
    del POST. Dese cuenta que el <emphasis>método</emphasis> de nuestro
    formulario es POST. Si usa el método fuera <emphasis>GET</emphasis> entoces
    los datos del formulario estarían en la superglobal <varname>$_GET</varname>.
    en lugar de POST. En su lugar también puedes usar la superglobal
    <varname>$_REQUEST</varname>, si no le importa el tipo de datos enviados
    desde el formulario. Contiene toda la información de GET, POST y COOKIE.
    Vea también la función <function>import_request_variables</function>.
   </para>
   <para>
    You can also deal with XForms input in PHP, although you will find yourself
    comfortable with the well supported HTML forms for quite some time.
    While working with XForms is not for beginners, you might be interested
    in them. We also have a <link linkend="features.xforms">short introduction
    to handling data received from XForms</link> in our features section. 
   </para>
  </section>

  <section xml:id="tutorial.oldcode">
   <info><title>Using old code with new versions of PHP</title></info>
   <para>
    Ahora que PHP ha crecido y se ha convertido en un lenguaje popular, hay 
    muchos más repositorios y librerias que contienen código que puede reusar.
    Los desarrolladores de PHP han tratado en toda medida que sea compatible
    con versiones anteriores, es decir, si una secuencia de comandos fue escrita
    para una versión antigua en principio funcionaría (idealmente) sin ningún
    cambio en una versión reciente de PHP. A la práctica, usualmente algunos 
    cambios son necesarios.    
   </para>
   <para>
    Dos de los cambios mas importantes que afectan el código viejo son:
    <itemizedlist>
     <listitem>
      <simpara>
       La desaparición de las antiguas arrays <varname>$HTTP_*_VARS</varname> 
       (que usualmente son usadas como globales al interior de una función o
       método). Las siguientes <link
       linkend="language.variables.superglobals">variables superglobales</link> 
       que fueron introducidas en la versión <link
       xlink:href="&url.php.release4.1.0;">4.1.0</link> de PHP. Son:
       <varname>$_GET</varname>, <varname>$_POST</varname>, 
       <varname>$_COOKIE</varname>, <varname>$_SERVER</varname>,
       <varname>$_FILES</varname>, <varname>$_ENV</varname>, <varname>$_REQUEST</varname>,
       y <varname>$_SESSION</varname>. Las antiguas <varname>$HTTP_*_VARS</varname>, 
       como $HTTP_POST_VARS, todavía existen.
       &avail.register-long-arrays;
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Las variables externas ya no son registradas globalmente de forma
       automática, por defecto. En otras palabras, a partir de
       PHP <link xlink:href="&url.php.release4.2.0;">4.2.0</link>, la
       directiva PHP <link
       linkend="ini.register-globals">register_globals</link>
       está <emphasis>off</emphasis> por defecto en &php.ini;. El método 
       preferido para obtener acceso a éstos valores es por medio de las 
       variables superglobales mencionadas anteriormente. Antiguas secuencias
       de comandos, libros y tutoriales antiguos puede que asuman que ésta 
       directiva es está definida como <literal>on</literal>. Si es así,
       puede usar, por ejemplo, <varname>$id</varname> desde la URL 
       <literal>http://www.example.com/foo.php?id=42</literal>. Por
       otra parte, no importa si el valor de la directiva es on u
       off, <varname>$_GET['id']</varname> está siempre disponible.
      </simpara>
     </listitem>
    </itemizedlist>
     Para más información relacionada con estos cambios, puede ver la
     sección sobre
    <link linkend="language.variables.predefined">variables predefinidas</link>
    y los enlaces que hay dentro.
   </para>
  </section>
  
  <section xml:id="tutorial.whatsnext">
   <info><title>¿Y ahora qué?</title></info>
   <para>
   
    Con sus nuevos conocimientos debería ser capaz de entender la
    mayoría del manual y de los diversos scripts de ejemplo disponibles
    en los archivos. Puede encontrar otros ejemplos en la sección de enlaces
    de php.net:
    <link xlink:href="&url.php.links;">&url.php.links;</link>.
   </para>
   <para>
    Para ver varias presentaciones que muestra más acerca de lo que puede 
    hacer PHP, visite los diferentes sitios con material relacionado 
    a las conferencias realizadas:    
    <link xlink:href="&url.php.talks;">&url.php.talks;</link>
   </para>
  </section>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
