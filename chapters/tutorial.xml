<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
<!-- EN-Revision: 1.24 Maintainer: angela Status: ready -->
 <chapter id="tutorial">
  <title>Una explicaci&oacute;n sencilla </title>

  <para>
   Aqu&iacute;, te vamos a introducir a PHP en un peque&ntilde;o y sencillo manual. 
   Este documento te explicara como crear p&aacute;ginas web din&aacute;micas para el 
   internet con PHP, aunque PHP no solamente esta dise&ntilde;ado para la creaci&oacute;n de 
   estas. Mira la secci&oacute;n titulada <link linkend="intro-whatcando">Que se puede hacer con 
   PHP</link> 
   para mas informaci&oacute;n.
  </para>
  <para>
   Las P&aacute;ginas web que utilizan PHP son tratadas como p&aacute;ginas de HTML comunes 
   y corrientes, y tu puedes crearlas y editarlas de la misma manera que tu haces con 
   documentos normales  	
   de HTML.
  </para>

  <sect1 id="tutorial.requirements">
   <title>Que necesito?</title>
   <para>
    En este manual vamos a asumir que tu tienes un servidor que soporta PHP
    y que todos los archivos con la extensi&oacute;n <filename>.php</filename>
    son manejados por PHP. En la mayor&iacute;a de servidores esta es la extensi&oacute;n 
    que archivos PHP toman por defecto, pero pregunta al administrador de tu servidor para 
    estar asegurarte. 
    Si tu servidor soporta PHP entonces tu no necesitas hacer nada, solamente crea tus 
    archivos <filename>.php</filename> y guardalos en tu directorio web y el servidor como 
    por magia los analizara por voz. No hay necesidad de compilar nada, tampoco tienes 
    necesidad de instalar otras herramientas. Miralo de esta manera, estos archivos de PHP 
    son tan simples como archivos de HTML con una nueva familia de etiquetas (tags) que te 
    dejan hacer una gran cantidad de cosas. La mayor&iacute;a del las compa&ntilde;&iacute;as de alojamiento de 
    páginas web ofrecen el soporte que tu necesitas para usar PHP, pero si por alguna raz&oacute;n 
    ellos no lo hacen, considera leer la secci&oacute;n titulada <ulink url="&url.php.links;">
    Recursos PHP</ulink> para mas informaci&oacute;n acerca de compa&ntilde;&iacute;as de alojamiento que soportan PHP

   </para>
   <para>
    Digamos que tu tienes limitado acceso al internet y estas programando localmente. 
    En este caso, tu quer&eacute;is instalar a servidor de web como 
    <link linkend="install.apache">Apache</link>, y 
    <ulink url="&url.php.downloads;"> PHP </ulink>. Lo mas seguro es que tambi&eacute;n 
    quieres instalar una base de datos como <ulink url="&url.mysql.docs;">MySQL</ulink>.
    Tu puedes instalar estos productos individualmente o simplemente <ulink
    url="&url.installkits;">localiza un paquete pre-configurado</ulink> que 
    autom&aacute;ticamente instalara todos estos productos con solamente unos movimientos de 
    tu rat&oacute;n. Es muy f&aacute;cil instalara un servidor de la web con soporte de PHP 
    en cualquier sistemas de operaciones, incluyendo Linux y Windows. En Linux,
    <ulink url="&url.rpmfind;">rpmfind</ulink> y <ulink url="&url.rpmfind.pbone;">PBone</ulink> 
    te ayudaran a encontrar un RPM.
   </para>
  </sect1>

  <sect1 id="tutorial.firstpage">
   <title>Tu primera p&aacute;gina con PHP</title>
   <para>
    Empieza por crear un archivo llamado <filename>hello.php</filename>
    y ponlo en el "directorio ra&iacute;z" (<varname>DOCUMENT_ROOT</varname>)
    con el siguiente contenido:
   </para>
   <para>
    <example>
     <title>Nuestro primer script PHP: <filename>hello.php</filename></title>
     <programlisting role="php">
<![CDATA[
<html>
 <head>
  <title> Ejemplo de PHP</title>
 </head>
 <body>
 <?php echo "<p>Hola Mundo</p>"; ?>
 </body>
</html>
]]>
     </programlisting>
     <simpara>
      Utiliza tu navegador de web para acceder tu archivo, con el URL terminando 
      en "/hello.php". Si estas programando localmente este URL lucir&aacute; algo
      como <literal>http://localhost/hello.php</literal> o 
      <literal>http://127.0.0.1/hello.php</literal> pero esto depende en la 
      configuraci&oacute;n de tu servidor de web. Aunque esto es fuera del alcance de este 
      tutorial, tambi&eacute;n puedes ver las <varname>DocumentRoot</varname> y 
      <varname>ServerName</varname> directivas en la configuraci&oacute;n de tu servidor 
      (en Apache esto es &httpd.conf). Si todo esta configurado 
      correctamente, el archivo sera analizado por PHP y es siguiente contenido 
      aparecer&aacute; en tu navegador:
     </simpara>
      <screen role="html">
<![CDATA[
<html>
 <head>
  <title>Ejemplo de PHP</title>
 </head>
 <body>
 <p>Hola Mundo</p>
 </body>
</html>
]]>
      </screen>
    </example>
   </para>
   <para>
    Debes observar que esto no es como scripts de CGI . El archivo no necesita ninguna clase
    especial de permisos para ser ejecutado. Piensa al respecto como si fueran archivos de 
    HTML con un set muy especial de tags disponibles, y que hacen muchas cosas interesantes.
   </para>
   <para>
    Este programa es extremadamente simple, y tu no necesitas usar PHP para crear una 
    p&aacute;gina como esta. Todo lo que hace es mostrar: <literal>Hola Mundo</literal> 
    usando la declaraci&oacute;n
    <function>echo</function>. 
   </para>
   <para>
    Si has intentado usar este ejemplo, y no produjo ning&uacute;n resultado, te
    pregunto si quer&eacute;as descargar el archivo, o te mostro todo el archivo como texto, 
    lo mas seguro es que tu servidor no a activado PHP. P&iacute;dele a tu administrador que
    active esta funci&oacute;n por voz, o usa el cap&iacute;tulo titulado 
    <link linkend="installation">Instalaci&oacute;n</link> en el manual. 
    Si tu estas trabajando localmente, tambi&eacute;n lee el cap&iacute;tulo dedicado a la 
    instalaci&oacute;n, y asegurate de que todo este configurado apropiadamente. Si el 
    problema continua, por favor usa una del las muchas opciones para obtener <ulink 
    url="&url.php.support;">ayuda con PHP</ulink>. 
   </para>
   <para>
    El objetivo de este ejemplo es para demostrar como puedes usar las tags PHP.
    En este ejemplo usamos <literal>&lt;?php</literal> para indicar el inicio de la tag PHP
    Despu&eacute;s describimos la declaraci&oacute;n y dejamos el modo PHP usando 
    <literal>?&gt;</literal>.
    Tu puedes salir de PHP y regresar cuantas veces quieras usando este m&eacute;todo. Para 
    mas informaci&oacute;n, puedes leer la secci&oacute;n en el manual titulada <link 
    linkend="language.basic-syntax"> Sintaxis b&aacute;sico del PHP</link>.
   </para>
   <note>
    <title>Una Nota acerca de editores de texto</title>
    <para>
     Hay muchos editores de texto y Ambientes de Dise&ntilde;o integrado (IDE) que tu puedes 
     usar para crear, editar, y organizar archivos de PHP. Puedes encontrar una lista 
     parcial de estos en <ulink url="&url.phpeditorlist;">Lista de editores de PHP</ulink>. 
     Si tu quieres recomendar un editor, por favor visita la p&aacute;gina mencionada 
     anteriormente, y recomendalo a las personas encargadas del mantenimiento para que lo 
     pongan en la lista. Teniendo un editor que resalta el sintaxis de PHP puede ser de 
     mucha ayuda.
    </para>
   </note>
   <note>
    <title>Una Nota acerca de procesadores de palabras</title>
    <para>
     Procesadores de palabras como "StarOffice", "Microsoft word" y "Abiword" 
     no son buenas opciones para editar archivos de PHP. Si tu deseas usar uno de
     estos programas para probar tus scripts, primero debes asegurarte de que guardes 
     el documento en como "Texto" puro, o PHP no sera capaz de ejecutar el script.
    </para>
   </note>
   <note>
    <title>Una nota acerca de "Windows Notepad"</title>
    <para>     
     Si tu quieres escribir tus archivos PHP usando "Windows Notepad" y en algunos
     otros editores de texto para Windows necesitaras asegurarte que tus archivos son 
     guardados con la extensi&oacute;n .php (La mayor&iacute;a de los editores de texto en 
     Windows autom&aacute;ticamente trataran de a&ntilde;adir la .txt extensi&oacute;n a los 
     archivos a menos de que tomes los siguientes pasos para prevenirlo.) Cuando guardes tus 
     archivos y el programa te pregunte que nombre le quieres dar a tu archivo utiliza 
     comillas cuando escribes el nombre (i. e. "<filename>hola.php</filename>"). Una 
     alternativa es oprimir en la lista de opciones "Archivos de Texto *.txt" seleccionar la 
     opci&oacute;n "Todos los archivos *.*". Aqu&iacute; puedes escribir el nombre del 
     archivo sin las comillas.
    </para>
   </note>
   <para>
    Ahora que as creado un peque&ntilde;o script de PHP que funciona correctamente, es hora 
    de que trabajemos con el script de PHP mas famoso; vamos a hacer una llamada a la 
    funci&oacute;n <function>phpinfo</function> para que obtener informaci&oacute;n acerca 
    de tu sistema y configuraci&oacute;n como las <link 
    linkend="language.variables.predefined">variables disponibles predefinidas </link>, los  
    m&oacute;dulos utilizados por PHP, y las  diferentes opciones de <link 
    linkend="configuration">configuraci&oacute;n</link>. Tomemos unos segundos para revisar 
    esta informaci&oacute;n.
   </para>
   
  </sect1>

  <sect1 id="tutorial.useful">
   <title>Algo Útil</title>
   <para>
    Hagamos ahora algo que puede ser mas &uacute;til. Vamos a chequear que clase de 
    navegador de la web utilizas. Para hacerlo, vamos a mirar la informaci&oacute;n que el 
    navegador nos manda como parte de su requesta HTTP. Esta informaci&oacute;n es guardada 
    en una <link linkend="language.variables">variable</link>. Las variables siempre 
    comiensan con un signo de dolar ("$") en PHP. La variable que vamos a utilizar en esta 
    situaci&oacute;n es <varname>$_SERVER["HTTP_USER_AGENT"]</varname>.
   </para>
   <note>
   <para>
     <link linkend="reserved.variables.server">$_SERVER</link> es una variable reservada por 
     PHP que contiene toda la informaci&oacute;n del servidor de web. Es conocida como 
     Autoglobal (o Superglobal). 

     Lee el manual en la secci&oacute;n titulada <link 
     linkend="language.variables.superglobals">Autoglobals</link> para mas 
     informaci&oacute;n. Estas son variables especiales que son introducidas en la 
     versi&oacute;n <ulink url="&url.php.release4.1.0;">4.1.0</ulink> de PHP. Antes 
     pod&iacute;amos usar los, <varname>$HTTP_*_VARS</varname> arrays, tales como 
     <varname>$HTTP_SERVER_VARS</varname>.
     Aunque estos han sido despreciados, estas antiguas variables todav&iacute;a existen.  
     (Tambi&eacute;n puedes mirar las notas relacionadas acerca del <link 
     linkend="tutorial.oldcode">viejo c&oacute;digo</link>.)
    </para>
   </note>
   <para>
    Para poder ver esta variable solo necesitas:
    </para>
   <para>
    <example>
    <title>Imprimiendo una variable (Elemento del Array)</title>
    <programlisting role="php">
<![CDATA[
<?php echo $_SERVER["HTTP_USER_AGENT"]; ?>
]]>
    </programlisting>
    <para>
     Un ejemplo de los resultados de este programa seria:
    </para>
      <screen role="html">Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)
      </screen>

   </example>
   </para>
   <para>
    Hay muchas <link linkend="language.types">clases</link> de variables en PHP.  En el 
    ejemplo anterior imprimimos un <link linkend="language.types.array">Array</link>. 
    Los Arrays pueden ser muy &uacute;tiles
   </para>
   <para>
    <varname>$_SERVER</varname> es simplemente una variable que es autom&aacute;ticamente 
    disponible para ti en PHP. Puedes obtener una lista en la secci&oacute;n titulada <link 
    linkend="reserved.variables">Variables Reservadas</link> del manual, o puedes crear una 
    lista completa creando un archivo como a continuaci&oacute;n:
   </para>
   <para>
    <example>
     <title>Ver todas las variables predefinidas con <function>phpinfo</function></title>
     <programlisting role="php">
<![CDATA[
<?php phpinfo(); ?>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Si tu abres este archivo con tu navegador, puedes ver una p&aacute;gina con 
    informaci&oacute;n hacerca de PHP, junto a una lista de todas las variables que puedes 
    usar.
   </para>
   <para>
    Puedes usar mas de un declaraci&oacute;n PHP dentro de una tag PHP, y crear 
    peque&ntilde;os segmentos de c&oacute;digo que pueden hacer mas que un "echo". Por 
    ejemplo, si queremos detectar por "Internet Explorer" har&iacute;amos algo as&iacute;:
   </para>
   <para>
    <example>
     <title>Ejemplos usando <link linkend="control-structures">estructuras de control 
     </link> y <link linkend="functions">funciones</link></title>
     <programlisting role="php">
<![CDATA[
<?php
if (strstr($_SERVER["HTTP_USER_AGENT"], "MSIE")) {
	echo "Estas usando Internet Explorer<br />";
}
?>
]]>
     </programlisting>
     <para>
      Un ejemplo de los resultado del script puede ser:
      </para>
      <screen role="html">
<![CDATA[
Estas usando Internet Explorer<br />
]]>
      </screen>
     </example>
   </para>
   <para>
    Aqu&iacute; introduciremos un par de conceptos nuevos. Tenemos una
    <link linkend="control-structures.if">"if"</link> declaraci&oacute;n. 
    Si estas familiarizado con los la sintaxis b&aacute;sica del lenguaje "C", esto se vera 
    l&oacute;gico, Pero si tu no entiendes "C" o otros lenguajes de programaci&oacute;n 
    donde encuentras la sintaxis usada anteriormente, probablemente deber&iacute;as 
    conseguir un libro que te introduzca mejor a PHP, y lee los primeros cap&iacute;tulos, o 
    tambi&eacute;n puedes ver la parte del manual titulada  <link 
    linkend="langref">referencias al lenguaje</link>. 
    Puedes encontrar una lista de libros acerca de PHP en <ulink 
    url="&url.php.books;">&url.php.books;</ulink>. 
   </para>
   <para>
    El segundo concepto que introducimos fue el concepto llamado 
    <function>strstr</function>. <function>strstr</function> es una funci&oacute;n integrada 
    en PHP que busca un cadena (string) dentro de otra cadena (string) mas larga. En el caso 
    anterior estamos buscando por  <literal>"MSIE"</literal> dentro de 
    <varname>$_SERVER["HTTP_USER_AGENT"]</varname>. Si la cadena (string) fue encontrada, la 
    funci&oacute;n devolver&aacute; verdadero ("&true;"),la declaraci&oacute;n
    <link linkend="control-structures.if">"if"</link> se eval&uacute;a a verdadero 
    ("&true;") y  el c&oacute;digo adentro de las {braces} es ejecutado. De otra manera no 
    lo es ejecutado. Tomate la libertad de crear ejemplos similares usando <link 
    linkend="control-structures.if">"if"</link>, <link 
    linkend="control-structures.else">"else" ("de otra manera")</link>, y otras funciones 
    como <function>strtoupper</function> y <function>strlen</function>. Cada p&aacute;gina 
    del manual contiene ejemplos que puedes usar. Si no estas seguro acerca de como usar estas
    funciones, te recomiendo que leas las p&aacute;ginas del manual tituladas <link linkend="about.prototypes">
    Como leer una funci&oacute;n definida </link> y la secci&oacute;n relacionada a <link linkend="functions"> Funciones
    en PHP </link>
   </para>
   <para>
    Podemos dar paso mas y demostrar como pod&eacute;is saltar adentro y afuera del modo PHP 
    en el medio de un bloque de c&oacute;digo PHP
    </para>
   <para>
    <example>
     <title>Mesclando los modos HTML y PHP </title>
     <programlisting role="php">
<![CDATA[
<?php
if (strstr($_SERVER["HTTP_USER_AGENT"], "MSIE")) {
?>
<h3>strstr tiene que haber devuelto verdadero </h3>
<center><b>Estas usando Internet Explorer</b></center>
<?php
} else {
?>
<h3>strstr tiene que haber devuelto falso</h3>
<center><b>No estas usando Internet Explorer</b></center>
<?php
}
?>
]]>
     </programlisting>
     <para>
      Un ejemplo de los resultados de este script pueden ser:
     </para>
            <screen role="html">
<![CDATA[
<h3>strstr tiene que haber devuelto verdadero </h3>
<center><b>Estas usando Internet Explorer</b></center>
]]>
      </screen>
    </example>
   </para>
   <para>
    En vez de usar una declaraci&oacute;n PHP "echo" para demostrar algo, saltamos fuera del 
    c&oacute;digo PHP y escribimos HTML puro. Este es un punto muy importante y potente que 
    debemos observar aqu&iacute;, este es que la fluidez l&oacute;gica del script esta 
    intacta. 
    Solamente las partes donde hay HTML ser&aacute;n mandadas a tu navegador dependiendo en 
    los resultados que<function>strstr</function> ah devuelto, si fue (verdadero [&true;], o 
    falso [&false;]). En otras palabras, si la cadena (string) <literal>MSIE</literal> fue 
    encontrada o no.  
   </para>
  </sect1>
   
  <sect1 id="tutorial.forms">
   <title>Usando Formas HTML</title>
   <para>
    Una de las caracter&iacute;sticas de PHP es que maneja formas de HTML. El concepto 
    b&aacute;sico el cual es importante entender es que cualquier elemento de la forma 
    autom&aacute;ticamente estar&aacute; disponible para tu c&oacute;digo PHP. Por favor usa 
    la secci&oacute;n titulada <link linkend="language.variables.external">Variables fuera 
    de PHP</link> en el manual para mas informaci&oacute;n y ejemplos en como usar formal 
    HTML con PHP. Observemos un ejemplo:    
   </para>
   <para>
    <example>
     <title>Una forma HTML sencilla</title>
     <programlisting role="html">
<![CDATA[
<form action="action.php" method="POST">
 Tu nombre: <input type="text" name="name" />
 Tu edad: <input type="text" name="age" />
 <input type="submit">
</form>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    No hay nada especial acerca de esta forma, es HTML limpio sin ninguna clase de tags 
    desconocidas. Cuando el cliente llena esta forma, y oprime el bot&oacute;n llamado 
    "Submit", una p&aacute;gina titulada <filename>action.php</filename> es llamada. En este 
    archivo encontraras algo as&iacute;:    
   </para>
   <para>
    <example>
     <title>Procesando la informaci&oacute;n de nuestra forma HTML</title>
     <programlisting role="php">
<![CDATA[
Hola <?php echo $_POST["name"]; ?>.
Tienes <?php echo $_POST["age"]; ?> ]]> a&ntilde;os <![CDATA[ de viejo
]]>
     </programlisting>
     <para>
      Un ejemplo del resultado de este script podr&iacute;a ser:
     </para>
      <screen role="html">

Hola Jos&eacute;.
Tienes 22 a&ntilde;os de viejo

      </screen>
    </example>
   </para>
   <para> 
    Creo que es obvio lo que hace. No hay mucho mas al respecto. 
    las variables <varname>$_POST["name"]</varname> y <varname>$_POST["age"]</varname> son 
    asignadas autom&aacute;ticamente por PHP. Hace un ratito usamos la variable 
    <varname>$_SERVER</varname> Autoglobal, ahora hemos introducido <link 
    linkend="reserved.variables.post">$_POST</link> Autoglobal, que contiene toda la 
    informaci&oacute;n POST. Pon atenci&oacute;n al <emphasis>method</emphasis> en nuestra 
    forma; es POST. Si hubi&eacute;ramos usado  <emphasis>GET</emphasis> entonces nuestra 
    informaci&oacute;n estar&iacute;a en <link linkend="reserved.variables.get">$_GET</link> 
    Autoglobal. Tambi&eacute;n puedes utilizar <link 
    linkend="reserved.variables.request">$_REQUEST</link> Autoglobal si a ti no te importa 
    el origen de to requesta inform&aacute;tica. Esta contiene una mezcla de informaci&oacute;n 
    GET, POST y COOKIE. Tambi&eacute;n puedes ver la funci&oacute;n 
    <function>import_request_variables</function>.
   </para>
  </sect1>
  
  <sect1 id="tutorial.oldcode">
   <title>Usando c&oacute;digo antiguo con nuevas versiones de PHP
   </title>
   <para>
    Ahora que PHP ha crecido y se ha convertido en un lenguaje popular, hay muchas mas 
    fuentes de recursos conteniendo c&oacute;digo que puedes reusar en tu propio programa. 
    Por la mayor parte las personas que mantienen PHP tratan de que el lenguaje sea 
    compatible con versiones anteriores, para que los programas escritos con versiones 
    antiguas contin&uacute;en funcionando cuando instalas una nueva versi&oacute;n de PHP. 
    En un mundo perfecto tu nunca necesitar&iacute;as modificar tu c&oacute;digo para 
    hacerlo funcionar con versiones nuevas del lenguaje; pero como todos sabemos este no es 
    un mundo perfecto, usualmente cambios en tu c&oacute;digo son necesarios.    
   </para>
   <para>
    Dos de los cambios mas importantes que afectan c&oacute;digo viejo son:
    <itemizedlist>
     <listitem>
      <simpara>
       La desaparici&oacute;n de los arrays <varname>$HTTP_*_VARS</varname> (que usualmente 
       son indicados como una global cuando su usan dentro de una funci&oacute;n o 
       m&eacute;todo). 
       Los siguientes <link linkend="language.variables.superglobals">arrays de Autoglobal 
       </link> son introducidos en la versi&oacute;n <ulink 
       url="&url.php.release4.1.0;">4.1.0</ulink>. de PHP. Estas son: 
       <varname>$_GET</varname>, <varname>$_POST</varname>, 
       <varname>$_COOKIE</varname>, <varname>$_SERVER</varname>, 
       <varname>$_FILES</varname>, <varname>$_ENV</varname>, <varname>$_REQUEST</varname>, y
       <varname>$_SESSION</varname>. los antiguos <varname>$HTTP_*_VARS</varname> como 
       $HTTP_POST_VARS, todav&iacute;a existen, y han existido desde PHP 3
      
      </simpara>
     </listitem>
     <listitem>
      <simpara>       
       Las variables externas que ya no son registradas autom&aacute;ticamente. En otras 
       palabras, desde PHP <ulink url="&url.php.release4.2.0;">4.2.0</ulink>, la directiva 
       PHP <link linkend="ini.register-globals">register_globals</link> esta <emphasis>off 
       (desactivada) </emphasis> en &php.ini;. El m&eacute;todo preferido para obtener 
       acceso a estos valores es por medio de los "Autoglobal arrays" mencionados 
       anteriormente. Scripts que son antiguos, libros y tutoriales pueden asumir que esta 
       directiva es autom&aacute;ticamente "on". Si "on" por ejemplo tu puedes usar 
       <varname>$id</varname> desde el URL 
       <literal>http://www.example.com/foo.php?id=42</literal>. No importa si es "on" u 
       "off", <varname>$_GET['id']</varname> esta siempre disponible.       
      </simpara>
     </listitem>
    </itemizedlist>
     Para mas detalles relacionados con estos cambios, puedes ver la secci&oacute;n en 
     <link linkend="language.variables.predefined">variables predefinidas</link>.
   </para>
  </sect1>
  
  <sect1 id="tutorial.whatsnext">
   <title>Ahora que?</title>
   <para>
    Con lo que hemos visitado, puedes entender la mayor parte del manual, y tambi&eacute;n 
    los ejemplos que est&aacute;n disponibles en los archivos. Tambi&eacute;n puedes 
    encontrar otros ejemplos en los diferentes sitios de php.net en la secci&oacute;n de 
    links:
    <ulink url="&url.php.links;">&url.php.links;</ulink>.
   </para>
   <para>
    Para ver una presentacion que muestra mas acerca de lo PHP puede haer, ve a los diferents
    sitios con materiales relacionados a las diferentes conferencias: <ulink url="&url.php.conf;">
    &url.php.conf;</ulink> y <ulink url="&url.php.talks;">&url.php.talks; </ulink>
   </para>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

