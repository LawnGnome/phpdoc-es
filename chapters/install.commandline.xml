<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.7 Maintainer: rafael Status: ready -->

  <sect1 xml:id="install.commandline" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Servidores-CGI/Linea de comandos</title>
 <para>
  Por defecto PHP se compila como un programa CGI. Esto crea un
  int&eacute;rprete de comandos que puede ser usado para procesar CGI scripts
  &oacute; scripts en PHP ejecutados directamente en linea de comandos. Si
  utilizais un servidor web que soporte PHP como m&oacute;dulo, deberiais de
  usarlo de este modo para sacarle el mejor partido. Sin embargo, la
  versi&oacute;n CGI permite correr p&aacute;ginas PHP bajo usuarios con
  identificaciones diferentes. Asegurarse de leer el <link
  linkend="security.index">Cap&iacute;tulo sobre seguridad</link> si vais a
  utilizar PHP como CGI.
 </para>
 <para>
  A partir de PHP 4.3.0, se han a&ntilde;adido caracteristicas
  importantes a PHP. Una nueva SAPI llamada CLI existe tambi&eacute;n y tiene
  el mismo nombre que el binario CGI. Lo que se instala en
  <literal>{PREFIX}/bin/php</literal> depende de vuestra configuraci&oacute;n
  y se encuentra descrito detalladamente en la secci&oacute;n del manual
  <link linkend="features.commandline">Usando PHP desde la linea de
   comandos</link>, Para m&aacute;s informaci&oacute;n, lea esa secci&oacute;n dl manual.
 </para>
 
 <sect2 xml:id="install.commandline.testing">
  <title>Comprobando</title>
  <simpara>
   Si compilais PHP como binario CGI, podeis comprobar que todo
   funcione con el comando <command>make test</command>. Es siempre
   una buena idea el comprobar que todo funciona despues de una
   compilaci&oacute;n. De esta manera podeis encontrar problemas con PHP en
   vuestra plataforma en una fase inicial.
  </simpara>
 </sect2>
 
 <sect2 xml:id="install.commandline.benchmarking">
  <title>Benchmarking</title>
  <simpara>
   Si habeis compilado PHP 3 como binario CGI, podeis poner a prueba
   vuestra instalaci&oacute;n utilizando el comando <command>make
   bench</command>. Tener en cuenta que si &safemode; est&aacute; activado
   por defecto, no se podra terminar la prueba si esta tarda en
   ejecutarse m&aacute;s de los 30 segundos permitidos. Esto ocurre porque la
   funci&oacute;n <function>set_time_limit</function> no puede ser usada en
   &safemode;. Usar la opci&oacute;n de configuraci&oacute;n <link
   linkend="ini.max-execution-time">max_execution_time</link> para
   controlar el tiempo de ejecuci&oacute;n de vuestros scripts. <command>make
   bench</command> ignora el <link
   linkend="configuration.file">fichero de configuraci&oacute;n</link>.
  </simpara>
  <note>
   <simpara>
    <command>make bench</command> se encuentra disponible solamente en
    PHP 3.
   </simpara>
  </note>
 </sect2>
   
 <sect2 xml:id="install.commandline.using-variables">
  <title>Usando variables</title>
  <simpara>
   Algunas variables de entorno provistas por el servidor no se
   encuentran definidas en la <link
   xlink:href="&url.cgispec;">especificaci&oacute;n CGI/1.1</link>
   actual. Solamente las siguientes variables est&aacute;n definidas; todas
   las dem&aacute;s son se pueden definir como 'extensiones': AUTH_TYPE,
   CONTENT_LENGTH, CONTENT_TYPE, GATEWAY_INTERFACE, PATH_INFO,
   PATH_TRANSLATED, QUERY_STRING, REMOTE_ADDR, REMOTE_HOST,
   REMOTE_IDENT, REMOTE_USER, REQUEST_METHOD, SCRIPT_NAME,
   SERVER_NAME, SERVER_PORT, SERVER_PROTOCOL and SERVER_SOFTWARE
  </simpara>
 </sect2>
   
  </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
