<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.11 Maintainer: lboshell Status: ready -->
<!-- Author: Wez Furlong <wez@thebrainroom.com>
  Please contact me before making any major amendments to the
  content of this section.  Splitting/Merging are fine if they are
  required for php-doc restructuring purposes - just drop me a line
  if you make a change (so I can update my local copy).
-->
 <sect1 id="stream.common-api">
    <title>Referencia de la API Com&uacute;n de Secuencias</title>
  
  <refentry id="streams.php-stream-stat-path">
   <refnamediv>
    <refname>php_stream_stat_path</refname>
    <refpurpose>Obtiene el status de un archivo o URL</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis role="c">
      <type>int</type><methodname>php_stream_stat_path</methodname>
      <methodparam><type>char *</type><parameter>ruta</parameter></methodparam>
      <methodparam><type>php_stream_statbuf *</type><parameter>ssb</parameter></methodparam>
     </methodsynopsis>
     <para>
      <function>php_stream_stat_path</function> examina el archivo o
      URL especificado por <parameter>ruta</parameter> y devuelve
      informaci&oacute;n tal como el tama&ntilde;o del archivo, los
      tiempos de acceso y creaci&oacute;n y dem&aacute;s. El valor de
      retorno es 0 de tener &eacute;xito, 1 en caso de error. Para
      m&aacute;s informaci&oacute;n sobre la informaci&oacute;n
      devuelta, vea
      <link
      linkend="streams.struct-php-stream-statbuf">php_stream_statbuf</link>.
     </para>
    </refsect1>
  </refentry>
  
  <refentry id="streams.php-stream-stat">
   <refnamediv>
    <refname>php_stream_stat</refname>
    <refpurpose>Obtiene el status del almacenamiento interno asociado
    con una secuencia</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis role="c">
      <type>int</type><methodname>php_stream_stat</methodname>
      <methodparam><type>php_stream *</type><parameter>secuencia</parameter></methodparam>
      <methodparam><type>php_stream_statbuf *</type><parameter>ssb</parameter></methodparam>
     </methodsynopsis>
     <para>
      <function>php_stream_stat</function> examina el almacenamiento
      al que est&aacute; sujeto la <parameter>secuencia</parameter>, y
      devuelve informaci&oacute;n como el tama&ntilde;o de archivo,
      las fechas de acceso y creaci&oacute;n y dem&aacute;s. El valor
      de retorno es 0 en caso de &eacute;xito, -1 si ocurre un
      error. Para m&aacute;s informaci&oacute;n sobre la
      informaci&oacute;n devuelta, vea
      <link
      linkend="streams.struct-php-stream-statbuf">php_stream_statbuf</link>.
     </para>
    </refsect1>
  </refentry>
  
  
  <refentry id="streams.php-stream-open-wrapper">
   <refnamediv>
    <refname>php_stream_open_wrapper</refname>
    <refpurpose>Abre una secuencia sobre un archivo o URL</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis role="c">
      <type>php_stream *</type><methodname>php_stream_open_wrapper</methodname>
      <methodparam><type>char *</type><parameter>ruta</parameter></methodparam>
      <methodparam><type>char *</type><parameter>modo</parameter></methodparam>
      <methodparam><type>int</type><parameter>opciones</parameter></methodparam>
      <methodparam><type>char **</type><parameter>abierto</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>php_stream_open_wrapper</function> abre una secuencia
     sobre el archivo, URL, u otro recurso envuelto indicado
     por <parameter>ruta</parameter>. Dependiendo del valor
     de <parameter>modo</parameter>, la secuencia puede ser abierta
     para lectura, escritura, adici&oacute;n o alguna
     combinaci&oacute;n de &eacute;stos modos. Vea la tabla m&aacute;s
     adelante para conocer los diferentes modos que pueden ser usados;
     adicionalmente a los caracteres listados m&aacute;s abajo, puede
     incluir el caracter 'b' ya sea como el segundo o &uacute;ltimo
     caracter en la cadena de modo. La presencia del caracter 'b' le
     informa a la implementaci&oacute;n de secuencias en
     cuesti&oacute;n que abra la secuencia en modo seguro con material
     binario.
    </para>
    <para>
     El caracter 'b' es ignorado en todos los sistemas compatibles con
     POSIX, que tratan los archivos binarios y de texto en la misma
     manera. Es una buena idea especificar el caracter 'b' cuando su
     secuencia trabaje con datos en donde todos los 8 bits son
     importantes, de modo que su c&oacute;digo funcione cuando sea
     compilado en un sistema en donde la bandera 'b' es importante.
    </para>
    <para>
     Cualquier archivo local creado por la API de secuencias
     tendr&aacute; sus permisos iniciales definidos de acuerdo a los
     valores predeterminados del sistema operativo - bajo sistemas
     basados en Unix esto quiere decir que se usar&aacute; el valor
     umask del proceso. Bajo Windows, el due&ntilde;o del archivo
     ser&aacute; el proceso que lo origin&oacute;. Todo archivo remoto
     ser&aacute; creado de acuerdo a la envoltura de URL que fuera
     usada para abrir el archivo, y las credenciales entregadas al
     servidor remoto.
    </para>
    <para>
     <variablelist>
      <varlistentry>
       <term>
        <constant>r</constant> 
       </term>
       <listitem>
        <simpara>
         Abre un archivo de texto para lectura. La secuencia es
         ubicada al comienzo del archivo.
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>
        <constant>r+</constant> 
       </term>
       <listitem>
        <simpara>
         Abre un archivo de texto para lectura y escritura. La
         secuencia es ubicada el comienzo del archivo.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>
        <constant>w</constant> 
       </term>
       <listitem>
        <simpara>
         Trunca el archivo a una longitud de cero, o crea el archivo
         de texto para escritura. La secuencia es ubicada al comienzo
         del archivo.
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>
        <constant>w+</constant> 
       </term>
       <listitem>
        <simpara>
         Abre un archivo de texto para lectura y escritura. El archivo
         es creado si no existe, o de otra forma es truncado. La
         secuencia es ubicada al comienzo del archivo.
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>
        <constant>a</constant> 
       </term>
       <listitem>
        <simpara>
         Abre para escritura. El archivo es creado si no existe. La
         secuencia es ubicada al final del archivo.
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>
        <constant>a+</constant> 
       </term>
       <listitem>
        <simpara>
         Abre un archivo de texto para lectura y escritura. El archivo
         es creado si no existe. La secuencia es ubicada al final del
         archivo.
        </simpara>
       </listitem>
      </varlistentry>
      
     </variablelist>    
    </para>    
    <para>
     <parameter>opciones</parameter> afecta el modo en que se
     interpreta la ruta/URL de la secuencia, los chequeos de modo
     seguro y las acciones tomadas si hay un error durante la apertura
     de la secuencia. Vea <link linkend ="streams.options">Opciones de
     apertura de secuencia</link> para m&aacute;s informaci&oacute;n
     sobre las opciones.
    </para>
    <para>
     Si <parameter>abierto</parameter> es diferente a NULL,
     &eacute;ste par&aacute;metro ser&aacute; definido como una cadena
     que contiene el nombre del archivo/recurso real que fue
     abierto. Esto es importante cuando las opciones
     incluyen <constant>USE_PATH</constant>, valor que causa que
     include_path sea usado en busca del archivo. Usted, el origen de
     la llamada, es responsable de llamar
     <function>efree</function> sobre el nombre de archivo devuelto en
     este par&aacute;metro.
    </para>
    <note>
     <simpara>
      Si ha especificado <constant>STREAM_MUST_SEEK</constant>
      en <parameter>opciones</parameter>, la ruta devuelta
      en <parameter>abierto</parameter> puede no ser el nombre de la
      secuencia real que le fue devuelta. Sin embargo, ser&aacute; el
      nombre del recurso original desde el cual se manufactur&oacute;
      la secuencia sensible a b&uacute;squedas.
     </simpara>
    </note>
   </refsect1>
  </refentry>
  
  
  <refentry id="streams.php-stream-read">
   <refnamediv>
    <refname>php_stream_read</refname>
    <refpurpose>Leer un n&uacute;mero de bytes desde una secuencia a
    un b&uacute;fer</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis role="c">
      <type>size_t</type><methodname>php_stream_read</methodname>
      <methodparam><type>php_stream *</type><parameter>secuencia</parameter></methodparam>
      <methodparam><type>char *</type><parameter>buf</parameter></methodparam>
      <methodparam><type>size_t</type><parameter>conteo</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>php_stream_read</function> lee
     hasta <parameter>conteo</parameter> bytes de datos
     desde <parameter>secuencia</parameter> y los copia en el
     b&uacute;fer <parameter>buf</parameter>.
    </para>
    <para>
     <function>php_stream_read</function> devuelve el n&uacute;mero de
     bytes que fueron le&iacute;dos satisfactoriamente. No hay
     distinci&oacute;n entre una lectura fallida o una
     condici&oacute;n de final-de-archivo -
     use <function>php_stream_eof</function> para revisar si se
     encuentra en <constant>EOF</constant>.
    </para>
    <para>
     La posici&oacute;n interna de la secuencia es desplazada hacia
     adelante por el n&uacute;mero de bytes que fueron le&iacute;dos,
     de modo que las lecturas subsiguientes continuar&aacute;n desde
     ese punto.
    </para>
    <para>
     Si hay menos de <parameter>conteo</parameter> bytes disponibles
     para su lectura, &eacute;sta llamada crear&aacute; un bloqueo
     (esperar&aacute;) hasta que el n&uacute;mero requerido se
     encuentre disponible, dependiendo del status de bloqueo de la
     secuencia. Por defecto, una secuencia es abierta en modo de
     bloqueo. Cuando se lee desde archivos regulares, el modo de
     bloqueo usualmente no representar&aacute; ninguna diferencia:
     cuando la secuencia alcance
     el <constant>EOF</constant>, <function>php_stream_read</function>
     devolver&aacute; un valor menor
     que <parameter>conteo</parameter>, y 0 en cualquier lectura
     subsiguiente.
    </para>
   </refsect1>
  </refentry>

  <refentry id="streams.php-stream-write">
   <refnamediv>
    <refname>php_stream_write</refname>
    <refpurpose>Escribir un n&uacute;medo de bytes desde un
    b&uacute;fer a una secuencia</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis role="c">
      <type>size_t</type><methodname>php_stream_write</methodname>
      <methodparam><type>php_stream *</type><parameter>secuencia</parameter></methodparam>
      <methodparam><type>const char *</type><parameter>buf</parameter></methodparam>
      <methodparam><type>size_t</type><parameter>conteo</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>php_stream_write</function>
     escribe <parameter>conteo</parameter> bytes de datos
     desde <parameter>buf</parameter>
     en <parameter>secuencia</parameter>.
    </para>
    <para>
     <function>php_stream_write</function> devuelve el n&uacute;mero
     de bytes que fueron escritos satisfactoriamente. Si hubo un
     error, el n&uacute;mero de bytes escritos ser&aacute; menor
     que <parameter>conteo</parameter>.
    </para>
    <para>
     La posici&oacute;n interna de la secuencia es desplazada hacia
     adelante en el n&uacute;mero de bytes que fueron escritos, de
     modo que cualquier escritura subsiguiente continuar&aacute; desde
     ese punto.
    </para>
   </refsect1>
  </refentry>

  <refentry id="streams.php-stream-eof">
   <refnamediv>
    <refname>php_stream_eof</refname>
    <refpurpose>Chequear por una condici&oacute;n de fin-de-archivo en
    una secuencia</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis role="c">
      <type>int</type><methodname>php_stream_eof</methodname>
      <methodparam><type>php_stream *</type><parameter>secuencia</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>php_stream_eof</function> chequea por una
     condici&oacute;n de fin-de-archivo
     en <parameter>secuencia</parameter>.
    </para>
    <para>
     <function>php_stream_eof</function> devuelve 1 para indicar
     <constant>EOF</constant>, 0 si no hay <constant>EOF</constant> y
     -1 para indicar un error.
    </para>
   </refsect1>
  </refentry>

  <refentry id="streams.php-stream-getc">
   <refnamediv>
    <refname>php_stream_getc</refname>
    <refpurpose>Leer un byte &uacute;nico desde una
    secuencia</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis role="c">
      <type>int</type><methodname>php_stream_getc</methodname>
      <methodparam><type>php_stream *</type><parameter>secuencia</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>php_stream_getc</function> lee un caracter &uacute;nico
     desde
     <parameter>secuencia</parameter> y lo devuelve como un char sin
     signo, moldeado como un int, o <constant>EOF</constant> si se ha
     llegado al fin-de-archivo, u ocurri&oacute; un error.
    </para>
    <para>
     <function>php_stream_getc</function> puede bloquear en el mismo
     modo en que bloquea <function>php_stream_read</function>.
    </para>
    <para>
     La posici&oacute;n interna de la secuencia es desplazada hacia
     adelante en 1 si tiene &eacute;xito.
    </para>
   </refsect1>
  </refentry>

  <refentry id="streams.php-stream-gets">
   <refnamediv>
    <refname>php_stream_gets</refname>
    <refpurpose>Leer una l&iacute;nea de datos desde una secuencia a
    un b&uacute;fer</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis role="c">
      <type>char *</type><methodname>php_stream_gets</methodname>
      <methodparam><type>php_stream *</type><parameter>secuencia</parameter></methodparam>
      <methodparam><type>char *</type><parameter>buf</parameter></methodparam>
      <methodparam><type>size_t</type><parameter>conteo</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>php_stream_gets</function> lee
     hasta <parameter>conteo</parameter>-1 bytes de datos
     desde <parameter>secuencia</parameter> y los copia en el
     b&uacute;fer <parameter>buf</parameter>. La lectura se detiene
     luego de un <constant>EOF</constant> o una nueva l&iacute;nea. Si
     una nueva l&iacute;nea es le&iacute;da, &eacute;sta es almacenada
     en <parameter>buf</parameter> como parte de los datos
     devueltos. Un caracter de terminaci&oacute;n NUL es almacenado
     como el &uacute;ltimo caracter en el b&uacute;fer.
    </para>
    <para>
     <function>php_stream_read</function>
     devuelve <parameter>buf</parameter> de tener &eacute;xito, o NULL
     de lo contrario.
    </para>
    <para>
     La posici&oacute;n interna de la secuencia es desplazada hacia
     adelante en el n&uacute;mero de bytes que fueron le&iacute;dos,
     de modo que cualquier lectura subsiguiente continuar&aacute; a
     partir de ese punto.
    </para>
    <para>
     Esta funci&oacute;n puede bloquear en el mismo modo en que lo
     hace <function>php_stream_read</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="streams.php-stream-close">
   <refnamediv>
    <refname>php_stream_close</refname>
    <refpurpose>Cerrar una secuencia</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis role="c">
      <type>int</type><methodname>php_stream_close</methodname>
      <methodparam><type>php_stream *</type><parameter>secuencia</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>php_stream_close</function> cierra de forma segura
     la <parameter>secuencia</parameter> y libera los recursos
     asociados con ella. Luego de que
     la <parameter>secuencia</parameter> ha sido cerrada, su valor es
     indefinido y no debe ser usado.
    </para>
    <para>
     <function>php_stream_close</function> devuelve 0 si la secuencia
     fue cerrada, o <constant>EOF</constant> para indicar un
     error. Independientemente del &eacute;xito de la llamada,
     <parameter>secuencia</parameter> se hace indefinida y no debe
     ser usada despu&eacute;s de una llamada a esta funci&oacute;n.
    </para>
   </refsect1>
  </refentry>

  <refentry id="streams.php-stream-flush">
   <refnamediv>
    <refname>php_stream_flush</refname>
    <refpurpose>Volcar los b&uacute;feres de secuencia a la unidad de
    almacenamiento</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis role="c">
      <type>int</type><methodname>php_stream_flush</methodname>
      <methodparam><type>php_stream *</type><parameter>secuencia</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>php_stream_flush</function> produce que cualquier dato
     retenido en los b&uacute;feres de escritura de
     la <parameter>secuencia</parameter> sean aplicados a la unidad de
     almacenamiento interna.
    </para>
    <para>
     <function>php_stream_flush</function> devuelve 0 si los
     b&uacute;feres fueron volcados, o si los &eacute;stos no
     necesitaban ser volcados, y devuelve <constant>EOF</constant>
     para indicar un error.
    </para>
   </refsect1>
  </refentry>

  <refentry id="streams.php-stream-seek">
   <refnamediv>
    <refname>php_stream_seek</refname>
    <refpurpose>Reubicar una secuencia</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis role="c">
      <type>int</type><methodname>php_stream_seek</methodname>
      <methodparam><type>php_stream *</type><parameter>secuencia</parameter></methodparam>
      <methodparam><type>off_t</type><parameter>desplazamiento</parameter></methodparam>
      <methodparam><type>int</type><parameter>a_partir_de</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>php_stream_seek</function> reubica la posici&oacute;n
     interna de <parameter>secuencia</parameter>. La nueva
     posici&oacute;n es determinada al sumar
     el <parameter>desplazamiento</parameter> a la posici&oacute;n
     indicada por <parameter>a_partir_de</parameter>. Si
     <parameter>a_partir_de</parameter> es definido
     como <constant>SEEK_SET</constant>, <constant>SEEK_CUR</constant>
     o <constant>SEEK_END</constant>, el desplazamiento es relativo al
     comienzo de la secuencia, la posici&oacute;n actual o el final de
     la secuencia, respectivamente.
    </para>
    <para>
     <function>php_stream_seek</function> devuelve 0 de tener
     &eacute;xito, y -1 si ocurri&oacute; un error.
    </para>
    <note>
     <para>
      No todas las secuencias soportan la reubicaci&oacute;n, aunque
      la API de secuencias emular&aacute; la operaci&oacute;n
      si <parameter>a_partir_de</parameter> es definido
      como <constant>SEEK_CUR</constant>
      y <parameter>desplazamiento</parameter> es un valor positivo,
      llamando <function>php_stream_read</function> para leer (y
      descartar) tantos bytes como el valor
      de <parameter>desplazamiento</parameter>.
      </para>
      <para>
       La emulaci&oacute;n es aplicada &uacute;nicamente cuando la
       implementaci&oacute;n interna de la secuencia no soporta la
       reubicaci&oacute;n. Si la secuencia es (por ejemplo) una
       secuencia basada en archivos que se encuentra envolviendo un
       pipe no-reubicable, la api de secuencias no aplicar&aacute; la
       emulaci&oacute;n ya que la secuencia basada en archivos
       implementa la operaci&oacute;n; la reubicaci&oacute;n
       fallar&aacute; y se devolver&aacute; un resultado de error a la
       funci&oacute;n que hace la llamada.
      </para>
    </note>
   </refsect1>
  </refentry>

  <refentry id="streams.php-stream-tell">
   <refnamediv>
    <refname>php_stream_tell</refname>
    <refpurpose>Determinar la posici&oacute;n de una
    secuencia</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis role="c">
      <type>off_t</type><methodname>php_stream_tell</methodname>
      <methodparam><type>php_stream *</type><parameter>secuencia</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>php_stream_tell</function> devuelve la posici&oacute;n
     interna de <parameter>secuencia</parameter>, relativa al comienzo
     de la misma. Si ocurre un error, el valor -1 es devuelto.
     </para>
   </refsect1>
  </refentry>

 <refentry id="streams.php-stream-copy-to-stream">
   <refnamediv>
    <refname>php_stream_copy_to_stream</refname>
    <refpurpose>Copiar datos de una secuencia a otra</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis role="c">
      <type>size_t</type><methodname>php_stream_copy_to_stream</methodname>
      <methodparam><type>php_stream *</type><parameter>fuente</parameter></methodparam>
      <methodparam><type>php_stream *</type><parameter>destino</parameter></methodparam>
      <methodparam><type>size_t</type><parameter>long_max</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>php_stream_copy_to_stream</function> intenta leer
     hasta <parameter>long_max</parameter> bytes de datos
     desde <parameter>fuente</parameter> y los escribe
     en <parameter>destino</parameter>, y devuelve el n&uacute;mero de
     bytes que fueron copiados satisfactoriamente.
    </para>
    <para>
     Si desea copiar todos los datos restantes de la
     secuencia <parameter>fuente</parameter>, pase la
     constante <constant>PHP_STREAM_COPY_ALL</constant> como el valor
     de <parameter>long_max</parameter>.
    </para>
    <note>
     <simpara>
      Esta funci&oacute;n intentar&aacute; copiar los datos en la
      manera m&aacute;s eficiente posible, usando archivos
      referenciados en memoria cuando sea posible.
     </simpara>
    </note>
   </refsect1>
  </refentry>

 <refentry id="streams.php-stream-copy-to-mem">
   <refnamediv>
    <refname>php_stream_copy_to_mem</refname>
    <refpurpose>Copiar datos de una secuencia en un b&uacute;fer
    reservado</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis role="c">
      <type>size_t</type><methodname>php_stream_copy_to_mem</methodname>
      <methodparam><type>php_stream *</type><parameter>fuente</parameter></methodparam>
      <methodparam><type>char **</type><parameter>buf</parameter></methodparam>
      <methodparam><type>size_t</type><parameter>long_max</parameter></methodparam>
      <methodparam><type>int</type><parameter>persistente</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>php_stream_copy_to_mem</function> reserva un
     b&uacute;fer de <parameter>long_max</parameter>+1 bytes de
     longitud usando <function>pemalloc</function>
     (pasando <parameter>persistente</parameter>). Luego
     lee <parameter>long_max</parameter> bytes
     desde <parameter>fuente</parameter> y los almacena en el
     b&uacute;fer reservado.
    </para>
    <para>
     El b&uacute;fer reservado es devuelto
     en <parameter>buf</parameter>, y el n&uacute;mero de bytes
     le&iacute;dos satisfactoriamente. Usted, el origen de la llamada,
     es responsable de liberar el b&uacute;fer, pasando &eacute;ste y
     el par&aacute;metro <parameter>persistente</parameter>
     a <function>pefree</function>.
    </para>
    <para>
     Si desea copiar todos los datos restantes de la
     secuencia <parameter>fuente</parameter>, pase la
     constante <constant>PHP_STREAM_COPY_ALL</constant> como el valor
     de <parameter>long_max</parameter>.
    </para>
    <note>
     <simpara>
      Esta funci&oacute;n intentar&aacute; copiar los datos en la
      manera m&aacute;s eficiente posible, usando archivos
      referenciados en memoria cuando sea posible.
     </simpara>
    </note>
   </refsect1>
  </refentry>

 <refentry id="streams.php-stream-make-seekable">
   <refnamediv>
    <refname>php_stream_make_seekable</refname>
    <refpurpose>Convertir una secuencia a una secuencia
    reubicable</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis role="c">
      <type>int</type><methodname>php_stream_make_seekable</methodname>
      <methodparam><type>php_stream *</type><parameter>secuencia_origen</parameter></methodparam>
      <methodparam><type>php_stream **</type><parameter>secuencia_nueva</parameter></methodparam>
      <methodparam><type>int</type><parameter>banderas</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>php_stream_make_seekable</function> chequea
     si <parameter>secuencia_origen</parameter> es reubicable. Si no
     lo es, copiar&aacute; los datos en una nueva secuencia
     temporal. Si tiene
     &eacute;xito, <parameter>secuencia_nueva</parameter> es siempre
     definida como la secuencia de uso v&aacute;lido, incluso cuando
     la secuencia original era reubicable.
    </para>
    <para>
     <parameter>banderas</parameter> le permite especificar sus
     preferencias para la secuencia reubicable que es devuelta:
     use <constant>PHP_STREAM_NO_PREFERENCE</constant> para usar la
     secuencia reubicable predeterminada (que usa un b&uacute;fer de
     memoria expansible din&aacute;micamente, pero cambia a un tipo de
     almacenamiento respaldado en un archivo temporal cuando el
     tama&ntilde;o de la secuencia se hace m&aacute;s largo), o
     use <constant>PHP_STREAM_PREFER_STDIO</constant> para indicar el
     tipo de almacenamiento "regular", respaldado en un archivo
     temporal.
    </para>
    <para>
     <table>
      <title>Valores de retorno
      de <function>php_stream_make_seekable</function></title>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>Valor</entry>
         <entry>Significado</entry>
        </row>
       </thead>
       <tbody>

        <row>
         <entry>PHP_STREAM_UNCHANGED</entry>
         <entry>La secuencia original era reubicable en cualquier
          caso. <parameter>secuencia_nueva</parameter> es definida al
          valor de <parameter>seuencia_original</parameter>.

         </entry>
        </row>

        <row>
         <entry>PHP_STREAM_RELEASED</entry>
         <entry>La secuencia original no era reubicable y ha sido
         liberada. <parameter>secuencia_nueva</parameter> es definida
         como la nueva secuencia reubicable. Usted no debe usar
         m&aacute;s valor
         de <parameter>secuencia_original</parameter>.

         </entry>
        </row>

        <row>
         <entry>PHP_STREAM_FAILED</entry>
         <entry>Un error ocurri&oacute; mientras se intentaba la
           conversi&oacute;n. <parameter>secuencia_nueva</parameter>
           se define como
           NULL; <parameter>secuencia_original</parameter> sigue
           siendo v&aacute;lida.
         </entry>
        </row>

        <row>
         <entry>PHP_STREAM_CRITICAL</entry>
         <entry>
          Un error ocurri&oacute;n durante el intento de
          conversi&oacute;n que ha dejado
          a <parameter>secuencia_original</parameter> en un estado
          indeterminado. <parameter>secuencia_nueva</parameter> se
          define como NULL y es altamente recomendable que usted
          cierre <parameter>secuencia_original</parameter>.
         </entry>
        </row>
         
       </tbody>
      </tgroup>
     </table>
    </para>
    <note>
     <simpara>
      Si necesita reubicar y escribir a la secuencia, no tiene sentido
      que use esta funci&oacute;n, ya que no se garantiza que la
      secuencia que devuelve est&eacute; asociada con el mismo recurso
      que la secuencia original.
     </simpara>
    </note>
    <note>
     <simpara>
      Si s&oacute;lo necesita hacer b&uacute;squedas de
      posici&oacute;n hacia adelante, no hay necesidad de llamar esta
      funci&oacute;n, ya que la API de secuencias emular&aacute; las
      reubicaciones hacia adelante cuando el par&aacute;metro
      a_partir_de es <constant>SEEK_CUR</constant>.
     </simpara>
    </note>
    <note>
     <simpara>
      Si <parameter>secuencia_original</parameter> es basada en red,
      esta funci&oacute;n crear&aacute; un bloqueo hasta que los
      contenidos completos hayan sido descargados.
      </simpara>
    </note>
    <note>
     <simpara>
      &iexcl;NUNCA llame esta funci&oacute;n con
      una <parameter>secuencia_original</parameter> que sea una
      referencia por un apuntador de archivo en un script PHP!
      &iexcl;Esta funci&oacute;n puede causar que la secuencia interna
      sea cerrada, cosa que causar&iacute;a un fallo en el programa
      cuando el script acceda nuevamente al apuntador de archivo!
     </simpara>
    </note>
    <note>
     <simpara>
      En muchos casos, esta funci&oacute;n s&oacute;lo puede tener
      &eacute;xito cuando <parameter>secuencia_original</parameter> es
      una secuencia abierta recientemente sin datos en b&uacute;fer en
      la capa de la secuencia. Por esa raz&oacute;n, y dado que es
      dif&iacute;cial usar correctamente esta funci&oacute;n, es
      recomendable que
      use <function>php_stream_open_wrapper</function> y pase el valor
      <constant>PHP_STREAM_MUST_SEEK</constant> en sus opciones en
      lugar de llamar esta funci&oacute;n directamente.
     </simpara>
    </note>
    </refsect1>
  </refentry>


<refentry id="streams.php-stream-cast">
   <refnamediv>
    <refname>php_stream_cast</refname>
    <refpurpose>Convertir una secuencia a otra forma, como un FILE* o
    un socket</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis role="c">
      <type>int</type><methodname>php_stream_cast</methodname>
      <methodparam><type>php_stream *</type><parameter>secuencia</parameter></methodparam>
      <methodparam><type>int</type><parameter>moldear_como</parameter></methodparam>
      <methodparam><type>void **</type><parameter>ret</parameter></methodparam>
      <methodparam><type>int</type><parameter>banderas</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>php_stream_cast</function> intenta
     convertir <parameter>secuencia</parameter> a un recurso indicado
     por <parameter>moldear_como</parameter>. Si <parameter>ret</parameter>
     es NULL, la secuencia es consultada para conocer si tal
     conversi&oacute;n es posible, sin efectuar realmente la
     conversi&oacute;n (sin embargo, alg&uacute;n estado interno de
     secuencias *puede* ser modificado en este
     caso). Si <parameter>banderas</parameter> es definido
     como <constant>REPORT_ERRORS</constant>, se mostrar&aacute; un
     mensaje de error si hay un error durante la conversi&oacute;n.
    </para>
    <note>
     <para>
      Esta funci&oacute;n devuelve <constant>SUCCESS</constant> en
      caso de tener &eacute;xito, o <constant>FAILURE</constant> si
      falla. Advierta que usted debe comparar expl&iacute;citamente el
      valor de retorno con <constant>SUCCESS</constant>
      o <constant>FAILURE</constant> debido a los valores internos de
      &eacute;stas constantes. Una simple expresi&oacute;n booleana no
      ser&aacute; interpretada como usted puede esperar.
     </para>
    </note>
    <para>
     <table>
      <title>Tipos de recurso
      para <parameter>moldear_como</parameter></title>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>Valor</entry>
         <entry>Significado</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>PHP_STREAM_AS_STDIO</entry>
         <entry>Solicita un FILE* ANSI que represente la
         secuencia</entry>
        </row>
        <row>
         <entry>PHP_STREAM_AS_FD</entry>
         <entry>Solicita un descriptor de archivo POSIX que represente
         la secuencia</entry>
        </row>
        <row>
         <entry>PHP_STREAM_AS_SOCKETD</entry>
         <entry>Solicita un descriptor de socket de red que represente
         la secuencia</entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
    <para>
     Adicionalmente a los tipos de recurso b&aacute;sicos mencionados
     anteriormente, el proceso de conversi&oacute;n puede ser alterado
     mediante el uso de las siguientes banderas, al usar el operador
     OR para combinar el tipo de recurso con uno o m&aacute;s de los
     siguientes valores:
     <table>
      <title>Tipos de recurso
      para <parameter>moldear_como</parameter></title>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>Valor</entry>
         <entry>Significado</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>PHP_STREAM_CAST_TRY_HARD</entry>
         <entry>Intenta lo mejor posible, al precio de recursos
         adicionales, para asegurarse de que la conversi&oacute;n
         tenga &eacute;xito</entry>
        </row>
        <row>
         <entry>PHP_STREAM_CAST_RELEASE</entry> <entry>Le informa a la
         API de secuencias que otra fuente de c&oacute;digo
         (posiblemente una biblioteca de alg&uacute;n tercero)
         ser&aacute; responsable de cerrar el recurso/gestor
         interno. Esto causa que la <parameter>secuencia</parameter>
         sea cerrada de forma tal que el gestor interno es conservado
         y devuelto en <parameter>ret</parameter>. Si esta
         funci&oacute;n tiene &eacute;xito, la
         <parameter>secuencia</parameter> debe ser considerada cerrada
         y no debe ser usada m&aacute;s.
         </entry>
        </row>
       </tbody>
      </tgroup>
     </table>
    </para>
    <note>
     <simpara>
      Si su sistema soporta el uso de <function>fopencookie</function>
      (sistemas con glibc 2 o versiones posteriores), la API de
      secuencias ser&aacute; capaz siempre de sintetizar un apuntador
      FILE* ANSI sobre cualquier secuencia. Aunque esto es
      tremendamente &uacute;til para pasar cualquier secuencia PHP a
      cualquier biblioteca de terceros, tal comportamiento no es
      portable. Es necesario que considere las implicaciones de
      portabilidad antes de distribuir su extensi&oacute;n. Si la
      s&iacute;ntesis fopencookie no es deseable, debe consultar a la
      secuencia para ver si &eacute;sta soporta FILE* de forma natural
      mediante el uso de <function>php_stream_is</function>
     </simpara>
    </note>
    <note>
     <simpara>
      Si solicita una secuencia basada en sockets para un FILE*, la
      API de secuencias usar&aacute; <function>fdopen</function> para
      crearlo por usted. Advierta que hacer esto puede causar la
      p&eacute;rdida de datos que fueran puestos en b&uacute;fer en la
      capa de secuencias si usted entremezcla las llamadas de la API
      de secuencias con llamadas stdio ANSI.
     </simpara>
    </note>
    <para>
     Vea tambi&eacute;n <function>php_stream_is</function>
     y <function>php_stream_can_cast</function>.
    </para>
   </refsect1>
  </refentry>
 
<refentry id="streams.php-stream-can-cast">
   <refnamediv>
    <refname>php_stream_can_cast</refname>
    <refpurpose>Determina si una secuencia puede ser convertida en
    otra forma, como un FILE* o un socket</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis role="c">
      <type>int</type><methodname>php_stream_can_cast</methodname>
      <methodparam><type>php_stream *</type><parameter>secuencia</parameter></methodparam>
      <methodparam><type>int</type><parameter>moldear_como</parameter></methodparam>
     </methodsynopsis>
    <para>
     Esta funci&oacute;n es equivalente a
     llamar <function>php_stream_cast</function>
     con <parameter>ret</parameter> definido como NULL
     y <parameter>banderas</parameter> definido como
     0. Devuelve <constant>SUCCESS</constant> si la secuencia puede
     ser convertida a la forma solicitada,
     o <constant>FAILURE</constant> si la conversi&oacute;n no puede
     ser efectuada.
    </para>
    <note>
     <simpara>
      Aunque esta funci&oacute;n no realizar&aacute; la
      conversi&oacute;n, alg&uacute;n estado interno de secuencias
      *puede* ser modificado por esta llamada.
     </simpara>
    </note>
    <note>
     <simpara>
      Usted debe comparar expl&iacute;citamente el valor de retorno de
      &eacute;sta funci&oacute;n con una de las constantes, tal y como
      se describe en <function>php_stream_cast</function>.
      </simpara>
    </note>
    <para>
     Vea tambi&eacute;n <function>php_stream_cast</function>
     y <function>php_stream_is</function>.
    </para>
   </refsect1>
  </refentry>

<refentry id="streams.php-stream-is-persistent">
   <refnamediv>
    <refname>php_stream_is_persistent</refname>
    <refpurpose>Determina si una secuencia es persistente</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis role="c">
      <type>int</type><methodname>php_stream_is_persistent</methodname>
      <methodparam><type>php_stream *</type><parameter>secuencia</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>php_stream_is_persistent</function> devuelve 1 si la
     secuencia es persistente, o 0 de lo contrario.
    </para>
 </refsect1>
</refentry>

<refentry id="streams.php-stream-is">
   <refnamediv>
    <refname>php_stream_is</refname>
    <refpurpose>Determina si una secuencia es de un tipo
    particular</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis role="c">
      <type>int</type><methodname>php_stream_is</methodname>
      <methodparam><type>php_stream *</type><parameter>secuencia</parameter></methodparam>
      <methodparam><type>int</type><parameter>es_del_tipo</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>php_stream_is</function> devuelve 1
     si <parameter>secuencia</parameter> es del tipo especificado
     por <parameter>es_del_tipo</parameter>, o 0 de lo contrario.
    <table>
      <title>Valores para <parameter>es_del_tipo</parameter></title>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>Valor</entry>
         <entry>Significado</entry>
        </row>
       </thead>
       <tbody>
        <row>
         <entry>PHP_STREAM_IS_STDIO</entry>
         <entry>La secuencia es implementada usando stdio</entry>
        </row>
        <row>
         <entry>PHP_STREAM_IS_SOCKET</entry>
         <entry>La secuencia es implementada usando un socket de
         red</entry>
        </row>
        <row>
         <entry>PHP_STREAM_IS_USERSPACE</entry>
         <entry>La secuencia es implementada usando un objeto de
         espacio de usuario</entry>
        </row>
        <row>
         <entry>PHP_STREAM_IS_MEMORY</entry>
         <entry>La secuencia es implementada usando una secuencia con
         memoria que crece a medida que es solicitada</entry>
        </row>
       </tbody>
      </tgroup>
     </table>

    </para>
    <note>
     <simpara>
      Las "constantes" PHP_STREAM_IS_XXX son definidas en realidad
      como apuntadores a la estructura interna de operaciones de
      secuencia. Si su extensi&oacute;n (o alguna otra
      extensi&oacute;n) define secuencias adicionales, la
      extensi&oacute;n debe declarar tambi&eacute;n una constante
      PHP_STREAM_IS_XXX en su archivo de cabecera, que usted pueda
      usar como base para esta comparaci&oacute;n.
     </simpara>
    </note>
    <note>
     <simpara>
      Esta funci&oacute;n es implementada como una sencilla (y
      r&aacute;pida) comparaci&oacute;n de apuntadores, y no modifica
      el estado de la secuencia en forma alguna.
     </simpara>
    </note>
    <para>
     Vea tambi&eacute;n <function>php_stream_cast</function>
     y <function>php_stream_can_cast</function>.
    </para>
   </refsect1>
  </refentry>
  
  <refentry id="streams.php-stream-passthru">
   <refnamediv>
    <refname>php_stream_passthru</refname>
    <refpurpose>Imprime todos los datos restantes de una
    secuencia</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis role="c">
      <type>size_t</type><methodname>php_stream_passthru</methodname>
      <methodparam><type>php_stream *</type><parameter>secuencia</parameter></methodparam>
     </methodsynopsis>
     <para>
      <function>php_stream_passthru</function> imprime todos los datos
      restantes de <parameter>secuencia</parameter> en el b&uacute;fer
      de salida activo y devuelve el n&uacute;mero de bytes
      escritos. Si el uso de b&uacute;feres est&aacute; deshabilitado,
      los datos son escritos directamente a la salida, la cual se
      refiere al navegador que hace la petici&oacute;n en el caso de
      PHP sobre un servidor web, o stdout para c&oacute;digo PHP
      basado en CLI. Esta funci&oacute;n usar&aacute; archivos
      referenciados en memoria si es posible para mejorar el
      rendimiento.
     </para>
    </refsect1>
  </refentry>

  <refentry id="streams.php-register-url-stream-wrapper">
   <refnamediv>
    <refname>php_register_url_stream_wrapper</refname>
    <refpurpose>Registra una envoltura con la API de
    Secuencias</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis role="c">
      <type>int</type><methodname>php_register_url_stream_wrapper</methodname>
      <methodparam><type>char *</type><parameter>protocolo</parameter></methodparam>
      <methodparam><type>php_stream_wrapper *</type><parameter>envoltura</parameter></methodparam>
      <methodparam><type>TSRMLS_DC</type><parameter></parameter></methodparam>
     </methodsynopsis>
     <para>
      <function>php_register_url_stream_wrapper</function>
      registra <parameter>envoltura</parameter> como el gestor para el
      protocolo especificado por <parameter>protocolo</parameter>.
     </para>
     <note>
      <simpara>
       Si llama esta funci&oacute;n desde un m&oacute;dulo cargable,
       usted *DEBE*
       llamar <function>php_unregister_url_stream_wrapper</function>
       en su funci&oacute;n de cierre del m&oacute;dulo, o de otro
       modo PHP producir&aacute; un fallo.
      </simpara>
     </note>
    </refsect1>
  </refentry>

  <refentry id="streams.php-unregister-url-stream-wrapper">
   <refnamediv>
    <refname>php_unregister_url_stream_wrapper</refname>
    <refpurpose>Retira el registro de una envoltura de la API de
    Secuencias</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis role="c">
      <type>int</type><methodname>php_unregister_url_stream_wrapper</methodname>
      <methodparam><type>char *</type><parameter>protocolo</parameter></methodparam>
      <methodparam><type>TSRMLS_DC</type><parameter></parameter></methodparam>
     </methodsynopsis>
     <para>
      <function>php_unregister_url_stream_wrapper</function> retira el
      registro de la envoltura asociada
      con <parameter>protocolo</parameter>.
     </para>
    </refsect1>
  </refentry>

  <refentry id="streams.php-stream-open-wrapper-ex">
   <refnamediv>
    <refname>php_stream_open_wrapper_ex</refname>
    <refpurpose>Abre una secuencia sobre un archivo o URL,
    especificando el contexto</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis role="c">
      <type>php_stream *</type><methodname>php_stream_open_wrapper_ex</methodname>
      <methodparam><type>char *</type><parameter>ruta</parameter></methodparam>
      <methodparam><type>char *</type><parameter>modo</parameter></methodparam>
      <methodparam><type>int</type><parameter>opciones</parameter></methodparam>
      <methodparam><type>char **</type><parameter>abierto</parameter></methodparam>
      <methodparam><type>php_stream_context *</type><parameter>contexto</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>php_stream_open_wrapper_ex</function> es exactamente
     como <function>php_stream_open_wrapper</function>, pero le
     permite especificar un objeto php_stream_context
     usando <parameter>contexto</parameter>. Para conocer m&aacute;s
     sobre los contextos de secuencia, vea XXX
    </para>
    </refsect1>
    </refentry>

  <refentry id="streams.php-stream-open-wrapper-as-file">
   <refnamediv>
    <refname>php_stream_open_wrapper_as_file</refname>
    <refpurpose>Abre una secuencia sobre un archivo o URL, y lo
    convierte a FILE*</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis role="c">
      <type>FILE *</type><methodname>php_stream_open_wrapper_as_file</methodname>
      <methodparam><type>char *</type><parameter>ruta</parameter></methodparam>
      <methodparam><type>char *</type><parameter>modo</parameter></methodparam>
      <methodparam><type>int</type><parameter>opciones</parameter></methodparam>
      <methodparam><type>char **</type><parameter>abierto</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>php_stream_open_wrapper_as_file</function> es
     exactamente como <function>php_stream_open_wrapper</function>,
     pero convierte la secuencia a un FILE* ANSI de stdio y devuelve
     &eacute;ste apuntador en lugar de la secuencia. Este es un atajo
     conveniente para extensiones que pasan un valor FILE* a las
     bibliotecas de terceros.
    </para>
   </refsect1>
  </refentry>
  <refentry id="streams.php-stream-filter-register-factory">
   <refnamediv>
    <refname>php_stream_filter_register_factory</refname>
    <refpurpose>Registra una f&aacute;brica de filtros con la API de
    Secuencias</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <methodsynopsis role="c">
     <type>int</type><methodname>php_stream_filter_register_factory</methodname>
     <methodparam><type>const char *</type><parameter>patron_filtros</parameter></methodparam>
     <methodparam><type>php_stream_filter_factory *</type><parameter>fabrica</parameter></methodparam>
    </methodsynopsis>
    <para>
     Use esta funci&oacute;n para registrar una f&aacute;brica de
     filtros con el nombre dado
     por <parameter>patron_filtros</parameter>.
     <parameter>patron_filtros</parameter> puede ser un nombre de
     cadena normal (como <literal>mi_filtro</literal>) o un
     patr&oacute;n global (es
     decir, <literal>mi_clase_de_filtro.*</literal>) para permitir que
     un filtro &uacute;nico realice diferentes operaciones dependiendo
     del nombre exacto del filtro invocado
     (p.ej. <literal>mi_clase_de_filtro.foo</literal>,
     <literal>mi_clase_de_filtro.bar</literal>, etc...)
    </para>
    <note>
     <simpara>
      Los filtros registrados por una extensi&oacute;n cargable deben
      asegurarse de llamar php_stream_filter_unregister_factory()
      durante MSHUTDOWN.
     </simpara>
    </note>
   </refsect1>
  </refentry>
  <refentry id="streams.php-stream-filter-unregister-factory">
   <refnamediv>
    <refname>php_stream_filter_unregister_factory</refname>
    <refpurpose>Retira el registro de una f&aacute;brica de filtros
    con la API de secuencias</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <methodsynopsis role="c">
     <type>int</type><methodname>php_stream_filter_unregister_factory</methodname>
     <methodparam><type>const char *</type><parameter>patron_filtros</parameter></methodparam>
    </methodsynopsis>
    <para>
     Retira el registro de
     la <parameter>fabrica_de_filtros</parameter> especificada por el
     <parameter>patron_filtros</parameter>, de modo que no sigue
     estando disponible para su uso.
    </para>
    <note>
     <simpara>
      Los filtros registrados por una extensi&oacute;n cargable deben
      asegurarse de llamar php_stream_filter_unregister_factory()
      durante MSHUTDOWN.
     </simpara>
    </note>
   </refsect1>
  </refentry>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
