<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.8 Maintainer: lboshell Status: ready -->
<refentry id='function.domnode-remove-child'>
 <refnamediv>
  <refname>DomNode->remove_child</refname>
  <refpurpose>
   Elimina un hijo de una lista de hijos
  </refpurpose>
 </refnamediv>
 <refsect1>
  &reftitle.description;
  <methodsynopsis>
   <type>domtext</type><methodname>DomNode->remove_child</methodname>
   <methodparam><type>domtext</type><parameter>hijo_antiguo</parameter></methodparam>
  </methodsynopsis>
  <para>
   Esta funci&oacute;n elimina un hijo de una lista de hijos. Si el
   hijo no puede ser eliminado, o no es un hijo, la funci&oacute;n
   devuelve &false;. Si el hijo puede ser eliminado, la funci&oacute;n
   devuelve el hijo antiguo.
  </para>
  <para>
   <example>
    <title>Eliminar un hijo</title>
    <programlisting role="php">
<![CDATA[
<?php
include("ejemplo.inc");

if (!$dom = domxml_open_mem($cadena_xml)) {
  echo "Ocurri&oacute; un error al analizar el documento\n";
  exit;
}

$elementos = $dom->get_elements_by_tagname("tbody");
$elemento = $elementos[0];
$hijos = $elemento->child_nodes();
$hijo = $elemento->remove_child($hijos[0]);

echo "<PRE>";
$archivo_xml = $dom->dump_mem(true);
echo htmlentities($archivo_xml);
echo "</PRE>";
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Vea tambi&eacute;n <function>domnode_append_child</function>.
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
