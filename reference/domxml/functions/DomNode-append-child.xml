<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.10 Maintainer: lboshell Status: ready -->
<!-- splitted from ./en/functions/domxml.xml, last change in rev 1.40 -->
  <refentry id='function.domnode-append-child'>
   <refnamediv>
    <refname>DomNode->append_child</refname>
    <refpurpose>
     Agrega un nuevo hijo al final del grupo de hijos
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <methodsynopsis>
     <type>object</type><methodname>DomNode->append_child</methodname>
     <methodparam><type>object</type><parameter>nodo_nuevo</parameter></methodparam>
    </methodsynopsis>
    <para>
     Esta funci&oacute;n agrega un hijo a una lista existente de hijos
     o crea una nueva lista de hijos. El hijo puede ser creado, por
     ejemplo, con <function>domdocument_create_element</function>,
     <function>domdocument_create_text</function> etc. o simplemente
     mediante el uso de otro nodo.
    </para>
    <para>
     (PHP &lt; 4.3) Antes de que un nuevo hijo sea agregado,
     &eacute;ste es duplicado. Por lo tanto el nuevo hijo es una nueva
     copia que puede ser modificada sin cambiar el nodo que fue pasado
     a esta funci&oacute;n. Si el nodo pasado tiene hijos, ellos
     ser&aacute;n duplicados tambi&eacute;n, lo que facilita la
     duplicaci&oacute;n de grandes segmentos de un documento XML. El
     valor de retorno es el hijo agregado. Si planea realizar
     modificaciones posteriores sobre el hijo agregado, debe usar el
     nodo devuelto.
    </para>
    <para>
     (PHP 4.3.0/4.3.1) El nuevo hijo <parameter>nodo_nuevo</parameter>
     es enlazado primero desde su contexto actual, si ya se trata de
     un hijo de DomNode. Por lo tanto el nodo es movido y no
     una copia del nodo.
    </para>
    <para>    
     (PHP &gt;= 4.3.2) El nuevo hijo <parameter>nodo_nuevo</parameter>
     es primera separado de su contexto actual, si &eacute;ste ya
     existe en el &aacute;rbol. Por lo tanto el nodo es movido y no
     copiado. Este debe ser su comportamiento de acuerdo a las
     especificaciones del W3C. Si desea duplicar segmentos grandes de
     un documento XML, use DomNode->clone_node() antes de agregar.
    </para>
    <para>
     El siguiente ejemplo agrega un nuevo nodo tipo elemento a un
     documento nuevo y define el atributo "align" como "left".
     <example>
      <title>Agregar un hijo</title>
      <programlisting role="php">
<![CDATA[
<?php
$doc = domxml_new_doc("1.0");
$nodo = $doc->create_element("para");
$nodo_nuevo = $doc->append_child($nodo);
$nodo_nuevo->set_attribute("align", "left");
?>
]]>
      </programlisting>
     </example>
     El anterior ejemplo pudo ser escrito tambi&eacute;n como:
     <example>
      <title>Agregar un hijo</title>
      <programlisting role="php">
<![CDATA[
<?php
$doc = domxml_new_doc("1.0");
$nodo = $doc->create_element("para");
$nodo->set_attribute("align", "left");
$nodo_nuevo = $doc->append_child($nodo);
?>
]]>
      </programlisting>
     </example>
     Un ejemplo m&aacute;s complejo se presenta a
     continuaci&oacute;n. Primero busca cierto elemento, lo duplica
     incluyendo sus hijos y lo agrega como un hermano. Finalmente un
     nuevo atributo es agregado a uno de los hijos del nuevo hermano y
     el documento completo es volcado.
     <example>
      <title>Agregar un hijo</title>
      <programlisting role="php">
<![CDATA[
<?php
include("ejemplo.inc");

if (!$dom = domxml_open_mem($cadena_xml)) {
  echo "Ocurri&oacute; un error al analizar el documento\n";
  exit;
}

$elementos = $dom->get_elements_by_tagname("informaltable");
print_r($elementos);
$elemento = $elementos[0];

$padre = $elemento->parent_node();
$nodo_nuevo = $padre->append_child($elemento);
$hijos = $nodo_nuevo->children();
$atr = $hijos[1]->set_attribute("align", "left");

echo "<pre>";
$archivo_xml = $dom->dump_mem();
echo htmlentities($archivo_xml);
echo "</pre>";
?>
]]>
      </programlisting>
     </example>
     El ejemplo anterior pudo crearse tambi&eacute;n con
     <function>domnode_insert_before</function> en lugar de
     <function>domnode_append_child</function>.
    </para>
    <para>
     Vea tambi&eacute;n <function>domnode_insert_before</function>, y
     <function>domnode_clone_node</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
