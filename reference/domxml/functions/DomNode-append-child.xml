<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.5 $ -->
<!-- EN-Revision: 1.15 Maintainer: lboshell Status: ready -->
<refentry xml:id='function.domnode-append-child' xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>DomNode->append_child</refname>
  <refpurpose>
   Agrega un nuevo hijo al final del grupo de hijos
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <classsynopsis>
   <ooclass><classname>DOMNode</classname></ooclass>
   <methodsynopsis>
    <type>DOMNode</type><methodname>append_child</methodname>
    <methodparam><type>DOMNode</type><parameter>nodo_nuevo</parameter></methodparam>
   </methodsynopsis>
  </classsynopsis>
  <para>
   Esta funci&oacute;n agrega un hijo a una lista existente de hijos o
   crea una nueva lista de hijos.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>nodo_nuevo</parameter></term>
     <listitem>
      <para>
       El nodo que est&aacute; siendo agregado. Puede ser creado
       p.ej. con <xref linkend="function.domdocument-create-element"
       />, <xref linkend="function.domdocument-create-text-node" />
       etc. o simplemente usando cualquier otro nodo.
      </para>
      <note>
       <para>
        No es posible agregar un <classname>DOMAttribute</classname>
        usando este m&eacute;todo. Use <xref
        linkend="function.domelement-set-attribute" /> en su lugar.
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve el nodo agregado en caso de &eacute;xito, o &false; si
   ocurre un error.
  </para>
 </refsect1>
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.3.0</entry>
       <entry>
        Ya no es posible insertar un nodo desde otro documento.
       </entry>
      </row>
      <row>
       <entry>4.3.0</entry>
       <entry>
        Antes de PHP 4.3.0, el nuevo hijo es duplicado antes de
        agregarse. Por lo tanto el nuevo hijo es una nueva copia que
        puede ser modificada sin cambiar el nodo que fue pasado a esta
        funci&oacute;n. Si el nodo pasado tiene hijos, ellos
        ser&aacute;n duplicados tambi&eacute;n, lo que facilita la
        duplicaci&oacute;n de grandes segmentos de un documento
        XML. El valor de retorno es el hijo agregado. Si planea
        realizar modificaciones posteriores sobre el hijo agregado,
        debe usar el nodo devuelto.
       </entry>
      </row>
      <row>
       <entry>4.3.0 y 4.3.1</entry>
       <entry>
        El nuevo hijo <parameter>nodo_nuevo</parameter> es separado
        primero de su contexto actual, si ya se trata de un hijo de
        DomNode. Por lo tanto el <parameter>nodo_nuevo</parameter> es
        movido y no copiado. Este es el comportamiento de acuerdo a
        las especificaciones del W3C. Si necesita el comportamiento
        antiguo, use <xref linkend="function.domnode-clone-node" />
        antes de agregar.
       </entry>
      </row>
      <row>
       <entry>4.3.2</entry>
       <entry>
        El nuevo hijo <parameter>nodo_nuevo</parameter> es primero
        separado de su contexto actual, si &eacute;ste ya existe en el
        &aacute;rbol. Se aplican las mismas reglas.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   El siguiente ejemplo agrega un nuevo nodo tipo elemento a un
   documento nuevo y define el atributo <literal>align</literal> como
   <literal>left</literal>.
  </para>
  <para>
   <example>
    <title>Agregar un hijo</title>
    <programlisting role="php">
<![CDATA[
<?php
$doc = domxml_new_doc("1.0");
$nodo = $doc->create_element("para");
$nodo_nuevo = $doc->append_child($nodo);
$nodo_nuevo->set_attribute("align", "left");
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   El anterior ejemplo pudo ser escrito tambi&eacute;n como:
  </para>
  <para>
   <example>
    <title>Agregar un hijo</title>
    <programlisting role="php">
<![CDATA[
<?php
$doc = domxml_new_doc("1.0");
$nodo = $doc->create_element("para");
$nodo->set_attribute("align", "left");
$nodo_nuevo = $doc->append_child($nodo);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Un ejemplo m&aacute;s complejo se presenta a
   continuaci&oacute;n. Primero busca cierto elemento, lo duplica
   incluyendo sus hijos y lo agrega como un hermano. Finalmente un
   nuevo atributo es agregado a uno de los hijos del nuevo hermano y
   el documento completo es volcado.
  </para>
  <para>
   <example>
    <title>Agregar un hijo</title>
    <programlisting role="php">
<![CDATA[
<?php
include("ejemplo.inc");

if (!$dom = domxml_open_mem($cadena_xml)) {
  echo "Ocurri&oacute; un error al analizar el documento\n";
  exit;
}

$elementos = $dom->get_elements_by_tagname("informaltable");
print_r($elementos);
$elemento = $elementos[0];

$padre = $elemento->parent_node();
$nodo_nuevo = $padre->append_child($elemento);
$hijos = $nodo_nuevo->children();
$atr = $hijos[1]->set_attribute("align", "left");

$archivo_xml = $dom->dump_mem();
echo htmlentities($archivo_xml);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   El ejemplo anterior pudo escribirse tambi&eacute;n con <xref
   linkend="function.domnode-insert-before" /> en lugar de <xref
   linkend="function.domnode-append-child" />.
  </para>
 </refsect1>
 <refsect1 role="migration">
  <title>Migraci&oacute;n a PHP 5</title>
  <para>
   Debe usar <methodname>domnode.appendchild</methodname>.
  </para>
 </refsect1>
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><xref linkend="function.domnode-insert-before" /></member>
    <member><xref linkend="function.domnode-clone-node" /></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
