<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.12 $ -->
<!-- EN-Revision: 1.27 Maintainer: lboshell Status: ready -->
<refentry xml:id="function.mysql-real-escape-string" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>mysql_real_escape_string</refname>
  <refpurpose>Escapa caracteres especiales de una cadena para su uso en una
  sentencia SQL</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>mysql_real_escape_string</methodname>
   <methodparam><type>string</type><parameter>cadena_no_escapada</parameter></methodparam>
   <methodparam choice="opt"><type>resource</type><parameter>id_enlace</parameter></methodparam>
  </methodsynopsis>
  <para>
   Escapa todos los caracteres especiales en la
   <parameter>cadena_no_escapada</parameter>, tomando en cuenta el juego de
   caracteres actual de la conexión, de tal modo que sea seguro usarla con
   <function>mysql_query</function>. Si se van a insertar datos binarios,
   debe usarse esta función.
  </para>
  <para>
   <function>mysql_real_escape_string</function> llama a la función de la
   biblioteca MySQL mysql_real_escape_string, la cual coloca barras
   invertidas antes de los siguientes caracteres: <literal>\x00</literal>,
   <literal>\n</literal>, <literal>\r</literal>, <literal>\</literal>,
   <literal>'</literal>, <literal>"</literal> y <literal>\x1a</literal>.
  </para>
  <para>
   Esta función debe usarse siempre (con algunas excepciones) para
   garantizar que los datos sean seguros antes de enviar una consulta a
   MySQL
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>cadena_no_escapada</parameter></term>
     <listitem>
      <para>
       La cadena a ser escapada.
      </para>
     </listitem>
    </varlistentry>
    &mysql.linkid.description;
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve la cadena escapada, o &false; en caso de que ocurra un error.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo sencillo de
    <function>mysql_real_escape_string</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Conectarse
$enlace = mysql_connect('mysql_host', 'mysql_usuario', 'mysql_contrasenya')
    OR die(mysql_error());

// Consulta
$query = sprintf("SELECT * FROM usuarios WHERE usuario='%s' AND
     password='%s'",
            mysql_real_escape_string($usuario),
            mysql_real_escape_string($password));
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Un ejemplo de un ataque de inyección SQL</title>
    <programlisting role="php">
<![CDATA[
<?php
// Consultar la base de datos para verificar si hay una coincidencia de usuario
$consulta = "SELECT * FROM usuarios WHERE usuario='{$_POST['username']}' AND password='{$_POST['password']}'";
mysql_query($consulta);

// No revisamos $_POST['password'], ¡podría ser cualquier cosa que el usuario
// quiera! Por ejemplo:
$_POST['username'] = 'aidan';
$_POST['password'] = "' OR ''='";

// Esto quiere decir que la consulta enviada a MySQL sería:
echo $consulta;
?>
]]>
    </programlisting>
    <para>
     La consulta enviada a MySQL:
    </para>
    <screen>
<![CDATA[
SELECT * FROM usuarios WHERE usuario='aidan' AND password='' OR ''=''
]]>
    </screen>
    <para>
     Esto permitiría que cualquiera iniciara una sesión sin una
     contraseña válida.
    </para>
   </example>
  </para>
  <para>
   <example>
    <title>Una consulta "Recomendable"</title>
    <para>
     Mediante el uso de <function>mysql_real_escape_string</function> sobre
     cada variable se previene la inyección de SQL. Este ejemplo demuestra
     el método "recomendable" para ejecutar una consulta en la base de
     datos, independientemente del valor de las <link
     linkend="security.magicquotes">Comillas Mágicas</link>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

if (isset($_POST['nombre_producto']) && isset($_POST['descripcion_producto']) && isset($_POST['id_usuario'])) {
    // Conectarse

    $enlace = mysql_connect('host_mysql', 'usuario_mysql', 'contrasenya_mysql');

    if(!is_resource($enlace)) {

        echo "Falló la conexión con el servidor\n";
        // ... registrar el error apropiadamente

    } else {
        
        // Revertir los efectos de magic_quotes_gpc sobre las variables si es necesario.

        if(get_magic_quotes_gpc()) {
            $nombre_producto      = stripslashes($_POST['nombre_producto']);
            $descripcion_producto = stripslashes($_POST['descripcion_producto']);
        } else {
            $nombre_producto      = $_POST['nombre_producto'];
            $descripcion_producto = $_POST['descripcion_producto'];
        }

        // Hacer una consulta segura
        $consulta = sprintf("INSERT INTO productos (`nombre`, `descripcion`, `id_usuario`) VALUES ('%s', '%s', '%d')",
                    mysql_real_escape_string($nombre_producto, $enlace),
                    mysql_real_escape_string($descripcion_producto, $enlace),
                    $_POST['id_usuario']);

        mysql_query($consulta, $enlace);

        if (mysql_affected_rows($enlace) > 0) {
            echo "Producto insertado\n";
        }
    }
} else {
    echo "Llene los campos del formulario correctamente\n";
}
?>
]]>
    </programlisting>
    <para>
     La consulta no se ejecutará correctamente ahora, y los ataques de
     inyección de SQL no funcionarán.
    </para>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Es necesaria una conexión MySQL antes de usar
    <function>mysql_real_escape_string</function> o de lo contrario un error
    de nivel <literal>E_WARNING</literal> es generado, y &false; es
    devuelto. Si <parameter>id_enlace</parameter> no está definido, se usará
    la última conexión con MySQL.
   </para>
  </note>
  <note>
   <para>
    Si se habilita <link
    linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link>, aplique
    <function>stripslashes</function> sobre los datos primero. Usar esta
    función sobre datos que ya han sido escapados los escapará dos veces.
   </para>
  </note>
  <note>
   <para>
    Si esta función no es usada para escapar datos, la consulta es
    vulnerable a <link linkend="security.database.sql-injection">Ataques de
    Inyección de SQL</link>.
   </para>
  </note>
  <note>
   <simpara>
    <function>mysql_real_escape_string</function> no escapa
    <literal>%</literal> ni <literal>_</literal>. Éstos son comodines en
    MySQL si se combinan con <literal>LIKE</literal>,
    <literal>GRANT</literal>, o <literal>REVOKE</literal>.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mysql_client_encoding</function></member>
    <member><function>addslashes</function></member>
    <member><function>stripslashes</function></member>
    <member>La directiva <link
    linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link></member>
    <member>La directiva <link
    linkend="ini.magic-quotes-runtime">magic_quotes_runtime</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
