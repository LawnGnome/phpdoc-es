<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.9 $ -->
<!-- EN-Revision: 1.25 Maintainer: lboshell Status: ready -->
<refentry id="function.mysql-real-escape-string">
 <refnamediv>
  <refname>mysql_real_escape_string</refname>
  <refpurpose>Escapa caracteres especiales de una cadena para su uso
  en una sentencia SQL</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>mysql_real_escape_string</methodname>
   <methodparam><type>string</type><parameter>cadena_no_escapada</parameter></methodparam>
   <methodparam choice="opt"><type>resource</type><parameter>id_enlace</parameter></methodparam>
  </methodsynopsis>
  <para>
   Escapa todos los caracteres especiales en la
   <parameter>cadena_no_escapada</parameter>, tomando en cuenta el
   juego de caracteres actual de la conexi&oacute;n, de tal modo que
   sea seguro usarla con <function>mysql_query</function>. Si se van a
   insertar datos binarios, debe usarse esta funci&oacute;n.
  </para>
  <para>
   <function>mysql_real_escape_string</function> llama a la
   funci&oacute;n de la biblioteca MySQL mysql_real_escape_string, la
   cual coloca barras invertidas antes de los siguientes caracteres:
   <literal>\x00</literal>, <literal>\n</literal>,
   <literal>\r</literal>, <literal>\</literal>, <literal>'</literal>,
   <literal>"</literal> y <literal>\x1a</literal>.
  </para>
  <para>
   Esta funci&oacute;n debe usarse siempre (con algunas excepciones)
   para garantizar que los datos sean seguros antes de enviar una
   consulta a MySQL
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>cadena_no_escapada</parameter></term>
     <listitem>
      <para>
       La cadena a ser escapada.
      </para>
     </listitem>
    </varlistentry>
    &mysql.linkid.description;
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve la cadena escapada, o &false; en caso de que ocurra un
   error.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo sencillo de
    <function>mysql_real_escape_string</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Conectarse
$enlace = mysql_connect('mysql_host', 'mysql_usuario', 'mysql_contrasenya')
    OR die(mysql_error());

// Consulta
$query = sprintf("SELECT * FROM usuarios WHERE usuario='%s' AND
     password='%s'",
            mysql_real_escape_string($usuario),
            mysql_real_escape_string($password));
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Un ejemplo de un ataque de inyecci&oacute;n SQL</title>
    <programlisting role="php">
<![CDATA[
<?php
// Consultar la base de datos para verificar si hay una coincidencia de usuario
$consulta = "SELECT * FROM usuarios WHERE usuario='{$_POST['username']}' AND password='{$_POST['password']}'";
mysql_query($consulta);

// No revisamos $_POST['password'], podria ser cualquier cosa que el usuario
// quiera! Por ejemplo:
$_POST['username'] = 'aidan';
$_POST['password'] = "' OR ''='";

// Esto quiere decir que la consulta enviada a MySQL seria:
echo $consulta;
?>
]]>
    </programlisting>
    <para>
     La consulta enviada a MySQL:
    </para>
    <screen>
<![CDATA[
SELECT * FROM usuarios WHERE usuario='aidan' AND password='' OR ''=''
]]>
    </screen>
    <para>
     Esto permitir&iacute;a que cualquiera iniciara una sesi&oacute;n
     sin una contrase&ntilde;a v&aacute;lida.
    </para>
   </example>
  </para>
  <para>
   <example>
    <title>Una consulta "Recomendable"</title>
    <para>
     Mediante el uso de <function>mysql_real_escape_string</function>
     sobre cada variable se previene la inyecci&oacute;n de SQL. Este
     ejemplo demuestra el m&eacute;todo "recomendable" para ejecutar
     una consulta en la base de datos, independientemente del valor de
     las <link linkend="security.magicquotes">Comillas
     M&aacute;gicas</link>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// Aplicar comillas sobre la variable para hacerla segura
function comillas_inteligentes($valor)
{
    // Retirar las barras
    if (get_magic_quotes_gpc()) {
        $valor = stripslashes($valor);
    }

    // Colocar comillas si no es entero
    if (!is_numeric($valor)) {
        $valor = "'" . mysql_real_escape_string($valor) . "'";
    }
    return $valor;
}

// Conexion
$enlace = mysql_connect('mysql_host', 'mysql_usuario', 'mysql_contrasenya')
    OR die(mysql_error());

// Realizar una consulta segura
$consulta = sprintf("SELECT * FROM usuarios WHERE usuario=%s AND password=%s",
            comillas_inteligentes($_POST['username']),
            comillas_inteligentes($_POST['password']));

mysql_query($consulta);
?>
]]>
    </programlisting>
    <para>
     La consulta no se ejecutar&aacute; correctamente ahora, y los
     ataques de inyecci&oacute;n de SQL no funcionar&aacute;n.
    </para>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Es necesaria una conexi&oacute;n MySQL antes de usar
    <function>mysql_real_escape_string</function> o de lo contrario un
    error de nivel <literal>E_WARNING</literal> es generado, y &false;
    es devuelto. Si <parameter>id_enlace</parameter> no est&aacute;
    definido, se usar&aacute; la &uacute;ltima conexi&oacute;n con
    MySQL.
   </para>
  </note>
  <note>
   <para>
    Si se habilita <link
    linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link>, aplique
    <function>stripslashes</function> sobre los datos primero. Usar
    esta funci&oacute;n sobre datos que ya han sido escapados los
    escapar&aacute; dos veces.
   </para>
  </note>
  <note>
   <para>
    Si esta funci&oacute;n no es usada para escapar datos, la consulta
    es vulnerable a <link
    linkend="security.database.sql-injection">Ataques de
    Inyecci&oacute;n de SQL</link>.
   </para>
  </note>
  <note>
   <simpara>
    <function>mysql_real_escape_string</function> no escapa
    <literal>%</literal> ni <literal>_</literal>. &Eacute;stos son
    comodines en MySQL si se combinan con <literal>LIKE</literal>,
    <literal>GRANT</literal>, o <literal>REVOKE</literal>.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mysql_client_encoding</function></member>
    <member><function>addslashes</function></member>
    <member><function>stripslashes</function></member>
    <member>La directiva <link
    linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link></member>
    <member>La directiva <link
    linkend="ini.magic-quotes-runtime">magic_quotes_runtime</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
