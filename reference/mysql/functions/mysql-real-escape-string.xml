<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.6 $ -->
<!-- EN-Revision: 1.14 Maintainer: lboshell Status: ready -->
<!-- splitted from ./en/functions/mysql.xml, last change in rev 1.100 -->
  <refentry id="function.mysql-real-escape-string">
   <refnamediv>
    <refname>mysql_real_escape_string</refname>
    <refpurpose>
     Escapa caracteres especiales de una cadena para su uso en una
     sentencia SQL
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <methodsynopsis>
     <type>string</type><methodname>mysql_real_escape_string</methodname>
     <methodparam><type>string</type><parameter>cadena_no_escapada</parameter></methodparam>
     <methodparam choice="opt"><type>resource</type><parameter>id_enlace</parameter></methodparam>
    </methodsynopsis>
    <para>
     <variablelist>
      <varlistentry>
       <term><parameter>cadena_no_escapada</parameter></term>
       <listitem><simpara>La cadena a escapar</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term><parameter>id_enlace</parameter> (opcional)</term>
       <listitem><simpara>El recurso de conexi&oacute;n
       mysql</simpara></listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     Esta funci&oacute;n escapar&aacute; todos los caracteres
     especiales en la <parameter>cadena_no_escapada</parameter>,
     tomando en cuenta el juego de caracteres actual de la
     conexi&oacute;n, de tal modo que sea seguro usarla con
     <function>mysql_query</function>. Si desea insertar datos
     binarios, debe usar &eacute;sta funci&oacute;n.
    </para>
    <para>
     <function>mysql_real_escape_string</function> llama a la
     funci&oacute;n de la biblioteca MySQL mysql_escape_string, la
     cual coloca barras invertidas antes de los siguientes caracteres:
     <literal>NULL</literal>, <literal>\x00</literal>,
     <literal>\n</literal>, <literal>\r</literal>,
     <literal>\</literal>, <literal>'</literal>, <literal>"</literal>
     y <literal>\x1a</literal>.
    </para>
    <para>
     <example>
      <title>Ejemplo sencillo de
      <function>mysql_real_escape_string</function></title>
      <programlisting role="php">
<![CDATA[
<?php
// Conectarse
$enlace = mysql_connect('mysql_host', 'mysql_usuario', 'mysql_contrasenya')
    OR die(mysql_error());

// Consulta
$query = sprintf("SELECT * FROM usuarios WHERE usuario='%s' AND
     password='%s'",
            mysql_real_escape_string($usuario),
            mysql_real_escape_string($password));
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Es necesario usar siempre (con algunas excepciones) esta
     funci&oacute;n para asegurarse de que los datos sean seguros
     antes de enviar una consulta a MySQL. Si tiene habilitada la
     directiva <link
     linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link>, y
     est&aacute; trabajando con datos que provienen del usuario, debe
     usar <function>stripslashes</function> primero sobre sus
     datos. Si sus datos provienen de otras fuentes y tiene habilitada
     la directiva <link
     linkend="ini.magic-quotes-runtime">magic_quotes_runtime</link>,
     deber&aacute; tambi&eacute;n usar
     <function>stripslashes</function> con sus datos. De no ser
     as&iacute;, quedar&aacute; abierto a ataques de inyecci&oacute;n
     SQL. He aqu&iacute; un ejemplo:
    </para>
    <para>
     <example>
      <title>Un ejemplo de un ataque de inyecci&oacute;n SQL</title>
      <programlisting role="php">
<![CDATA[
<?php
// Consultar la base de datos para verificar si hay una coincidencia de usuario
$consulta = "SELECT * FROM usuarios WHERE usuario='{$_POST['username']}' AND password='{$_POST['password']}'";
mysql_query($consulta);

// No revisamos $_POST['password'], podria ser cualquier cosa que el usuario
// quiera! Por ejemplo:
$_POST['username'] = 'aidan';
$_POST['password'] = "' OR 1=1";

// Esto quiere decir que la consulta enviada a MySQL seria:
echo $consulta;
?>
]]>
      </programlisting>
      <para>
       La consulta enviada a MySQL:
      </para>
      <screen>
<![CDATA[
SELECT * FROM usuarios WHERE usuario='aidan' AND password='' OR 1=1
]]>
      </screen>
      <para>
       &iexcl;Esto permitir&iacute;a que cualquiera iniciara una
       sesi&oacute;n sin una contrase&ntilde;a v&aacute;lida! Usando
       <function>mysql_real_escape_string</function> con cada variable
       se previene esto.
      </para>
      <programlisting role="php">
<![CDATA[
<?php
/**
 * Aplicar comillas sobre una variable para hacerla segura
 */
function comillas_inteligentes($valor)
{
    // Retirar las barras si es necesario
    if (get_magic_quotes_gpc()) {
        $valor = stripslashes($valor);
    }

    // Colocar comillas si no es un entero
    if (!is_int($valor)) {
        $valor = "'" . mysql_real_escape_string($valor) . "'";
    }

    return $valor;
}

// Conexion
$enlace = mysql_connect('mysql_host', 'mysql_usuario', 'mysql_contrasenya')
    OR die(mysql_error());

// Realizar una consulta segura
$consulta = sprintf("SELECT * FROM usuarios WHERE usuario=%s AND password=%s",
            comillas_inteligentes($_POST['username']),
            comillas_inteligentes($_POST['password']));

mysql_query($consulta);
?>
]]>
      </programlisting>
      <para>
       La consulta ser&aacute; ejecutada correctamente ahora, y los
       ataques de inyecci&oacute;n no dar&aacute;n resultado.
      </para>
     </example>
    </para>
    <note>
     <simpara>
      <function>mysql_real_escape_string</function> no escapa
      <literal>%</literal> ni <literal>_</literal>. &Eacute;stos son
      comodines en MySQL si se combianan con <literal>LIKE</literal>,
      <literal>GRANT</literal>, o <literal>REVOKE</literal>.
     </simpara>
    </note>
    <para>
     Vea tambi&eacute;n <function>mysql_client_encoding</function>,
     <function>addslashes</function>,
     <function>stripslashes</function>, y las directivas <link
     linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link> y <link
     linkend="ini.magic-quotes-runtime">magic_quotes_runtime</link>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
