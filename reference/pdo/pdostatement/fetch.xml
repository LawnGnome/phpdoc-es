<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 322104 Maintainer: jpberdejo Status: ready -->
<refentry xml:id="pdostatement.fetch" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::fetch</refname>
  <refpurpose>
   Obtiene la siguiente fila del conjunto de resultados
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>PDOStatement::fetch</methodname>
   <methodparam choice="opt"><type>int</type><parameter>fetch_style</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>cursor_orientation</parameter><initializer>PDO::FETCH_ORI_NEXT</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>cursor_offset</parameter><initializer>0</initializer></methodparam>
  </methodsynopsis>

  <para>
   Obtiene una fila del conjunto de resultados asociado al objeto PDOStatement. El
   parámetro <parameter>fetch_style</parameter> determina cómo devuelve la fila PDO.
   the row.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>fetch_style</parameter></term>
     <listitem>
      <para>
       Controla cómo se devolverá la siguiente fila. Este valor
       debe ser una de las constantes <literal>PDO::FETCH_*</literal>,
       estando predeterminado <literal>PDO::ATTR_DEFAULT_FETCH_MODE</literal>
       (el cual por defecto es <literal>PDO::FETCH_BOTH</literal>).
       <itemizedlist>
        <listitem><para>
         <literal>PDO::FETCH_ASSOC</literal>: devuelve un array indexado por los nombres de las
         columnas del conjunto de resultados.
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_BOTH</literal> (por defecto): devuelve un array indexado tanto
         por nombre de columna, como numéricamente a partir del 0, del conjunto de resultados.
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_BOUND</literal>: devuelve &true; y asigna los
         valores de las columnas del conjunto de resultados a las variables PHP las cuales
         fueron usadas en el método <function>PDOStatement::bindColumn</function>.
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_CLASS</literal>: devuelve una nueva instancia de la
         clase solicitada, mapeando las columnas del conjunto de resultados con los
         nombres de las propiedades de la clase. Si <parameter>fetch_style</parameter>
         incluye PDO::FETCH_CLASSTYPE (por ejemplo, <literal>PDO::FETCH_CLASS |
         PDO::FETCH_CLASSTYPE</literal>) entonces el nombre de la clase
         se determina a partir del valor de la primera columna.
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_INTO</literal>: actualiza una instancia existente
         de la clase solicitada, mapeando el nombre de las columnas con los
         nombres de las propiedades de la clase.
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_LAZY</literal>: combina
         <literal>PDO::FETCH_BOTH</literal> y <literal>PDO::FETCH_OBJ</literal>,
         creando los nombre de la variable objeto como son accedidos.
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_NUM</literal>: devuelve un array indexado por
         número de columna como son devueltos en el conjunto de resultados, comenzando por
         la columna 0.
        </para></listitem>
        <listitem><para>
         <literal>PDO::FETCH_OBJ</literal>: devuelve un objeto anónimo con 
         nombres de propiedades correspondientes a los nombres de las columnas devueltas
         en el conjunto de resultados.
        </para></listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cursor_orientation</parameter></term>
     <listitem>
      <para>
       Para un objeto PDOStatement representando un cursor desplazable, este
       valor determina qué columna será devuelta por la función. Este valor
       debe ser una de las constantes <literal>PDO::FETCH_ORI_*</literal>,
       siendo por defecto <literal>PDO::FETCH_ORI_NEXT</literal>. Para solicitar un
       cursor desplazable para el objeto PDOStatement, se debe establecer el
       atributo <literal>PDO::ATTR_CURSOR</literal> a
       <literal>PDO::CURSOR_SCROLL</literal> cuando se prepare la sentencia SQL
       con <function>PDO::prepare</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>offset</parameter></term>
     <listitem>
      <para>
       Para un objeto PDOStatement representando un cursor desplazable para el cual
       el parámetro <literal>cursor_orientation</literal> está establecido a 
       <literal>PDO::FETCH_ORI_ABS</literal>, este valor especifica el número
       absoluto de la fila del conjunto de resultados que se desea obtener.
      </para>
      <para>
       Para un objeto PDOStatement representando un cursor desplazable para el cual
       el parámetro <literal>cursor_orientation</literal> está establecido a 
       <literal>PDO::FETCH_ORI_REL</literal>, este valor especifica la
       fila a obtener relativa a la posición del cursor antes de que
       se llame a <function>PDOStatement::fetch</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   El valor de retorno de esta función en caso de éxito depende del tipo de obtención. En
   todos los casos, se devuelve &false; en caso de error.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example><title>Obtención de filas usando diferentes tipos de obtención</title>
    <programlisting role="php">
<![CDATA[
<?php
$sth = $dbh->prepare("SELECT name, colour FROM fruit");
$sth->execute();

/* Prueba de tipos de PDOStatement::fetch */
print("PDO::FETCH_ASSOC: ");
print("Return next row as an array indexed by column name\n");
$result = $sth->fetch(PDO::FETCH_ASSOC);
print_r($result);
print("\n");

print("PDO::FETCH_BOTH: ");
print("Return next row as an array indexed by both column name and number\n");
$result = $sth->fetch(PDO::FETCH_BOTH);
print_r($result);
print("\n");

print("PDO::FETCH_LAZY: ");
print("Return next row as an anonymous object with column names as properties\n");
$result = $sth->fetch(PDO::FETCH_LAZY);
print_r($result);
print("\n");

print("PDO::FETCH_OBJ: ");
print("Return next row as an anonymous object with column names as properties\n");
$result = $sth->fetch(PDO::FETCH_OBJ);
print $result->NAME;
print("\n");
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
PDO::FETCH_ASSOC: Return next row as an array indexed by column name
Array
(
    [NAME] => apple
    [COLOUR] => red
)

PDO::FETCH_BOTH: Return next row as an array indexed by both column name and number
Array
(
    [NAME] => banana
    [0] => banana
    [COLOUR] => yellow
    [1] => yellow
)

PDO::FETCH_LAZY: Return next row as an anonymous object with column names as properties
PDORow Object
(
    [NAME] => orange
    [COLOUR] => orange
)

PDO::FETCH_OBJ: Return next row as an anonymous object with column names as properties
kiwi
]]>
    </screen>
   </example>
   <example><title>Obteniendo filas con un cursor desplazable</title>
    <programlisting role="php">
<![CDATA[
<?php
function readDataForwards($dbh) {
  $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY BET';
  try {
    $stmt = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
    $stmt->execute();
    while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_NEXT)) {
      $data = $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
      print $data;
    }
    $stmt = null;
  }
  catch (PDOException $e) {
    print $e->getMessage();
  }
}
function readDataBackwards($dbh) {
  $sql = 'SELECT hand, won, bet FROM mynumbers ORDER BY bet';
  try {
    $stmt = $dbh->prepare($sql, array(PDO::ATTR_CURSOR => PDO::CURSOR_SCROLL));
    $stmt->execute();
    $row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_LAST);
    do {
      $data = $row[0] . "\t" . $row[1] . "\t" . $row[2] . "\n";
      print $data;
    } while ($row = $stmt->fetch(PDO::FETCH_NUM, PDO::FETCH_ORI_PRIOR));
    $stmt = null;
  }
  catch (PDOException $e) {
    print $e->getMessage();
  }
}

print "Reading forwards:\n";
readDataForwards($conn);

print "Reading backwards:\n";
readDataBackwards($conn);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Reading forwards:
21    10    5
16    0     5
19    20    10

Reading backwards:
19    20    10
16    0     5
21    10    5
]]>
    </screen>
   </example>

  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDO::prepare</function></member>
    <member><function>PDOStatement::execute</function></member>
    <member><function>PDOStatement::fetchAll</function></member>
    <member><function>PDOStatement::fetchColumn</function></member>
    <member><function>PDOStatement::fetchObject</function></member>
    <member><function>PDOStatement::setFetchMode</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
