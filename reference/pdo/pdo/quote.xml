<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 300101 Maintainer: alejandrorodas Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="pdo.quote" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::quote</refname>
  <refpurpose>
   Entrecomilla una cadena para usarla en una consulta.
  </refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>PDO::quote</methodname>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>parameter_type</parameter><initializer>PDO::PARAM_STR</initializer></methodparam>
  </methodsynopsis>

  <para>
   <function>PDO::quote</function> entrecomilla la cadena de entrada (si es
   necesario) y escapa los caracteres especiales contenidos en la cadena, usando
   un estilo de entrecomillado apropiado para el driver subyatence.
  </para>
  <para>
   Si se usa esta función para construir sentencias SQL, se
   recomienda <emphasis>encarecidamente</emphasis> usar
   <function>PDO::prepare</function> para preparar las sentencias SQL con
   los parámetros bound en vez de usar <function>PDO::quote</function> para interpolar
   datos de usuario en la consulta SQL. Las sentencias preparadas con parámetros bound
   no son sólo más portables, más convenientes, inmunes a inyección SQL, sino que
   son mucho más rápidos de ejecutar que consultas interpoladas, y tanto en el lado del
   servidor como del cliente se puede cachear una forma compilada de la consulta.
  </para>
  <para>
   No todos los drivers PDO implementan este método (como ejemplo notable, PDO_ODBC).
   En su lugar, considerar el uso de sentencias preparadas.
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>string</parameter></term>
      <listitem>
       <para>
        La cadena para ser entrecomillada.
       </para>
      </listitem>
     </varlistentry>
    <varlistentry>
     <term><parameter>parameter_type</parameter></term>
      <listitem>
       <para>
        Proporciona una sugerencia del tipo de datos para los drivers que tengan 
        un estilo de entrecomillado alternativos.
       </para>
      </listitem>
     </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve una cadena entrecomillada teóricamente segura para pasar a una
   sentencia SQL. Devuelve &false; si el criver no soporta el entrecomillado
   de esta forma.
  </para>
 </refsect1>

 <!-- Use when ERRORS exist
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   When does this function throw E_* level errors, or exceptions?
  </para>
 </refsect1>
 -->

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Entrecomillar una cadena normal</title>
    <programlisting role="php">
<![CDATA[
<?php
$conn = new PDO('sqlite:/home/lynn/music.sql3');

/* Cadena simple */
$string = 'Nice';
print "Unquoted string: $string\n";
print "Quoted string: " . $conn->quote($string) . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Unquoted string: Nice
Quoted string: 'Nice'
]]>
    </screen>
   </example>
   <example>
    <title>Entrecomillar una cadena peligrosa</title>
    <programlisting role="php">
<![CDATA[
<?php
$conn = new PDO('sqlite:/home/lynn/music.sql3');

/* Cadena peligrosa */
$string = 'Naughty \' string';
print "Unquoted string: $string\n";
print "Quoted string:" . $conn->quote($string) . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Unquoted string: Naughty ' string
Quoted string: 'Naughty '' string'
]]>
    </screen>
   </example>
   <example>
    <title>Entrecomillando una cadena compleja</title>
    <programlisting role="php">
<![CDATA[
<?php
$conn = new PDO('sqlite:/home/lynn/music.sql3');

/* Cadena compleja */
$string = "Co'mpl''ex \"st'\"ring";
print "Unquoted string: $string\n";
print "Quoted string: " . $conn->quote($string) . "\n";
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Unquoted string: Co'mpl''ex "st'"ring
Quoted string: 'Co''mpl''''ex "st''"ring'
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>PDO::prepare</function></member>
    <member><function>PDOStatement::execute</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
