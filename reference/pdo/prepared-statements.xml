<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 317502 Maintainer: alejandrorodas Status: ready -->
<!-- Reviewed: no -->

<chapter xml:id="pdo.prepared-statements" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Sentencias preparadas y procedimientos almacenados</title>
 <para>
  Muchas de las bases de datos más maduras soportan el concepto de sentencias preparadas.
  Pueden definirse como un tipo de plantillas compiladas para SQL que las aplicaciones desean
  ejecutar, que pueden ser personalizadas usando parámetros variables. Las sentencias preparadas
  ofrecen dos grandes beneficios:
 </para>
 <itemizedlist>
  <listitem>
   <simpara>
    La consulta sólo necesita ser interpretada (o preparada) una vez, pero puede
    ser ejecutada en múltiples ocasiones con los mismos o diferentes parámetros.
    Cuando la consulta es preparada, la base de datos analizará, compilará y 
    optimizará su plan para ejecutar la consulta. Para consultas complejas este
    proceso puede tomar suficiente tiempo como para que ralentice
    notablemente una aplicación si se necesita repetir la misma consulta muchas
    veces con los mismos parámetros. Usando una sentencia preparada la aplicación
    evita repetir el ciclo de análisis/compilación/optimización. Esto significa
    que las sentencias preparadas usan menos recursos y se ejecutan más rápidamente.
   </simpara>
  </listitem>
  <listitem>
   <simpara>
    Los parámetros para las sentencias preparadas no necesitan estar entrecomillados;
    el driver automáticamente se encarga de esto. Si una aplicación usa exclusivamente
    sentencias preparadas, el desarrollador puede estar seguro de que no ocurrirán
    inyecciones SQL (sin embargo, si otras partes de la consulta se construyen con
    datos de entrada sin escapar, las inyecciones SQL pueden ocurrir).
   </simpara>
  </listitem>
 </itemizedlist>
 <para>
  Las sentencias preparadas son tan útiles que son la única característica que PDO
  emulará para drivers que no las soporten. Esto asegura que una aplicación será capaz
  de usar el mismo paradigma de acceso a datos independientemente de las capacidades
  de la base de datos.
 </para>
 <para>
  <example>
   <title>Múltiples inserts usando sentencias preparadas</title>
   <simpara>
    Este ejemplo realiza dos consulta de tipo INSERT sustituyendo <literal>name</literal>
    y <literal>value</literal> por los valores equivalentes.
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare("INSERT INTO REGISTRY (name, value) VALUES (:name, :value)");
$stmt->bindParam(':name', $name);
$stmt->bindParam(':value', $value);

// insertar una fila
$name = 'one';
$value = 1;
$stmt->execute();

// insertar otra fila con diferentes valores
$name = 'two';
$value = 2;
$stmt->execute();
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Múltiples inserts usando sentencias preparadas</title>
   <simpara>
    Este ejemplo realiza dos consultas de tipo INSERT sustituyendo <literal>name</literal>
    y <literal>value</literal> por el parámetro de sustitución<literal>?</literal>.
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare("INSERT INTO REGISTRY (name, value) VALUES (?, ?)");
$stmt->bindParam(1, $name);
$stmt->bindParam(2, $value);

// insertar una fila
$name = 'one';
$value = 1;
$stmt->execute();

// insertar otra fila con diferentes valores
$name = 'two';
$value = 2;
$stmt->execute();
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Buscar datos usando sentencias preparadas</title>
   <simpara>
    Este ejemplo busca datos basándose en un valor clave proporcionado por un formulario.
    Los datos de usuario son automáticamente entrecomillados, con lo cual no hay
    riesgo de un ataque por inyección SQL.
   </simpara>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare("SELECT * FROM REGISTRY where name = ?");
if ($stmt->execute(array($_GET['name']))) {
  while ($row = $stmt->fetch()) {
    print_r($row);
  }
}
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  Si el driver de la base de datos lo soporta, una aplicación puede también enlazar
  parámetros de salida al igual que para entrada. Los parámetros de salida son
  típicamente usados para recuperar valores de procedimientos almacenados. Los
  parámetros de salida son ligeramente más complejos de usar que los de entrada, de
  manera que el desarrollador debe saber cuánto de grande puede ser un parámetro
  cuando se enlaza. Si el valor resulta ser más grande que el tamaño que se ha
  supuesto, se eleva un error.
 </para>
 
 <para>
  <example>
   <title>Llamar a un procedimiento almacenado con un parámetro de salida</title>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare("CALL sp_returns_string(?)");
$stmt->bindParam(1, $return_value, PDO::PARAM_STR, 4000); 

// llamar al procedimiento almacenado
$stmt->execute();

print "procedure returned $return_value\n";
?>
]]>
   </programlisting>
  </example>
 </para>
 
 <para>
  Los desarrolladores pueden también especificar parámetros que contendrán valores
  tanto de entrada como de salida; la sintaxis es similar a la de los parámetros
  de salida. En el siguiente ejemplo, la cadena 'hello' es pasada al procedimiento
  almacenado, y cuando éste finaliza, 'hello' es reemplazada con el valor de retorno
  del procedimiento.
 </para>
 
 <para>
  <example>
   <title>Llamar a un procedimiento almacenado con un parámetro de entrada/salida</title>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare("CALL sp_takes_string_returns_string(?)");
$value = 'hello';
$stmt->bindParam(1, $value, PDO::PARAM_STR|PDO::PARAM_INPUT_OUTPUT, 4000); 

// llamar al procedimiento almacenado
$stmt->execute();

print "procedure returned $value\n";
?>
]]>
   </programlisting>
  </example>
 </para>
 <para>
  <example>
   <title>Uso inválido de un parámetro de sustitución</title>
   <programlisting role="php">
<![CDATA[
<?php
$stmt = $dbh->prepare("SELECT * FROM REGISTRY where name LIKE '%?%'");
$stmt->execute(array($_GET['name']));

// los parámetros de sustitución deben ser usados en el lugar del valor completo
$stmt = $dbh->prepare("SELECT * FROM REGISTRY where name LIKE ?");
$stmt->execute(array("%$_GET[name]%"));
?>
]]>
   </programlisting>
  </example>
 </para>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

