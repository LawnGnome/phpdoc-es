<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.11 $ -->
<!-- EN-Revision: 1.13 Maintainer: lboshell Status: ready -->
<refentry xml:id="function.http-build-query" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>http_build_query</refname>
  <refpurpose>Generar una cadena de consulta codificada estilo
  URL</refpurpose>
 </refnamediv>
 <refsect1>
  <title>Descripción</title>
  <methodsynopsis>
   <type>string</type><methodname>http_build_query</methodname>
   <methodparam><type>array</type><parameter>datos_formulario</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>prefijo_numerico</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>separador_arg</parameter></methodparam>
  </methodsynopsis>

  <simpara>
   Genera una cadena de consulta codificada estilo URL a partir de la
   matriz asociativa (o indexada)
   dada. <parameter>datos_formulario</parameter> puede ser una matriz
   u objeto que contenga propiedades. Una matriz
   <parameter>datos_formulario</parameter> puede ser una estructura
   uni-dimensional sencilla, o una matriz de matrices (que a su vez
   puede contener otras matrices). Si se usan índices numéricos en la
   matriz base, y se provee un
   <parameter>prefijo_numerico</parameter>, éste será añadido al
   comienzo de los índices numéricos para aquellos elementos
   encontrados sólo en la matriz base. Esto es para permitir que se
   opere con nombres de variables legales cuando los datos sean
   decodificados por PHP u otra aplicación CGI más adelante.
  </simpara>

  <note>
   <para>
    <link
    linkend="ini.arg-separator.output">arg_separator.output</link> es
    usado para separar argumentos, a menos que el parámetro
    <parameter>separador_arg</parameter> sea especificado, en cuyo
    caso este último será usado.
   </para>
  </note>

  <example>
   <title>Uso simple de <function>http_build_query</function></title>
   <programlisting role="php">
<![CDATA[
<?php
$datos = array('foo'=>'bar',
               'baz'=>'boom',
               'vaca'=>'leche',
               'php'=>'procesador de hipertexto');

echo http_build_query($datos); // foo=bar&baz=boom&vaca=leche&php=procesador+de+hipertexto
echo http_build_query($data, '', '&amp;'); // foo=bar&amp;baz=boom&amp;vaca=leche\&amp;php=procesador+de+hipertexto
?>
]]>
   </programlisting>
  </example>

  <example>
   <title><function>http_build_query</function> con elementos
   indexados numéricamente.</title>
   <programlisting role="php">
<![CDATA[
<?php
$datos = array('foo', 'bar', 'baz', 'boom', 'vaca' => 'leche',
               'php' => 'procesador de hipertexto');

echo http_build_query($datos);
/* Genera la salida:
      0=foo&1=bar&2=baz&3=boom&vaca=leche&php=procesador+de+hipertexto
 */

echo http_build_query($datos, 'mivar_');
/* Genera la salida:
      mivar_0=foo&mivar_1=bar&mivar_2=baz&mivar_3=boom&vaca=leche&php=procesador+de+hipertexto
 */
?>
]]>
   </programlisting>
  </example>

  <example>
   <title><function>http_build_query</function> con matrices
   complejas</title>
   <programlisting role="php">
<![CDATA[
<?php
$datos = array('usuario'=>array('nombre'=>'Bob Smith',
                                'edad'=>47,
                                'sexo'=>'M',
                                'fdm'=>'5/12/1956'),
               'pasatiempos'=>array('golf', 'opera', 'poker', 'rap'),
               'hijos'=>array('bobby'=>array('edad'=>12,
                                             'sexo'=>'M'),
                              'sally'=>array('edad'=>8,
                                             'sexo'=>'F')),
               'CEO');

echo http_build_query($datos, 'banderas_');
?>
]]>
     </programlisting>
     <para>
      esto generará la salida: (acotada por razones de legibilidad)
     </para>
     <screen>
<![CDATA[
usuario[nombre]=Bob+Smith&usuario[edad]=47&usuario[sexo]=M&
usuario[fdm]=5%2F12%2F1956&pasatiempos[0]=golf&pasatiempos[1]=opera&
pasatiempos[2]=poker&pasatiempos[3]=rap&hijos[bobby][edad]=12&
hijos[bobby][sexo]=M&hijos[sally][edad]=8&hijos[sally][sexo]=F&banderas_0=CEO
]]>
   </screen>
   <para>
    <note>
     <para>
      Sólo el elemento "CEO" indexado numéricamente en la matriz base
      recibió un prefijo. Los otros índices numéricos, encontrados
      bajo los pasatiempos, no requieren un prefijo tipo cadena para
      ser nombres legales de variables.
     </para>
    </note>
   </para>
  </example>

  <example>
   <title>Uso de <function>http_build_query</function> con un
   objeto</title>
   <programlisting role="php">
<![CDATA[
<?php
class miClase {
    var $foo;
    var $baz;

    function miClase() {
        $this->foo = 'bar';
        $this->baz = 'boom';
    }
}

$datos = new miClase();

echo http_build_query($datos); // foo=bar&baz=boom

?>
]]>
   </programlisting>
  </example>

  <note>
   <simpara>
    El parámetro <parameter>separador_arg</parameter> fue agregado en
    PHP 5.1.2.
   </simpara>
  </note>

  <simpara>
   Vea también: <function>parse_str</function>,
   <function>parse_url</function>, <function>urlencode</function>, y
   <function>array_walk</function>
  </simpara>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
