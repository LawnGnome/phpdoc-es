<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.8 Maintainer: lboshell Status: ready -->
<!-- splitted from ./en/functions/url.xml, last change in rev 1.2 -->
  <refentry id="function.urlencode">
   <refnamediv>
    <refname>urlencode</refname>
    <refpurpose>Codifica como URL una cadena</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis>
      <type>string</type><methodname>urlencode</methodname>
      <methodparam><type>string</type><parameter>cadena</parameter></methodparam>
     </methodsynopsis>
    <para>
     Devuelve una cadena en la que todos los caracteres
     no-alfanum&eacute;ricos excepto <literal>-_.</literal> han sido
     reemplazados con un signo de porcentaje (<literal>%</literal>)
     seguido por dos d&iacute;gitos hexadecimales y los espacios son
     codificados como signos de suma (<literal>+</literal>). Esta es
     la misma codificaci&oacute;n usada en los datos publicados desde
     un formulario WWW, es decir, el mismo mecanismo usado para el
     tipo de medios
     <literal>application/x-www-form-urlencoded</literal>. Este
     mecanismo difiere de la codificaci&oacute;n RFC1738 (vea
     <function>rawurlencode</function>) en que, por razones
     hist&oacute;ricas, los espacios son codificados como signos de
     suma (+). Esta funci&oacute;n es conveniente cuando se codifica
     una cadena a ser usada como la parte de consulta de una URL, como
     m&eacute;todo pr&aacute;ctico para pasar variables a la siguiente
     p&aacute;gina:
     <example>
      <title>Ejemplo de <function>urlencode</function></title>
      <programlisting role="php">
<![CDATA[
<?php
echo '<a href="micgi?foo=', urlencode($entrada_usuario), '">';
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Nota: Tenga cuidado con las variables que puedan coincidir con
     entidades HTML. Secuencias como &amp;amp, &amp;copy y &amp;pound
     son procesadas por el navegador y la entidad real es usada en
     lugar del nombre de variable deseado. Este es un problema obvio
     sobre el cual el consorcio W3 ha estado alertando a las personas
     por a&ntilde;os. La referencia esta aqu&iacute;: <ulink
     url="&url.argsep;">&url.argsep;</ulink>. PHP soporta la
     modificaci&oacute;n del separador de argumentos al punto-y-coma
     sugerido por el W3C a trav&eacute;s de la directiva .ini
     arg_separator. Desafortunadamente, la mayor&iacute;a de agentes
     de usuario no env&aacute;n datos de formularios en este formato
     separado por punto-y-coma. Una forma m&aacute;s portable es usar
     &amp;amp; en lugar de &amp; como separador. No es necesario
     modificar el valor arg_separator de PHP para esto. D&eacute;jelo
     como &amp;, y simplemente codifique sus URLs usando
     <function>htmlentities</function> o
     <function>htmlspecialchars</function>.
    </para>
    <para>
     <example>
      <title>Ejemplo de <function>urlencode</function> y
      <function>htmlentities</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$cadena_query = 'foo=' . urlencode($foo) . '&bar=' . urlencode($bar);
echo '<a href="micgi?' . htmlentities($cadena_query) . '">';
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Vea tambi&eacute;n <function>urldecode</function>,
     <function>htmlentities</function>,
     <function>rawurldecode</function> y
     <function>rawurlencode</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
