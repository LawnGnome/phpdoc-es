<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.9 Maintainer: lboshell Status: ready -->
<refentry id="function.urlencode">
 <refnamediv>
  <refname>urlencode</refname>
  <refpurpose>Codifica como URL una cadena</refpurpose>
 </refnamediv>
 <refsect1>
  <title>Descripción</title>
  <methodsynopsis>
   <type>string</type><methodname>urlencode</methodname>
   <methodparam><type>string</type><parameter>cadena</parameter></methodparam>
  </methodsynopsis>
  <para>
   Devuelve una cadena en la que todos los caracteres no-alfanuméricos
   excepto <literal>-_.</literal> han sido reemplazados con un signo
   de porcentaje (<literal>%</literal>) seguido por dos dígitos
   hexadecimales y los espacios son codificados como signos de suma
   (<literal>+</literal>). Esta es la misma codificación usada en los
   datos publicados desde un formulario WWW, es decir, el mismo
   mecanismo usado para el tipo de medios
   <literal>application/x-www-form-urlencoded</literal>. Este
   mecanismo difiere de la codificación RFC1738 (vea
   <function>rawurlencode</function>) en que, por razones históricas,
   los espacios son codificados como signos de suma (+). Esta función
   es conveniente cuando se codifica una cadena a ser usada como la
   parte de consulta de una URL, como método práctico para pasar
   variables a la siguiente página:
   <example>
    <title>Ejemplo de <function>urlencode</function></title>
    <programlisting role="php">
<![CDATA[
<?php
echo '<a href="micgi?foo=', urlencode($entrada_usuario), '">';
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Nota: Tenga cuidado con las variables que puedan coincidir con
   entidades HTML. Secuencias como &amp;amp, &amp;copy y &amp;pound
   son procesadas por el navegador y la entidad real es usada en lugar
   del nombre de variable deseado. Este es un problema obvio sobre el
   cual el consorcio W3 ha estado alertando a las personas por
   años. La referencia esta aquí: <ulink
   url="&url.argsep;">&url.argsep;</ulink>. PHP soporta la
   modificación del separador de argumentos al punto-y-coma sugerido
   por el W3C a través de la directiva .ini
   arg_separator. Desafortunadamente, la mayoría de agentes de usuario
   no envían datos de formularios en este formato separado por
   punto-y-coma. Una forma más portable es usar &amp;amp; en lugar de
   &amp; como separador. No es necesario modificar el valor
   arg_separator de PHP para esto. Déjelo como &amp;, y simplemente
   codifique sus URLs usando <function>htmlentities</function> o
   <function>htmlspecialchars</function>.
  </para>
  <para>
   <example>
    <title>Ejemplo de <function>urlencode</function> y
    <function>htmlentities</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$cadena_query = 'foo=' . urlencode($foo) . '&bar=' . urlencode($bar);
echo '<a href="micgi?' . htmlentities($cadena_query) . '">';
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Vea también <function>urldecode</function>,
   <function>htmlentities</function>,
   <function>rawurldecode</function> y
   <function>rawurlencode</function>.
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
