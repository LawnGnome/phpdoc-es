<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 1.8 Maintainer: javi Status: ready -->
<refentry xml:id="function.sqlite-escape-string" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>sqlite_escape_string</refname>
  <refpurpose>Escapa una cadena de texto para poder usarla como par&aacute;metro en una consulta</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>sqlite_escape_string</methodname>
   <methodparam><type>string</type><parameter>cadena</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>sqlite_escape_string</function> modifica la cadena proporcionada en el par&aacute;metro 
   <parameter>cadena</parameter> de forma que se escapan los caracteres especiales y as&iacute; la cadena 
   est&aacute; lista para emplearse en las sentencias SQL de SQLite. Los cambios realizados incluyen 
   doblar las comillas simples (<literal>'</literal>) y comprobar que no existen caracteres binarios inseguros 
   que se vayan a emplear en la cadena de consulta SQL.
  </para>
  <para>
   Si la <parameter>cadena</parameter> contiene caracteres de tipo <literal>NUL</literal> 
   o si empieza con un car&aacute;cter cuyo valor ordinal sea <literal>0x01</literal>, PHP 
   aplica un esquema de codificaci&oacute;n binaria para asegurar que los datos binarios pueden 
   almacenarse (y recuperarse posteriormente) con seguridad.
  </para>
  <para>
   Aunque la codificaci&oacute;n permite transformar los datos binarios en seguros, impedir&aacute; 
   que se puedan emplar comparaciones como <literal>LIKE</literal> en las columnas que contienen 
   datos binarios. En la pr&aacute;ctica sin embargo, este hecho no deber&iacute;a ser un problema 
   ya que en los esquemas de bases datos no se suelen emplear ese tipo de comparaciones con las 
   columnas que almacenan datos binarios (de hecho, es mejor emplear otros medios para almacenar 
   los datos binarios, como por ejemplo archivos en el sistema).
  </para>
  <warning>
   <simpara>
    <emphasis>No</emphasis> se debe emplear la funci&oacute;n <function>addslashes</function> 
	para escapar las cadenas que se utilizan en las consultas de SQLite, ya que puede provocar 
	comportamientos indeseados a la hora de recuperar los datos.
   </simpara>
  </warning>
  <note>
   <simpara>
    No se debe emplear esta funci&oacute;n para codificar los datos devueltos por FDU (funciones 
	definidas por el usuario) creadas con las funciones <function>sqlite_create_function</function> o 
    <function>sqlite_create_aggregate</function>. Se debe emplear la funci&oacute;n 
	<function>sqlite_udf_encode_binary</function> en su lugar.
   </simpara>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>sqlite_udf_encode_binary</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
