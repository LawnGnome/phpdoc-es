<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: 1.6 Maintainer: javi Status: ready -->
<refentry id="function.sqlite-udf-decode-binary">
 <refnamediv>
  <refname>sqlite_udf_decode_binary</refname>
  <refpurpose>Decodifica los datos binarios que se pasan como par&aacute;metro a las funciones FDU (funci&oacute;n definida por el usuario)</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>sqlite_udf_decode_binary</methodname>
   <methodparam><type>string</type><parameter>datos</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>sqlite_udf_decode_binary</function> decodifica la codificaci&oacute;n 
   binaria aplicada por las funciones <function>sqlite_udf_encode_binary</function> o 
   <function>sqlite_escape_string</function>.
  </para>
  <para>
   Se debe utilizar esta funci&oacute;n para los par&aacute;metros que se pasan a 
   las funciones FDU (funci&oacute;n definida por el usuario) si &eacute;stos 
   pueden contener datos binarios. 
  </para>
  <para>
   PHP no realiza este proceso de codificaci&oacute;n/decodificaci&oacute;n de forma autom&aacute;tica, 
   ya que esto podr&iacute;a penalizar seriamente el rendimiento de las aplicaciones.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de funci&oacute;n max_length segura con datos binarios</title>
    <programlisting role="php">
<![CDATA[
<?php
$datos = array(
   'uno',
   'dos',
   'tres',
   'cuatro',
   'cinco',
   'seis',
   'siete',
   'ocho',
   'nueve',
   'diez',
   );
$manejador_bd = sqlite_open(':memory:');
sqlite_query($manejador_bd, "CREATE TABLE tabla_cadenas(a)");
foreach ($datos as $cadena) {
    $cadena = sqlite_escape_string($cadena);
    sqlite_query($manejador_bd, "INSERT INTO tabla_cadenas VALUES ('$cadena')");
}

function max_len_step(&$contexto, $cadena) 
{
    $cadena = sqlite_udf_decode_binary($cadena);
    if (strlen($cadena) > $contexto) {
        $contexto = strlen($cadena);
    }
}

function max_len_finalize(&$contexto) 
{
    return $contexto;
}

sqlite_create_aggregate($manejador_bd, 'max_len', 'max_len_step', 'max_len_finalize');

var_dump(sqlite_array_query($manejador_bd, 'SELECT max_len(a) from tabla_cadenas'));

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>sqlite_udf_encode_binary</function></member>
    <member><function>sqlite_create_function</function></member>
    <member><function>sqlite_create_aggregate</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
