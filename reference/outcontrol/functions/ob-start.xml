<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.6 $ -->
<!-- EN-Revision: 1.24 Maintainer: lboshell Status: ready -->
<refentry xml:id="function.ob-start" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>ob_start</refname>
  <refpurpose>Habilitar el uso de búferes de salida</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>ob_start</methodname>
   <methodparam choice="opt"><type>callback</type><parameter>llamada_de_retorno_salida</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>tamanyo_segmento</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>borrar</parameter></methodparam>
  </methodsynopsis>
  <para>
   Esta función habilitará el uso de búferes de salida. Mientras los búferes
   de salida están activos no se envía salida desde el script (más que las
   cabeceras), en su lugar la salida es almacenada en un búfer interno.
  </para>
  <para>
   Los contenidos de este búfer interno pueden ser copiados a una variable
   de cadena usando <function>ob_get_contents</function>. Para producir la
   salida de lo que está almacenado en el búfer interno, use
   <function>ob_end_flush</function>. Alternativamente,
   <function>ob_end_clean</function> descartará silenciosamente los
   contenidos del búfer.
  </para>
  <warning>
   <para>
    Algunos servidores web (p.ej. Apache) modifican el directorio de trabajo
    de un script cuando se ejecuta la llamada de retorno. Es posible
    modificarlo de vuelta p.ej. mediante
    <literal>chdir(dirname($_SERVER['SCRIPT_FILENAME']))</literal> en la
    llamada de retorno.
   </para>
  </warning>
  <para>
   Los búferes de salida pueden apilarse, es decir, es posible llamar
   <function>ob_start</function> mientras que otro
   <function>ob_start</function> está activo. Simplemente asegúrese de
   llamar <function>ob_end_flush</function> el número apropiado de veces. Si
   múltiples llamadas de retorno están acivas, la salida es filtrada
   secuencialmente a través de cada una de ellas en orden de anidamiento.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>llamada_de_retorno_salida</parameter></term>
     <listitem>
      <para>
       Es posible especificar una función opcional
       <parameter>llamada_de_retorno_salida</parameter>. Esta función recibe
       una cadena como parámetro y debe devolver una cadena. La función será
       llamada cuando se llame <function>ob_end_flush</function>, o cuando
       el búfer de salida sea volcado al navegador al final de la petición.
       Cuando se llama <parameter>output_callback</parameter>, éste recibirá
       los contenidos del búfer de salida como su parámetro y se espera que
       devuelva un nuevo búfer de salida como resultado, valor que será
       enviado al navegador. Si la
       <parameter>llamada_de_retorno_salida</parameter> no es una función
       que pueda llamarse, se devolverá &false;.
      </para>
      <para>
       Si la llamada de retorno tiene dos parámetros, el segundo parámetro
       es llenado con un campo de bits consistente de
       <constant>PHP_OUTPUT_HANDLER_START</constant>,
       <constant>PHP_OUTPUT_HANDLER_CONT</constant> y
       <constant>PHP_OUTPUT_HANDLER_END</constant>.
      </para>
      <para>
       Si <parameter>llamada_de_retorno_salida</parameter> devuelve &false;,
       la entrada original es enviada al navegador.
      </para>
      <para>
       El parámetro <parameter>llamada_de_retorno_salida</parameter> puede
       evitarse pasando el valor &null;.
      </para>
      <para>
       No deben llamarse <function>ob_end_clean</function>,
       <function>ob_end_flush</function>, <function>ob_clean</function>,
       <function>ob_flush</function> ni <function>ob_start</function> desde
       una llamada de retorno. De hacerse, el comportamiento es indefinido.
       Si desea eliminar los contenidos de un búfer, devuelva "" (una cadena
       nula) desde la llamada de retorno.  No es posible siquiera llamar
       funciones que usen el mecanismo de búferes de salida como
       <literal>print_r($expresion, true)</literal> o
       <literal>highlight_file($nombre_archivo, true)</literal> desde una
       llamada de retorno.
      </para>
      <note>
       <para>
        En PHP 4.0.4 se introdujo <function>ob_gzhandler</function> para
        facilitar el envío de datos codificados con el algoritmo gz a
        navegadores web con soporte para páginas web comprimidas.
        <function>ob_gzhandler</function> determina el tipo de contenido que
        aceptará el navegador y devolverá su salida acordemente.
       </para>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>tamanyo_segmento</parameter></term>
     <listitem>
      <para>
       Si se pasa el parámetro opcional
       <parameter>tamanyo_segmento</parameter>, la llamada de retorno es
       ejecutada en cada primera nueva línea después de
       <parameter>tamanyo_segmento</parameter> bytes de salida. El valor
       predeterminado 0 quiere decir que la función es llamada únicamente al
       final, el otro valor especial 1 define
       <parameter>tamanyo_segmento</parameter> a 4096.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>borrar</parameter></term>
     <listitem>
      <para>
       Si el parámetro opcional <parameter>borrar</parameter> es definido
       como &false;, el búfer no será eliminado hasta que el script finalice
       (a partir de PHP 4.3.0).
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.3.2</entry>
       <entry>
        Esta función cambió para devolver &false; en caso de que
        <parameter>llamada_de_retorno_salida</parameter> no pudiera
        ejecutarse.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de una llamada de retorno del usuario</title>
    <programlisting role="php">
<![CDATA[
<?php

function llamada_retorno($bufer)
{
  // reemplazar todas las manzanas con naranjas
  return (str_replace("manzanas", "naranjas", $bufer));
}

ob_start("llamada_retorno");

?>
<html>
<body>
<p>Es como comparar manzanas con naranjas.</p>
</body>
</html>
<?php

ob_end_flush();

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
<html>
<body>
<p>Es como comparar naranjas con naranjas.</p>
</body>
</html>
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>ob_get_contents</function></member>
    <member><function>ob_end_clean</function></member>
    <member><function>ob_end_flush</function></member>
    <member><function>ob_implicit_flush</function></member>
    <member><function>ob_gzhandler</function></member>
    <member><function>ob_iconv_handler</function></member>
    <member><function>mb_output_handler</function></member>
    <member><function>ob_tidyhandler</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
