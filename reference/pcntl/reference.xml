<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.9 Maintainer: jtacon Status: ready -->
 <reference id="ref.pcntl">
  <title>Funciones de Control de Procesos</title>
  <titleabbrev>PCNTL</titleabbrev>

  <partintro>
   <section id="pcntl.intro">
    &reftitle.intro;
    <para>
     El soporte de Control de Procesos en PHP implementa el estilo Unix
     de creaci&nbsp;n de procesos, ejecuci&nbsp;n de programa, administraci&nbsp;n de
     se&ntilde;ales y finalizaci&nbsp;n de procesos. El Control de Procesos no
     deber&iacute;a
     estar activado para un servidor de entorno web, ya que podr&iacute;an ocurrir
     resultados inesperados utilizando las funciones de Control de Procesos.
    </para>
    <para>
     Esta documentaci&nbsp;n explica en modo general como se utilizan las
     funciones de Control de Procesos. Para una informaci&nbsp;n m&aacute;s
     detallada sobre controles de procesos en Unix deber&iacute;as acudir
     a la documentaci&nbsp;n de tu sistema sobre fork(2), waitpid(2),
     signal(2) o al manual de referecia de programaci&nbsp;n avanzada
     bajo entornos Unix (Advanced Programming in the UNIX Environment)
     de Richard Stevens, Addison-Wesley.
    </para>
    <para>
     PCNTL ahora utiliza se&ntilde;ales para manejar el mecanismo de llamadas de retorno,
     que es mucho m&aacute;s r&aacute;pido que el anterior mecanismo. Este cambio sigue
     la misma sem&aacute;ntica que utilizar "se&ntilde;ales del usuario". Debes utilizar
     <function>declare</function> para definir que lugares en tus programas se
     permiten las llamadas de retorno. De esta manera se minimiza la carga
     de eventos as&iacute;ncronos. Anteriormente, al compilar PHP con la extensi&nbsp;n
     pcntl siempre estaban activadas las llamadas de retorno, produciendo
     as&iacute; una carga innecesaria para las aplicaciones que no utilizaban pcntl.
    </para>
    <para>
     Para scripts pcntl anteriores al PHP 4.3.0 hay que realizar los
     ajustes para definir con el <function>declare</function> en que secciones
     de la aplicaci&nbsp;n se permiten las llamadas de retorno o simplemente
     permitirlo en toda la aplicaci&nbsp;n mediante la sintaxis global de
     <function>declare</function>.
    </para>

    &note.no-windows.extension;
   </section>

   <section id="pcntl.requirements">
    &reftitle.required;
    &no.requirement;
   </section>

   &reference.pcntl.configure;

   <section id="pcntl.configuration">
    &reftitle.runtime;
    &no.config;
   </section>

   <section id="pcntl.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   &reference.pcntl.constants;

   <section id="pcntl.example">
    &reftitle.examples;
    <para>
     Este ejemplo realiza un fork (bifurcaci&nbsp;n) de un proceso daemon (demonio)
     con administraci&nbsp;n de se&ntilde;ales.
    </para>
    <example>
     <title>Ejemplo de Control de Procesos</title>
     <programlisting role="php">
<![CDATA[
<?php
declare(ticks=1);

$pid = pcntl_fork();
if ($pid == -1) {
     die("no se puede hacer fork"); 
} else if ($pid) {
     exit(); // somos el proceso padre
} else {
     // somos el proceso hijo
}

// detatch desde la terminal
if (!posix_setsid()) {
    die("no se puede hacer un detach desde la terminal");
}

// bucle infinito realizando tareas
while (1) {

    // hacer algo interesante aquí .. 

}

function sig_handler($signo) 
{

     switch ($signo) {
         case SIGTERM:
             // tareas de finalización
             exit;
             break;
         case SIGHUP:
             // tareas de reinicio
             break;
         default:
             // tareas para las demás señales
     }

}

// congiguración de las señales
pcntl_signal(SIGTERM, "sig_handler");
pcntl_signal(SIGHUP, "sig_handler");

?>
]]>
     </programlisting>
    </example>
   </section>

   <section id="pcntl.seealso">
    &reftitle.seealso;
    <para>
     Te puede ser &uacute;til echar un vistazo a
     <link linkend="ref.posix">POSIX functions</link>
    </para>
   </section>

  </partintro>

&reference.pcntl.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

