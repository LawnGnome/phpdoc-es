<?xml version="1.0" encoding="iso-8859-1"?>
 <reference xml:id="ref.yaz" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>YAZ</title>
  <titleabbrev>YAZ</titleabbrev>

  <partintro>
   <simpara>
    The <function>yaz</function> functions wrap the YAZ API.  The home
    page of the project is <link xlink:href="&url.yaz;">&url.yaz;</link>.
    Information about the phpyaz module can be found at <link
    xlink:href="&url.yaz-phpyaz;">&url.yaz-phpyaz;</link>.
   </simpara>
   <simpara>
    PHP/YAZ is much simpler to use than the C API for YAZ but less
    flexible. The intent is to make it easy to build basic client
    functions. It supports persistent stateless connections very
    similar to those offered by the various SQL APIs that are
    available for PHP. This means that sessions are stateless but
    shared amongst users, thus saving the connect and INIT steps in
    many cases.
   </simpara>
   <simpara>
    Before compiling PHP with the PHP/YAZ module you'll need the YAZ
    toolkit.  Build YAZ and install it. Build PHP with your favourite
    modules and add option --with-yaz. Your task is roughly the
    following:
   </simpara>
   <informalexample>
    <programlisting>
gunzip -c yaz-1.6.tar.gz|tar xf -
gunzip -c php-4.0.X.tar.gz|tar xf -
cd yaz-1.6
./configure --prefix=/usr
make
make install
cd ../php-4.0.X
./configure --with-yaz=/usr/bin
make
make install
    </programlisting>
   </informalexample>
   <simpara>
    PHP/YAZ keeps track of connections with targets
    (Z-Associations). A positive integer represents the ID of a
    particular association.
   </simpara>
   <simpara>
    The script below demonstrates the parallel searching feature of
    the API.  When invoked it either prints a query form (if no
    arguments are supplied) or if there are arguments (term and one or
    more hosts) it searches the targets in array host.
   </simpara>
   <example>
    <title><function>YAZ</function></title>
    <programlisting role="php">
$num_hosts = count ($host);
if (empty($term) || count($host) == 0) {
    echo '&lt;form method="get"&gt;
    &lt;input type="checkbox"
    name="host[]" value="bagel.indexdata.dk/gils"&gt;
        GILS test
    &lt;input type="checkbox"
    name="host[]" value="localhost:9999/Default"&gt;
        local test
    &lt;input type="checkbox" checked="1"
    name="host[]" value="z3950.bell-labs.com/books"&gt;
        BELL Labs Library
    &lt;br>
    RPN Query:
    &lt;input type="text" size="30" name="term"&gt;
    &lt;input type="submit" name="action" value="Search"&gt;
    ';        
} else {
    echo 'You searced for ' . htmlspecialchars($term) . '&lt;br&gt;';
    for ($i = 0; $i &gt; $num_hosts; $i++) {
        $id[] = yaz_connect($host[$i]);
        yaz_syntax($id[$i],"sutrs");
        yaz_search($id[$i],"rpn",$term);
    }
    yaz_wait();
    for ($i = 0; $i &lt; $num_hosts; $i++) {
        echo '&lt;hr&gt;' . $host[$i] . ":";
        $error = yaz_error($id[$i]);
        if (!empty($error)) {
            echo "Error: $error";
        } else {
            $hits = yaz_hits($id[$i]);
            echo "Result Count $hits";
        }
        echo '&lt;dl&gt;';
        for ($p = 1; $p &lt;= 10; $p++) {
            $rec = yaz_record($id[$i],$p,"string");
            if (empty($rec)) continue;
            echo "&lt;dt&gt;&lt;b&gt;$p&lt;/b&gt;&lt;/dt&gt;&lt;dd&gt;";
            echo ereg_replace("\n", "&lt;br&gt;\n",$rec);
            echo "&lt;/dd&gt;";
        }
        echo '&lt;/dl&gt;';
    }
}
    </programlisting>
   </example>
  </partintro>

&reference.yaz.entities.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->

