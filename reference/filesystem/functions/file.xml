<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.16 Maintainer: lboshell Status: ready -->
<!-- splitted from ./en/functions/filesystem.xml, last change in rev 1.2 -->
  <refentry id="function.file">
   <refnamediv>
    <refname>file</refname> 
    <refpurpose>Lee un archivo entero hacia una matriz</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis>
      <type>array</type><methodname>file</methodname>
      <methodparam><type>string</type><parameter>nombre_archivo</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>usar_ruta_inclusion</parameter></methodparam>
      <methodparam choice="opt"><type>resource</type><parameter>contexto</parameter></methodparam>
     </methodsynopsis>
    <para>
     Funci&oacute;n id&eacute;ntica a <function>readfile</function>,
     excepto que <function>file</function> devuelve el archivo en una
     matriz. Cada elemento de la matriz corresponde a una l&iacute;nea
     en el archivo, con el salto de l&iacute;nea aun incluido. Si
     ocurre un fallo, <function>file</function> devuelve &false;.
    </para>
    <para>
     Es posible usar el par&aacute;metro opcional
     <parameter>usar_ruta_inclusion</parameter>, y definirlo como "1",
     si desea buscar por el archivo en <link
     linkend="ini.include-path">include_path</link>, tambi&eacute;n.
    </para>
    <para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
// Obtiene un archivo en una matriz. En este ejemplo usaremos HTTP
// para obtener el codigo fuente HTML de una URL.

$lineas = file('http://www.example.com/');

// Recorrer nuestra matriz, mostrar el codigo HTML como codigo fuente
// HTML, y los numeros de linea tambien.
foreach ($lineas as $linea_num => $linea) {
    echo "L&iacute;nea #<b>{$linea_num}</b> : " . htmlspecialchars($linea) . "<br />\n";
}

// Otro ejemplo, obtengames una pagina web como una cadena. Vea
// tambien file_get_contents().
$html = implode('', file('http://www.example.com/'));
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    &tip.fopen-wrapper;
    <note>
     <para>
      Cada l&iacute;nea en la matriz resultante incluye el final de
      l&iacute;nea, as&iacute; que aun necesita usar
      <function>rtrim</function> si no quiere conservar el final de
      l&iacute;nea.
     </para>
    </note>
    &note.line-endings;
    <note>
     <para>
      A partir de PHP 4.3.0, puede usar
      <function>file_get_contents</function> para devolver el
      contenido de un archivo como una cadena.
     </para>
     <para>
      En PHP 4.3.0 <function>file</function>, se volvi&oacute; una
      funci&oacute;n segura con material binario.
     </para>
    </note>
    &note.context-support;
    &warn.ssl-non-standard;
    <para>
     Vea tambi&eacute;n <function>readfile</function>,
     <function>fopen</function>, <function>fsockopen</function>,
     <function>popen</function>,
     <function>file_get_contents</function>, y
     <function>include</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
