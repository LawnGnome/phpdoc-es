<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.12 $ -->
<!-- EN-Revision: 1.22 Maintainer: lboshell Status: ready -->
<refentry xml:id="function.file-put-contents" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>file_put_contents</refname>
  <refpurpose>Escribir una cadena sobre un archivo</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>file_put_contents</methodname>
   <methodparam><type>string</type><parameter>nombre_archivo</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>datos</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>banderas</parameter></methodparam>
   <methodparam choice="opt"><type>resource</type><parameter>contexto</parameter></methodparam>
  </methodsynopsis>
  <para>
   Esta función es idéntica a llamar <function>fopen</function>,
   <function>fwrite</function>, y <function>fclose</function> sucesivamente
   para escribir datos en un archivo.
  </para>
  <para>
   Si <parameter>nombre_archivo</parameter> no existe, el archivo es creado.
   De lo contrario, el archivo existente el sobrescrito, a menos que la
   bandera <constant>FILE_APPEND</constant> sea definida.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>nombre_archivo</parameter></term>
     <listitem>
      <para>
       Ruta al archivo en donde escribir los datos
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>datos</parameter></term>
     <listitem>
      <para>
       Los datos a escribir. Puede ser un valor tipo <type>string</type>,
       <type>array</type> o un recurso <type>stream</type> (explicado
       anteriormente).
      </para>
      <para>
       Si <parameter>datos</parameter> es un recurso de tipo
       <type>stream</type>, el resto del búfer de esa secuencia será copiado
       al archivo especificado. Esto es similar al uso de
       <function>stream_copy_to_stream</function>.
      </para>
      <para>
       También es posible especificar el parámetro
       <parameter>datos</parameter> como una matriz uni-dimensional. Esto
       es equivalente a <literal>file_put_contents($nombre_archive,
       implode('', $matriz))</literal>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>banderas</parameter></term>
     <listitem>
      <para>
       El valor de <parameter>banderas</parameter> puede ser cualquier
       combinación de las siguientes banderas (con algunas restricciones),
       unidas con el operador binario OR (<literal>|</literal>).
      </para>
      <para>
       <table>
        <title>Banderas disponibles</title>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Bandera</entry>
           <entry>Descripción</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry>
            <constant>FILE_USE_INCLUDE_PATH</constant>
           </entry>
           <entry>
            Buscar por <parameter>nombre_archivo</parameter> en el
            directorio de inclusiones. Vea <link
            linkend="ini.include-path">include_path</link> para más
            información.
           </entry>
          </row>
          <row>
           <entry>
            <constant>FILE_APPEND</constant>
           </entry>
           <entry>
            Si el archivo <parameter>nombre_archivo</parameter> ya existe,
            anexar los datos al archivo en lugar de sobrescribirlo.
           </entry>
          </row>
          <row>
           <entry>
            <constant>LOCK_EX</constant>
           </entry>
           <entry>
            Adquirir un bloqueo exclusivo sobre el archivo mientras se
            procede con la escritura.
           </entry>
          </row>
          <row>
           <entry>
            <constant>FILE_TEXT</constant>
           </entry>
           <entry>
            <parameter>datos</parameter> es escrito en modo de texto.  Si la
            semántica unicode está habilitada, la codificación
            predeterminada es UTF-8. Es posible especificar una codificación
            diferente creando un contexto personalizado o modificando el
            predeterminado mediante
            <function>stream_default_encoding</function>. Esta bandera no
            puede ser usada junto con <constant>FILE_BINARY</constant>. Esta
            bandera está disponible únicamente a partir de PHP 6.
           </entry>
          </row>
          <row>
           <entry>
            <constant>FILE_BINARY</constant>
           </entry>
           <entry>
            <parameter>datos</parameter> será escrito en modo binario. Este
            es el comportamiento predeterminado y la bandera no pude ser
            usada junto con <constant>FILE_TEXT</constant>. Esta bandera
            está disponible únicamente desde PHP 6.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>contexto</parameter></term>
     <listitem>
      <para>
       Un recurso de contexto creado con
       <function>stream_context_create</function>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   La función devuelve la cantidad de bytes escritos al archivo, o &false;
   en caso de fallo.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.0.0</entry>
       <entry>
        Se agregó el soporte para contextos
       </entry>
      </row>
      <row>
       <entry>5.1.0</entry>
       <entry>
        Se agregó soporte para <constant>LOCK_EX</constant> y la habilidad
        de pasar un recurso de secuencia al parámetro
        <parameter>datos</parameter>
       </entry>
      </row>
      <row>
       <entry>6.0.0</entry>
       <entry>
        Se agregó el soporte para las banderas
        <constant>FILE_TEXT</constant> y <constant>FILE_BINARY</constant>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.bin-safe;
  &tip.fopen-wrapper;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>fopen</function></member>
    <member><function>fwrite</function></member>
    <member><function>file_get_contents</function></member>
    <member><function>stream_context_create</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
