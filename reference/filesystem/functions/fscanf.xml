<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.13 Maintainer: lboshell Status: ready -->
<!-- splitted from ./en/functions/filesystem.xml, last change in rev 1.2 -->
  <refentry id="function.fscanf">
   <refnamediv>
    <refname>fscanf</refname>
    <refpurpose>Procesa la entrada desde un archivo de acuerdo a un
    formato</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis>
      <type>mixed</type><methodname>fscanf</methodname>
      <methodparam><type>resource</type><parameter>gestor</parameter></methodparam>
      <methodparam><type>string</type><parameter>formato</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>var1</parameter></methodparam>
     </methodsynopsis>
    <para>
     La funci&oacute;n <function>fscanf</function> es similar a
     <function>sscanf</function>, pero toma su entrada desde un
     archivo asociado con <parameter>gestor</parameter> e interpreta
     la entrada de acuerdo al <parameter>formato</parameter>
     especificado, el cual es descrito en la documentaci&oacute;n de
     <function>sprintf</function>. Si s&oacute;lo se pasan dos
     par&aacute;metros a esta funci&oacute;n, los valores procesados
     ser&aacute;n devueltos como una matriz. De otro modo, si se pasan
     par&aacute;metros opcionales, la funci&oacute;n devolver&aacute;
     el n&uacute;mero de valores asignados. Los par&aacute;metros
     opcionales deben ser pasados por referencia.
    </para>
    <para>
     Cualquier espacio en blanco en la cadena de formato crea una
     correspondencia con cualquier espacio en blanco en la secuencia
     de entrada. Esto quiere decir que incluso una tabulaci&oacute;n
     <literal>\t</literal> en la cadena de formato puede coincidir con
     un caracter de espacio sencillo en la secuencia de entrada.
    </para>
    <para>
     <example>
      <title>Ejemplo de <function>fscanf</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$gestor = fopen("usuarios.txt","r");
while ($info_usuario = fscanf($gestor, "%s\t%s\t%s\n")) {
    list ($nombre, $profesion, $cod_pais) = $info_usuario;
    //... hacer algo con los valores
}
fclose($gestor);
?>
]]>
      </programlisting>
     </example>
     <example>
      <title>Contenido de usuarios.txt</title>
      <programlisting role="txt">
<![CDATA[
javier  argonauta       pe
hiroshi escultor        jp
robert  desempleado     us
luigi   florista        it
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <simpara>
      Antes de PHP 4.3.0, el m&aacute;ximo n&uacute;mero de caracteres
      le&iacute;dos desde el archivo era 512 (o hasta el primer \n, lo
      que primero ocurriera). A partir de PHP 4.3.0 se leer&aacute;n y
      analizar&aacute;n l&iacute;neas de longitudes arbitrariamente
      grandes.
     </simpara>
    </note>
    <para>
     Vea tambi&eacute;n
     <function>fread</function>, <function>fgets</function>,
     <function>fgetss</function>, <function>sscanf</function>,
     <function>printf</function>, y <function>sprintf</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
