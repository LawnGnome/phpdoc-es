<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.3 $ -->
<!-- Purpose: basic.php -->
<!-- Membership: pecl -->
<!-- EN-Revision: 1.5 Maintainer: gustavo Status: ready -->
 <reference xml:id="ref.apd" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Depurador Avanzado de PHP</title>
  <titleabbrev>APD</titleabbrev>
  <partintro>

  <section xml:id="apd.intro">
    &reftitle.intro;
    <para>
     APD (por sus siglas en ingl&eacute;s) es el Depurador Avanzado de
     PHP. Fue escrito para proporcionar la capacidad de analizar y
     depurar el c&oacute;digo PHP, as&iacute; como tambi&eacute;n
     proporcionar la capacidad de imprimir una completa
     descripci&oacute;n acerca de errores en las aplicaciones. APD
     soporta la depuraci&oacute;n interactiva, pero por omisi&oacute;n
     escribe informaci&oacute;n para localizar archivos. Adem&aacute;s
     ofrece registros basados en eventos de tal manera que los
     diversos niveles de informaci&oacute;n (incluyendo llamados a
     funciones, argumentos pasados, int&eacute;rvalos de tiempo entre
     cambios en un documento, etc.)  puedan ser activados o
     desactivados por scripts individuales.
    <caution>
    <para>
     APD es una extensi&oacute;n Zend, modifica la manera interna en
     la que PHP maneja los llamados a funciones, y en este sentido
     pudiera o no pudiera ser compatible con otras extensiones Zend
     (por ejemplo Zend Optimizer).
    </para>
    </caution>
    </para>
   </section>

   &reference.apd.configure;

   &reference.apd.ini;

   <section xml:id="apd.resources">
    &reftitle.resources;
    &no.resource;
   </section>

   <section xml:id="apd.constants">
    &reftitle.constants;
    &no.constants;
   </section>

   <section xml:id="apd.examples">
     <title>C&oacute;mo usar PHP-APD en sus scripts</title>
     <procedure>
     <step>
     <para>
      En la primera l&iacute;nea de su script PHP, ejecute la
      funci&oacute;n apd_set_pprof_trace() para iniciar el
      an&aacute;lisis:
     </para>
     <para>
      <programlisting role="php">
<![CDATA[
apd_set_pprof_trace();
]]>
      </programlisting>
     </para>
     <para>
     Puede insertar la l&iacute;nea en cualquier parte de su script,
     pero si no inicia el an&aacute;lisis al comienzo de su script
     descarta el examen de informaci&oacute;n que de otra manera
     pudiera llevarlo a un atascamiento en el desempe&ntilde;o.
     </para>
     </step>
     <step>
     <para>
      Ahora ejecute su script. La salida ser&aacute; escrita en
      <filename>apd.dumpdir/pprof_pid.ext</filename>.
      <tip>
      <para>
       Si est&aacute; ejecutando la versi&oacute;n CGI de PHP,
       necesitar&aacute; agregar la opci&oacute;n '-e' para habilitar
       una ampliaci&oacute;n de la informaci&oacute;n con la finalidad
       de que apd funcione apropiadamente. Por ejemplo: <userinput>php
       -e -f script.php</userinput>
      </para>
      </tip>
     </para>

     </step>
     <step>
     <para>
      Para mostrar la informaci&oacute;n analizada con formato, emita
      el comando <command>pprofp</command> con las opciones de
      ordenamiento y visualizaci&oacute;n de su preferencia. La salida
      con formato ser&aacute; algo como:
      <screen>
<![CDATA[
bash-2.05b$ pprofp -R /tmp/pprof.22141.0

Trace for /home/dan/testapd.php
Total Elapsed Time = 0.00
Total System Time  = 0.00
Total User Time    = 0.00


Real         User        System             secs/    cumm
%Time (excl/cumm)  (excl/cumm)  (excl/cumm) Calls    call    s/call  Memory Usage Name
--------------------------------------------------------------------------------------
100.0 0.00 0.00  0.00 0.00  0.00 0.00     1  0.0000   0.0009            0 main
56.9 0.00 0.00  0.00 0.00  0.00 0.00     1  0.0005   0.0005            0 apd_set_pprof_trace
28.0 0.00 0.00  0.00 0.00  0.00 0.00    10  0.0000   0.0000            0 preg_replace
14.3 0.00 0.00  0.00 0.00  0.00 0.00    10  0.0000   0.0000            0 str_replace
]]>
      </screen>
     </para>
     <para>
     La opci&oacute;n -R usada en este ejemplo ordena la tabla
     analizada por la cantidad de tiempo real que el script
     tard&oacute; ejecutando una funci&oacute;n dada.  La columna
     "cumm call" revela cu&aacute;ntas veces fue llamada cada
     funci&oacute;n, y la columna "s/call" revela cu&aacute;ntos
     segundos fueron necesarios para cada funci&oacute;n, en promedio.
     </para>
     </step>
     <step>
     <para>
     Para generar una estructura de llamados a un archivo que pueda
     importar a la aplicaci&oacute;n de an&aacute;lisis KCacheGrind,
     emita el comando <command>pprof2calltree</command>.
     </para>
     </step>
     </procedure>
    </section>

    <section xml:id="apd.contact">
     <title>Informaci&oacute;n de contacto</title>
     <para>
      Si tiene comentarios, soluciones a fallos, mejoras o quiere
      ayudar a desarrollar esta bestia, puede enviar un correo a
      <link url="mailto:&email.apd;">&email.apd;</link>. Cualquier
      ayuda es bien recibida.
     </para>
    </section>
  </partintro>

&reference.apd.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

