<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 308986 Maintainer: seros Status: ready -->

<refentry xml:id="function.cubrid-execute" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>cubrid_execute</refname>
  <refpurpose>Ejecutar una sentencia SQL preparada</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>cubrid_execute</methodname>
   <methodparam><type>resource</type><parameter>conn_identifier</parameter></methodparam>  
   <methodparam><type>string</type><parameter>SQL</parameter></methodparam>  
   <methodparam choice="opt"><type>int</type><parameter>option</parameter></methodparam>  
  </methodsynopsis>
  <methodsynopsis>
   <type>bool</type><methodname>cubrid_execute</methodname>
   <methodparam><type>resource</type><parameter>request_identifier</parameter></methodparam>  
   <methodparam choice="opt"><type>int</type><parameter>option</parameter></methodparam>  
  </methodsynopsis>
  <para>
   La función <function>cubrid_execute</function> se usa para ejecutar
   la sentencia SQL dada. Ejecuta la consulta usando
   <parameter>conn_identifier</parameter> y SQL, y luego devuelve el
   gestor de solicitud creado. Se usa para la simple ejecución de la consulta,
   donde el parámetro de enlace no es necesario. Además, la 
   función <function>cubrid_execute</function> se usa para ejecutar la
   sentencia preparada por medio de <function>cubrid_prepare</function> y
   <function>cubrid_bind</function>. En este momento se necesitan especificar
   los argumentos <parameter>request_identifier</parameter> y
   <parameter>option</parameter>.
  </para>
  <para>
   Se puede usar el argumento <parameter>option</parameter> para indicar si
   recibir el oid de la fila después de la ejecución, y si ejecutar
   la consulta en modo asíncrono. Se puede utilizar estableciendo
   CUBRID_INCLUDE_OID y CUBRID_ASYNC usando el operador a nivle de bit OR. Si
   ambas variables no se dan explícitamente, no se seleccionan por omisión.
  </para>
  <para>
   Si el primer argumento de la función es <parameter>request_identifier</parameter> para
   ejecutar la función <function>cubrid_prepare</function>, se puede
   especificar una opción, CUBRID_ASYNC sólamente.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>conn_identifier</parameter></term>
     <listitem><para>Identificador de conexión.</para></listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>SQL</parameter></term>
     <listitem><para>SQL a ser ejecutado.</para></listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>option</parameter></term>
     <listitem><para>La opción de ejecución de la consulta CUBRID_INCLUDE_OID, CUBRID_ASYNC.</para></listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>request_identifier</parameter></term>
     <listitem><para>Identificador de <function>cubrid_prepare</function>.</para></listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gestor de solicitud, cuando el proceso tiene éxito y el primer parámetro es
   conn_identifier; &true;, cuando el proceso tiene éxito y el primer argumento es
   request_identifier. 
  </para>
  <para>
   &false;, cuando el proceso no tiene éxito.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo de <function>cubrid_execute</function></title>
   <programlisting role="php">
<![CDATA[
<?php
$conn = cubrid_connect("localhost", 33000, "demodb");

$result = cubrid_execute($conn, "SELECT code FROM event WHERE name='100m Butterfly' and gender='M'", CUBRID_ASYNC);
$row = cubrid_fetch_array($result, CUBRID_ASSOC);
$event_code = $row["code"];

cubrid_close_request($result);

$history_req = cubrid_prepare($conn, "SELECT * FROM history WHERE event_code=?");
cubrid_bind($history_req, 1, $event_code, "number");
cubrid_execute($history_req);

printf("%-20s %-9s %-10s %-5s\n", "athlete", "host_year", "score", "unit");
while ($row = cubrid_fetch_array($history_req, CUBRID_ASSOC)) {
    printf("%-20s %-9s %-10s %-5s\n", 
        $row["athlete"], $row["host_year"], $row["score"], $row["unit"]);
}

cubrid_close_request($history_req);

cubrid_disconnect($conn);
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
athlete              host_year score      unit 
Phelps Michael       2004      51.25      time 
]]>
   </screen>
  </example>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>cubrid_close_request</function></member>
    <member><function>cubrid_commit</function></member>
    <member><function>cubrid_rollback</function></member>
    <member><function>cubrid_prepare</function></member>
    <member><function>cubrid_bind</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
