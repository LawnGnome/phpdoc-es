<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 291936 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<chapter xml:id="oci8.connection" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Manejo de conexiones</title>
 <section>
  <title>Funciones de conexión</title>
  <para>
   La extenisón OCI8 proporciona tres funciones diferentes para
   conectarse a Oracle. La función de conexión estándar
   es <function>oci_connect</function>. Ésta crea una conexión a
   una base de datos de Oracle y devuelve un recurso utilizado por las llamadas
   subsiguientes a dicha base de datos.
  </para>
  <para>
   Conectarse a un servidor Oracle es una operación razonablemente cara
   en términos del tiempo que toma en completarse.
   La función <function>oci_pconnect</function> utiliza una caché persistetne
   de conexiones que puede ser reutilizada a través de diferentes peticiones de
   scripts. Esto significa que una conexión únicamente tendrá carga adicional normalmente
   una vez por cada proceso de PHP (o subproceso de Apache).
  </para>
  <para>
   Si una aplicación se conecta a Oracle usando un conjunto diferente de
   credenciales para cada usuario de la web, la caché persistente empleada por
   <function>oci_pconnect</function> no será muy útila ya que el
   númoer de usuarios concurrentes aumentará, hasta el punto donde podría
   empezar a afectar negativamente al rendimiendo global del servidor de Oracle
   debido a que mantiene demasiadas conexiones inactivas. Si la
   aplicación está estructurada de esta manera, se recomienda
   ajustar la aplicación a través de los ajustes de configuración
   <link linkend="ini.oci8.max-persistent">oci8.max_persistent</link>
   y <link linkend="ini.oci8.persistent-timeout">oci8.persistent_timeout</link>
   (éstos otorgan contron sobre el tamaño y el tiempo de vida
   de la caché de conexiones persistentes), usar Oracle 11g Database
   Resident Connection Pooling, o usar
   <function>oci_connect</function> en su lugar.
  </para>
  <para>
   <function>oci_connect</function>
   y <function>oci_pconnect</function> emplean una caché de conexiones; si
   mútiples llamadas a
   <function>oci_connect</function> usan los mismos parámetros en un script
   dado, la segunda y subsiguientes llamadas devolverán el gestor de conexión
   existente. La caché usada por
   <function>oci_connect</function> se limpia al final de la ejecución
   del script, o cuando se cierra explícitamente el gestor de conexión. La
   función <function>oci_pconnect</function> tiene un comportamiento similar,
   aunque su caché se mantiene de forma separada y sobrevive entre
   peticiones HTTP.  
  </para>
  <para>
   Esta característica de almacenamiento en caché significa que dos gestores no están transaccionalmente
   aislados (de hecho, son el mismo gestor de conexión, por lo que no existe
   aislamiento de ningún tipo). Si la aplicación necesita dos conexiones transaccionalmente
   aisladas por separado, se ha de usar
   <function>oci_new_connect</function>.
  </para>
  <para>
   La caché de <function>oci_pconnect</function> es limpiada y cualquier
   conexión a bases de datos cerrada cuando finaliza el proceso de PHP, por lo que
   el uso efectivo de conexiones persistentes reqiere que PHP sea un
   módulo de Apache o se use con FGCI, o similar. Las conexiones persistentes
   no tendrán ningún beneficio sobre <function>oci_connect</function>
   cuando PHP se use con CGI o mediante la línea de comandos.
  </para>
  <para>
   La función <function>oci_new_connect</function> siempre crea una
   nueva conexión al servidor de Oracle, independientemente de que existan
   otras conexiones. Las aplicaciones web con mucho tráfico
   deberían evitar el uso de
   <function>oci_new_connect</function>, especialmente las secciones más concurridas de
   la aplicación.
  </para>
 </section>
 <section>
  <title>Agrupamiento de conexiones DRCP</title>
  <para>
   PHP 5.3 (PECL OCI8 1.3) soporta Oracle 11g Database Resident
   Connection Pooling (DRCP). DRCP permite el uso más eficiente de la memoria
   de la máquina donde reside la base de datos y proporciona una alta escalabilidad. Se
   requiren cambios mínimos, o ninguno, en la aplicación para usar DRCP.
  </para>
  <para>
   DRCP es apropiado para aplicaciones que se conectan usando pocos esquemas de
   bases de datos y mantienen abiertas dichas conexiones durante un corto periodo de
   tiempo. Las demás aplicaciones deberían usar los procesos de servidor de bases de datos
   predeterminado <literal>Dedicado</literal> de Oracle, o
   usar servidores <literal>Compartidos</literal>.
  </para>
  <para>
   DRCP beneficia a las tres funciones de conexión, pero proporciona la mayor
   escalabilidad cuando las conexiones se crean
   con <function>oci_pconnect</function>.
  </para>
  <para>
   Para que DRCP esté disponible en OCI8, las bibliotecas cliente de Oracle usadas por
   PHP y la versión de Oracle Database deben ser 11g.
  </para>
  <para>
   La documentación de DRCP se encuentra en varios manuales de Oracle. Por
   ejemplo,
   véase <link xlink:href="&url.oracle.drcp.configure;">Configurar el
   agrupamiento de conexiones residentes de bases de datos</link> en la documentación de
   Oracle para obtner información de su uso.
   Un <link xlink:href="&url.oracle.drcp.whitepaper;">Libro blanco
   de DRCP</link> contiene información antecedentes sobre DRCP.
  </para>
  <para>
   Para usar DRCP, construya PHP con la extensión OCI8 1.3 y las bibliotecas de
   Oracle 11g, y luego siga estos pasos:
  </para>
  <para>
   <itemizedlist>
    <listitem>
     <para>
      Como administrador de bases de datos privilegiado, use un programa como
      SQL*Plus para iniciar el agrupamiento de conexiones en la base de datos:
     </para>
     <para>
      <informalexample>
       <screen>
<![CDATA[
    SQL> execute dbms_connection_pool.start_pool;
]]>
       </screen>
      </informalexample>
     </para>
    </listitem>
    <listitem>
     <para>
      Opcionalmente
      use <literal>dbms_connection_pool.alter_param()</literal> para
      configurar los ajustes de DRCP. La configuración de la agrupación actual se puede
      consultar desde la vista <literal>DBA_CPOOL_INFO</literal>.
     </para>
    </listitem>
    <listitem>
     <para>
      Actualice las cadenas de conexión usadas. Para las aplicciones de PHP que
      actualmente se conecten usando un Nombre de Conexión de Red
      como <literal>MYDB</literal>:
     </para>
     <para>
      <informalexample>
       <screen>
<![CDATA[
    $c = oci_pconnect("mi_usuario", "mi_contraseña", "MYDB");
]]>
       </screen>
      </informalexample>
     </para>
     <para>
      modifique el fichero tnsnames.ora y añada
      una cláusula <literal>(SERVER=POOLED)</literal>, por ejemplo:
     </para>
     <para>
      <informalexample>
       <screen>
<![CDATA[
    MYDB = (DESCRIPTION=(ADDRESS=(PROTOCOL=tcp) (HOST=myhost.dom.com)
           (PORT=1521))(CONNECT_DATA=(SERVICE_NAME=sales)
           (SERVER=POOLED)))
]]>
       </screen>
      </informalexample>
     </para>
     <para>
      Alternativamente, modifique la sintaxis de Easy Connect en PHP y añada
      <literal>:POOLED</literal> después del nombre del servidor:
     </para>
     <para>
      <informalexample>
       <screen>
<![CDATA[
    $c = oci_pconnect("mi_usuario", "mi_contraseña", "mi_host.dom.com:1521/sales:POOLED");
]]>
       </screen>
      </informalexample>
     </para>
    </listitem>
    <listitem>
     <para>
      Edite &php.ini; y elija un nombre de clase de conexión. Este nombre
      señala una división lógica de la agrupación de conexiones y se puede
      usar para aislar la agrupación para diferentes aplicaciones. Cualquier aplicación
      de PHP con el mismo nombre de usuario y valor de clase de conexión
      podrá compartir conexiones de la agrupación, proporcionando una mayor
      escalabilidad.
     </para>
     <para>
      <informalexample>
       <screen>
<![CDATA[
    oci8.connection_class = "NOMBRE_DE_MI_APLICACIÓN"
]]>
       </screen>
      </informalexample>
     </para>
    </listitem>
    <listitem>
     <para>
      Ejecute la aplicación, conectándose a la base de datos 11g.
     </para>
    </listitem>
   </itemizedlist>
  </para>
  <note>
   <para>
    Las aplicaciones que usen Oracle 10g que requieran el rendimiento de
    conexiones persitentes, pueden reducir la cantidad de memoria que el servidor de
    bases de datos use utilizando sevidores <literal>Compartidos</literal> de Oracle
    (anteriormente conocidos como Servidores de Multisubprocesos). Consulte la documentación
    de Oracle para más información.
   </para>
  </note>
 </section>
 <section>
  <title>Recomendacines para DRCP y limitaciones conocidas</title>
  <para>
   Cmambiar una contraseña en conexiones DRCP fallará con el error
   <emphasis>ORA-56609: Usage not supported with DRCP</emphasis>.
   Ésta es una restricción documentada de Oracle Database 11g.
  </para>
  <para>
   Con la extensión OCI8 1.3, las conexiones persistentas ahora pueden ser
   cerradas por el usuario, permitiendo mayor control sobre el uso de recursos
   de conexión. Las conexiones persistentes ahora también serán cerradas
   automáticamente cuando no haya variables de PHP que hagan referncia a ellas, com
   al final del ámbito de una función de usuario de PHP. Esto revertira
   cualquier transacción no consignada. Estos cambios a las conexiones
   persistentes hacen que se comporten de forma similar a las conexiones no
   persistente, simplificando la interfaz, permitiendo así mayor
   consistencia y predictabilidad a las aplicaciones.
   Use <link linkend="ini.oci8.old-oci-close-semantics">oci8.old_oci_close_semantics</link>
   establecido a
   <emphasis>On</emphasis> para conservar el comportamiento histórico.
  </para>
  <para>
   Si Oracle Database es la versión 11.1.0.6, se deben aplicar los parches de las
   bases de datos de Oracle para el error 6474441 de Oracle para usar DRCP.
   Sin este parche, los errores como <emphasis>ORA-01000: maximum
   open cursors exceeded</emphasis>, <emphasis>ORA-01001 invalid
   cursor</emphasis> o <emphasis>ORA-01002 fetch out of
   sequence</emphasis> podrían ocurrir. Este error fue corregido in Oracle
   11.1.0.7 en adelante.
  </para>
  <para>
   Si no se puede aplicar el parche Oracle 11.1.0.6 database patch cannot be applied, one of the
   following three workarounds can be used instead:
  </para>
  <para>
   <itemizedlist>
    <listitem>
     <simpara>
      Connect using Oracle <literal>Dedicated</literal>
      or <literal>Shared</literal> servers instead of DRCP.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Set PHP's <link linkend="ini.oci8.statement-cache-size">oci8.statement_cache_size</link>
      to 0.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Set an event in the database initialization parameter file:
      <emphasis>event="56699 trace name context forever, level 128"</emphasis>.
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   Oracle Database 11.1.0.7 and the Oracle Database 11.1.0.6 patch for
   Oracle bug 6474441 allow PHP applications with DRCP connection to
   use a database <literal>LOGON</literal> trigger to set session
   properties at the time of session creation.  Examples of such
   settings are the NLS language and the date format.
  </para>
  <para>
   If the Oracle 11.1.0.6 database patch cannot be applied, one of the
   following workarounds can be used instead
   of using <literal>LOGON</literal> triggers:
  </para>
  <para>
   <itemizedlist>
    <listitem>
     <simpara>
      After logon, explicitly set the session properties using PHP
      application code.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Connect using Oracle <literal>Dedicated</literal>
      or <literal>Shared</literal> servers instead of DRCP.
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
  <para>
   The automatic re-establishment of PHP persistent connections after
   an Apache or FGCI process respawns means <literal>LOGON</literal>
   triggers in PHP are only recommended for setting session attributes
   and not for per-application user connection requests.  This is even
   more so with DRCP due to the automatic pool sizing and with the
   way <literal>LOGON</literal> triggers fire with DRCP
   authentication.
  </para>
 </section>
 <section>
  <title>Fast Application Notification (FAN) Support</title>
  <para>
   FAN support gives fast connection failover, a high availability
   feature.  This allows PHP OCI8 scripts to be notified when a
   database machine or database instance becomes unavailable.  Without
   FAN, OCI8 can hang until a TCP timeout occurs and an error is
   returned, which might be several minutes.  Enabling FAN in OCI8 can
   allow applications to detect errors and re-connect to an available
   database instance without the web user being aware of an outage.
  </para>
  <para>
   FAN support is available when the Oracle client libraries that PHP
   links with and the Oracle Database are either version 10gR2 or 11g.
  </para>
  <para>
   FAN benefits users of Oracle's clustering technology (RAC) because
   connections to surviving database instances can be immediately
   made.  Users of Oracle's Data Guard with a broker will see the FAN
   events generated when the standby database goes online.  Standalone
   databases will send FAN events when the database restarts.
  </para>
  <para>
   For active connections, when a machine or database instance becomes
   unavailable, a connection failure error will be returned by the
   OCI8 extension function currently being called.  On a subsequent
   PHP script re-connect, a connection to a surviving database
   instance will be established.  The OCI8 extension also
   transparently cleans up any idle connections affected by a database
   machine or instance failure so PHP connect calls will establish a
   fresh connection without the script being aware of any service
   disruption.
  </para>
  <para>
   When <link linkend="ini.oci8.events">oci8.events</link>
   is <literal>On</literal>, it is suggested to
   set <link linkend="ini.oci8.ping-interval">oci8.ping_interval</link>
   to -1 to disable pinging, since enabling FAN events provide
   pro-active connection management of idle connections made invalid
   by a service disruption.
  </para>
  <para>
   To enable FAN support in PHP, build PHP with Oracle 10gR2 or 11g
   libraries and then follow these steps:
  </para>
  <para>
   <itemizedlist>
    <listitem>
     <simpara>
      As a privileged database administrator, use a program like
      SQL*Plus to enable the database service to post FAN events, for
      example:
     </simpara>
     <para>
      <informalexample>
       <screen>
<![CDATA[
    SQL> execute dbms_service.modify_service(
                   SERVICE_NAME        => 'sales',
                   AQ_HA_NOTIFICATIONS => TRUE);
]]>
       </screen>
      </informalexample>
     </para>
    </listitem>
    <listitem>
     <simpara>
      Edit php.ini and add
     </simpara>
     <para>
      <informalexample>
       <screen>
<![CDATA[
    oci8.events = On
]]>
       </screen>
      </informalexample>
     </para>
    </listitem>
    <listitem>
     <simpara>
      If the application does not already handle OCI8 error
      conditions, modify it to detect failures and take appropriate
      action.  This may include re-connecting and re-executing
      statements.
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Run the application, connecting to an Oracle 10gR2 or 11g database.
     </simpara>
    </listitem>
   </itemizedlist>
  </para>
 </section>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

