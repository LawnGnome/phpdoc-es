<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.5 $ -->
<!-- EN-Revision: 1.11 Maintainer: lboshell Status: ready -->
<refentry xml:id="function.ifx-query" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>ifx_query</refname>
  <refpurpose>Enviar una consulta Informix</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>resource</type><methodname>ifx_query</methodname>
   <methodparam><type>string</type><parameter>consulta</parameter></methodparam>
   <methodparam><type>resource</type><parameter>id_enlace</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>tipo_cursor</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>matriz_id_blob</parameter></methodparam>
  </methodsynopsis>
  <para>
   Envía una <parameter>consulta</parameter> a la base de datos actualmente
   activo en el servidor asociado con el identificador de enlace
   especificado.
  </para>
  <para>
   Para consultas "tipo-select" un cursor es declarado y abierto. Las
   consulta no-select son de "ejecución inmediata".
  </para>
  <para>
   Para cualquier tipo de consulta, el número (estimado o real) de filas
   afectadas es almacenado para su consulta mediante
   <function>ifx_affected_rows</function>.
  </para>
  <para>
   Si el contenido de la columna TEXT (o BYTE) lo permite, es posible usar
   también <literal>ifx_textasvarchar(1)</literal> y
   <literal>ifx_byteasvarchar(1)</literal>. Esto le permite tratar columnas
   TEXT (o BYTE) como si fueran columnas normales (pero largas) de tipo
   VARCHAR para consultas select, y no necesita complicarse con id's de
   blob.
  </para>
  <para>
   Con <literal>ifx_textasvarchar(0)</literal> o
   <literal>ifx_byteasvarchar(0)</literal> (la situación predeterminada),
   las consultas select devolverán columnas BLOB como id's blob (valores
   enteros). Puede obtener el valor del blob como una cadena o archivo con
   las funciones blob (vea más adelante).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>consulta</parameter></term>
     <listitem>
      <para>
       La cadena de consulta.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>id_enlace</parameter></term>
     <listitem>
      <para>
       El identificador de enlace.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>tipo_cursor</parameter></term>
     <listitem>
      <para>
       Este parámetro opcional le permite hacer de éste un cursor
       <literal>scroll</literal> y/o <literal>hold</literal>. Es una máscara
       de bits y puede contener el valor <constant>IFX_SCROLL</constant>,
       <constant>IFX_HOLD</constant>, o ambos unidos con el operador lógico
       OR. Si este parámetro es omitido, el cursor es un cursor secuencial
       corriente.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>matriz_id_blob</parameter></term>
     <listitem>
      <para>
       Si tiene columnas BLOB (BYTE o TEXT) en la consulta, puede agregar un
       parámetro <parameter>matriz_id_blob</parameter> que contenga los "ids
       blob" correspondientes, y debería reemplazar esas columnas con un "?"
       en el texto de la consulta.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un identificador de resultado Informix válido en caso de éxito,
   o &false; en caso de errores.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>
     Mostrar todas las filas de la tabla "ordenes" como una tabla HTML
    </title>
    <programlisting role="php">
<![CDATA[
<?php
ifx_textasvarchar(1);      // usar "modo de texto" para blobs
$id_res = ifx_query("select * from ordenes", $id_con);
if (! $id_res) {
    printf("No se pueden seleccionar órdenes: %s\n<br />%s<br />\n", ifx_error());
    ifx_errormsg();
    die;
}
ifx_htmltbl_result($id_res, "border=\"1\"");
ifx_free_result($id_res);
?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Insertar algunos valores en la tabla "catalogo"</title>
    <programlisting role="php">
<![CDATA[
<?php

// crear id's blob para una columna byte y text
$textid = ifx_create_blob(0, 0, "Text column in memory");
$byteid = ifx_create_blob(1, 0, "Byte column in memory");

// almacenar id's blob en una matriz id_blob
$matriz_id_blob[] = $textid;
$matriz_id_blob[] = $byteid;

// ejecutar consulta
$consulta = "insert into catalogo (num_bodega, cod_manu, " .
         "descr_cat,imagen_cat) values(1,'HRO',?,?)";
$id_res = ifx_query($consulta, $id_con, $matriz_id_blob);
if (! $id_res) {
    /* ... error ... */
}

// liberar el id de resultado
ifx_free_result($id_res);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>ifx_connect</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
