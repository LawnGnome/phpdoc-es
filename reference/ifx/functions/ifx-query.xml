<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./es/functions/ifx.xml, last change in rev 1.1 -->
<!-- last change to 'ifx-query' in en/ tree in rev 1.2 -->
  <refentry id="function.ifx-query">
   <refnamediv>
    <refname>ifx_query</refname>
    <refpurpose>Env&iacute;a una consulta a Informix</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis>
     <type>int</type><methodname>ifx_query</methodname>
     <methodparam><type>string</type><parameter>query</parameter></methodparam>
     <methodparam choice="opt"><type>int</type><parameter>link_identifier
                   </parameter></methodparam>
     <methodparam choice="opt"><type>int</type><parameter>cursor_type
                   </parameter></methodparam>
     <methodparam choice="opt"><type>mixed</type><parameter>blobidarray
                   </parameter></methodparam>
     </methodsynopsis>
    <para>
     Devuelve un identificador positivo de resultado si tuvo &eacute;xito, &false; en
     otro caso.
    </para><para>
     Un entero (integer) "result_id" usado por otras funciones para obtener el resultado
     de la consulta. Es definido "affected_rows" (registros procesados) y se puede obtener
     mediante la funci&oacute;n <function>ifx_affected_rows</function>.
    </para><para>
     <function>ifx_query</function> env&iacute;a una consulta a la base de datos activa
     actualmente en el servidor, la cual est&aacute; representada por el identificador de
     enlace especificado (link_identifier). Si el identificador no es definido, el &uacute;ltimo
     enlace abierto es asumido. Si el enlace no se encuentra abierto,
     <function>ifx_connect</function> es llamado y utilizado.
    </para><para>
     Ejecuta una consulta (<parameter>query</parameter>) sobre una conexi&oacute;n
     (<parameter>link_identifier</parameter>). Un cursor es definido y abierto
     para las consultas de selecci&oacute;n. El par&aacute;metro opcional tipo de cursor
     (<parameter>cursor_type</parameter>) te permite que sea un cursor de tipo
     "scroll" y/o "hold". Es una m&aacute;scara y puede ser IFX_SCROLL, IFX_HOLD o ambos.
     Las consultas que no son de selecci&oacute;n son ejecutadas inmediatamente.
    </para><para>
     Para cualquier tipo de consulta el n&uacute;mero (estimado o real) de registros procesados
     es guardo y se puede obtener mediante <function>ifx_affected_rows</function>.
    </para><para>
     Si tienes columnas BLOB (BYTE o TEXT) en una consulta de actualizaci&oacute;n, puedes
     a&ntilde;adir un par&aacute;metro <parameter>blobidarray</parameter> conteniendo los
     identificadores de blob y sustituir los valores de esas columnas por una "?"
     en el texto de la consulta.
    </para><para>
     Si el contenido de la columna de tipo TEXT (o BYTE) lo permite, tambi&eacute;n puedes
     usar "ifx_textasvarchar(1)" y "ifx_byteasvarchar(1)". Esto supone manejar
     columnas de tipo TEXT (o BYTE) como si fueran columnas normales de tipo VARCHAR
     (pero teniendo en cuenta que tendr&aacute;n un mayor tama&ntilde;o que el habitual), para
     consultas de selecci&oacute;n y no necesitas preocuparte por los identificadores de blob.
    </para><para>
     La opci&oacute;n por defecto ifx_textasvarchar(0) o ifx_byteasvarchar(0) devuelve
     identificadores de blob (valores enteros) para las consultas de selecci&oacute;n. Puedes
     obtener el contenido del blob como una cadena o un fichero con las funciones para
     blob (ver m&aacute;s adelante).
    </para><para>
     Examina tambi&eacute;n:
     <function>ifx_connect</function>.
     <example>
      <title>Mostrar todos los registros de la tabla "orders" como una tabla html</title>
      <programlisting role="php3">
ifx_textasvarchar(1);      // usa "modo texto" para blobs
$res_id = ifx_query("select * from orders", $conn_id);
if (! $res_id) {
    printf("Can't select orders : %s\n&lt;br>%s&lt;br>\n", ifx_error());
    ifx_errormsg();
    die;
}
ifx_htmltbl_result($res_id, "border=\"1\"");
ifx_free_result($res_id);
      </programlisting>
     </example>
     <example>
      <title>Inserta valores en la tabla "catalog"</title>
      <programlisting role="php3">
                      // crea identificadores de blob para una columna de tipo byte y otra text
$textid = ifx_create_blob(0, 0, "Text column in memory");
$byteid = ifx_create_blob(1, 0, "Byte column in memory");
                      // almacena los identificadores de blob en un array llamado blobid
$blobidarray[] = $textid;
$blobidarray[] = $byteid;
                      // lanza la consulta
$query = "insert into catalog (stock_num, manu_code, " .
         "cat_descr,cat_picture) values(1,'HRO',?,?)";
$res_id = ifx_query($query, $conn_id, $blobidarray);
if (! $res_id) {
  ... error ...
}
                     // libera el resultado
ifx_free_result($res_id);
      </programlisting>
     </example></para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
