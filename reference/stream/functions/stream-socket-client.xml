<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: n/a Maintainer: lboshell Status: ready -->
  <refentry xml:id="function.stream-socket-client" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>stream_socket_client</refname>
    <refpurpose>
     Abrir una conexión de socket de dominio de Internet o Unix
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
     <methodsynopsis>
      <type>resource</type><methodname>stream_socket_client</methodname>
      <methodparam><type>string</type><parameter>socket_remoto</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter role="reference">errno</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter role="reference">errstr</parameter></methodparam>
      <methodparam choice="opt"><type>float</type><parameter>tiempo_espera</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>banderas</parameter></methodparam>
      <methodparam choice="opt"><type>resource</type><parameter>contexto</parameter></methodparam>
     </methodsynopsis>
    <para>
     Inicia una conexión secuenciada o tipo datagrama al destino
     especificado por <parameter>socket_remoto</parameter>. El tipo de
     socket creado es determinado por el transporte especificado usando el
     formato de URL estándar: <literal>transporte://destino</literal>. Para
     sockets de dominio de Internet (AF_INET) tales como TCP y UDP, la
     porción <literal>destino</literal> del parámetro
     <parameter>socket_remoto</parameter> debe consistir de un nombre de
     host o dirección IP seguido de un signo de dos puntos y un número de
     puerto. Para sockets de dominio Unix, la porción
     <parameter>destino</parameter> debe apuntar al archivo de socket en el
     sistema de archivos.

     El <parameter>tiempo_espera</parameter> opcional puede ser usado para
     establecer un tiempo de espera máximo en segundos para el llamado de
     conexión del sistema.

     <parameter>banderas</parameter> es un campo de máscara de bits que
     puede ser definido como una combinación de banderas de conexión.
     Actualmente, las banderas de conexión disponibles están limitadas a
     <constant>STREAM_CLIENT_CONNECT</constant> (predeterminada),
     <constant>STREAM_CLIENT_ASYNC_CONNECT</constant> y
     <constant>STREAM_CLIENT_PERSISTENT</constant>.
    </para>
    <note>
     <simpara>
      Si necesita establecer un tiempo de espera para la lectura/escritura
      de datos sobre el socket, use <function>stream_set_timeout</function>,
      ya que el parámetro <parameter>tiempo_espera</parameter> de
      <function>stream_socket_client</function> sólo se aplica cuando se
      establece la conexión con el socket.
     </simpara>
    </note>
    <note>
     <simpara>
      El parámetro de tiempo de espera solo se aplica si no está intentando
      realizar una conexión asincrónica.
     </simpara>
    </note>
    <para>
     <function>stream_socket_client</function> devuelve un recurso de
     secuencia que puede ser usado junto con las otras funciones de archivos
     (tales como <function>fgets</function>, <function>fgetss</function>,
     <function>fwrite</function>, <function>fclose</function>, y
     <function>feof</function>).
    </para>
    <para>
     Si la llamada falla, devolverá &false; y si los argumentos opcionales
     <parameter>errno</parameter> y <parameter>errstr</parameter> están
     presentes, éstos serán definidos de modo tal que indiquen el error de
     nivel de sistema actual que ocurrió en el llamado de nivel de sistema
     <literal>connect()</literal>. Si el valor devuelto en
     <parameter>errno</parameter> es <literal>0</literal> y la función
     devolvió &false;, es un indicio de que el error ocurrió antes del
     llamado a <literal>connect()</literal>. Esto es por lo general debido a
     un problema con la inicialización del socket. Note que los argumentos
     <parameter>errno</parameter> y <parameter>errstr</parameter> serán
     siempre pasados por referencia.
    </para>
    <para>
     Dependiendo del entorno, el dominio Unix o el tiempo de espera de
     conexión opcional pueden no estar disponibles. Una lista de transportes
     disponibles puede ser recuperada usando
     <function>stream_get_transports</function>. Vea <xref
     linkend="transports"/> para consultar una lista de transportes
     incorporados.
    </para>
    <para>
     La secuencia será abierta de forma predeterminada en modo de bloqueo.
     Puede modificarla a modo de no-bloqueo usando
     <function>stream_set_blocking</function>.
     <example>
      <title>Ejemplo de <function>stream_socket_client</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$da = stream_socket_client("tcp://www.example.com:80", $errno, $errstr, 30);
if (!$da) {
    echo "$errstr ($errno)<br />\n";
} else {
    fwrite($da, "GET / HTTP/1.0\r\nHost: www.example.com\r\nAccept: */*\r\n\r\n");
    while (!feof($da)) {
        echo fgets($da, 1024);
    }
    fclose($da);
}
?>
]]>
      </programlisting>
     </example>
     El siguiente ejemplo muestra cómo recuperar la fecha y hora desde el
     servicio UDP "daytime" (puerto 13) en su máquina local.
     <example>
      <title>Uso de una conexión UDP</title>
      <programlisting role="php">
<![CDATA[
<?php
$da = stream_socket_client("udp://127.0.0.1:13", $errno, $errstr);
if (!$da) {
    echo "ERROR: $errno - $errstr<br />\n";
} else {
    fwrite($da, "\n");
    echo fread($da, 26);
    fclose($da);
}
?>
]]>
      </programlisting>
     </example>
     <warning>
      <simpara>
       Los sockets UDP parecerán haber sido abiertos sin error en ocasiones,
       incluso si el host remoto no ha podido ser contactado. El error solo
       se hará aparente cuando lea o escriba datos desde/hacia el socket. La
       razón de esto es que UDP es un protocolo "sin conexión", lo que
       quiere decir que el sistema operativo no intenta establecer un enlace
       para el socket hasta que realmente necesita enviar o recibir datos.
      </simpara>
     </warning>
    </para>
    &ipv6.brackets;
    <para>
     Vea también <function>stream_socket_server</function>,
     <function>stream_set_blocking</function>,
     <function>stream_set_timeout</function>,
     <function>stream_select</function>, <function>fgets</function>,
     <function>fgetss</function>, <function>fwrite</function>,
     <function>fclose</function>, <function>feof</function>, y la
     <link linkend="ref.curl">extensión Curl</link>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
