<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.6 $ -->
<!-- EN-Revision: 1.13 Maintainer: lboshell Status: ready -->
  <refentry id="function.stream-socket-client">
   <refnamediv>
    <refname>stream_socket_client</refname>
    <refpurpose>
     Abrir una conexi&oacute;n de socket de dominio de Internet o Unix
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis>
      <type>resource</type><methodname>stream_socket_client</methodname>
      <methodparam><type>string</type><parameter>socket_remoto</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter role="reference">errno</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter role="reference">errstr</parameter></methodparam>
      <methodparam choice="opt"><type>float</type><parameter>tiempo_espera</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>banderas</parameter></methodparam>
      <methodparam choice="opt"><type>resource</type><parameter>contexto</parameter></methodparam>
     </methodsynopsis>
    <para>
     Inicia una conexi&oacute;n secuenciada o tipo datagrama al
     destino especificado por <parameter>socket_remoto</parameter>. El
     tipo de socket creado es determinado por el transporte
     especificado usando el formato de URL est&aacute;ndar:
     <literal>transporte://destino</literal>. Para sockets de dominio
     de Internet (AF_INET) tales como TCP y UDP, la porci&oacute;n
     <literal>destino</literal> del par&aacute;metro
     <parameter>socket_remoto</parameter> debe consistir de un nombre
     de host o direcci&oacute;n IP seguido de un signo de dos puntos y
     un n&uacute;mero de puerto. Para sockets de dominio Unix, la
     porci&oacute;n <parameter>destino</parameter> debe apuntar al
     archivo de socket en el sistema de archivos.

     El <parameter>tiempo_espera</parameter> opcional puede ser usado
     para establecer un tiempo de espera m&aacute;ximo en segundos
     para el llamado de conexi&oacute;n del sistema.

     <parameter>banderas</parameter> es un campo de m&aacute;scara de
     bits que puede ser definido como una combinaci&oacute;n de
     banderas de conexi&oacute;n. Actualmente, las banderas de
     conexi&oacute;n disponibles est&aacute;n limitadas a
     <constant>STREAM_CLIENT_CONNECT</constant> (predeterminada),
     <constant>STREAM_CLIENT_ASYNC_CONNECT</constant> y
     <constant>STREAM_CLIENT_PERSISTENT</constant>.
    </para>
    <note>
     <simpara>
      Si necesita establecer un tiempo de espera para la
      lectura/escritura de datos sobre el socket, use
      <function>stream_set_timeout</function>, ya que el
      par&aacute;metro <parameter>tiempo_espera</parameter> de
      <function>stream_socket_client</function> s&oacute;lo se aplica
      cuando se establece la conexi&oacute;n con el socket.
     </simpara>
    </note>
    <para>
     <function>stream_socket_client</function> devuelve un recurso de
     secuencia que puede ser usado junto con las otras funciones de
     archivos (tales como <function>fgets</function>,
     <function>fgetss</function>, <function>fwrite</function>,
     <function>fclose</function>, y <function>feof</function>).
    </para>
    <para>
     Si la llamada falla, devolver&aacute; &false; y si los argumentos
     opcionales <parameter>errno</parameter> y
     <parameter>errstr</parameter> est&aacute;n presentes,
     &eacute;stos ser&aacute;n definidos de modo tal que indiquen el
     error de nivel de sistema actual que ocurri&oacute; en el llamado
     de nivel de sistema <literal>connect()</literal>. Si el valor
     devuelto en <parameter>errno</parameter> es <literal>0</literal>
     y la funci&oacute;n devolvi&oacute; &false;, es un indicio de que
     el error ocurri&oacute; antes del llamado a
     <literal>connect()</literal>. Esto es por lo general debido a un
     problema con la inicializaci&oacute;n del socket. Note que los
     argumentos <parameter>errno</parameter> y
     <parameter>errstr</parameter> ser&aacute;n siempre pasados por
     referencia.
    </para>
    <para>
     Dependiendo del entorno, el dominio Unix o el tiempo de espera de
     conexi&oacute;n opcional pueden no estar disponibles. Una lista
     de transportes disponibles puede ser recuperada usando
     <function>stream_get_transports</function>. Vea <xref
     linkend="transports"/> para consultar una lista de transportes
     incorporados.
    </para>
    <para>
     La secuencia ser&aacute; abierta por defecto en modo de
     bloqueo. Puede modificarla a modo de no-bloqueo usando
     <function>stream_set_blocking</function>.
     <example>
      <title>Ejemplo de
      <function>stream_socket_client</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$da = stream_socket_client("tcp://www.example.com:80", $errno, $errstr, 30);
if (!$da) {
    echo "$errstr ($errno)<br />\n";
} else {
    fwrite($da, "GET / HTTP/1.0\r\nHost: www.example.com\r\nAccept: */*\r\n\r\n");
    while (!feof($da)) {
        echo fgets($da, 1024);
    }
    fclose($da);
}
?>
]]>
      </programlisting>
     </example>
     El siguiente ejemplo muestra c&oacute;mo recuperar la fecha y
     hora desde el servicio UDP "daytime" (puerto 13) en su
     m&aacute;quina local.
     <example>
      <title>Uso de una conexi&oacute;n UDP</title>
      <programlisting role="php">
<![CDATA[
<?php
$da = stream_socket_client("udp://127.0.0.1:13", $errno, $errstr);
if (!$da) {
    echo "ERROR: $errno - $errstr<br />\n";
} else {
    fwrite($da, "\n");
    echo fread($da, 26);
    fclose($da);
}
?>
]]>
      </programlisting>
     </example>
     <warning>
      <simpara>
       Los sockets UDP parecer&aacute;n haber sido abiertos sin error
       en ocasiones, incluso si el host remoto no ha podido ser
       contactado. El error solo se har&aacute; aparente cuando lea o
       escriba datos desde/hacia el socket. La raz&oacute;n de esto es
       que UDP es un protocolo "sin conexi&oacute;n", lo que quiere
       decir que el sistema operativo no intenta establecer un enlace
       para el socket hasta que realmente necesita enviar o recibir
       datos.
      </simpara>
     </warning>
    </para>
    &ipv6.brackets;
    <para>
     Vea tambi&eacute;n <function>stream_socket_server</function>,
     <function>stream_set_blocking</function>,
     <function>stream_set_timeout</function>,
     <function>stream_select</function>, <function>fgets</function>,
     <function>fgetss</function>, <function>fwrite</function>,
     <function>fclose</function>, <function>feof</function>, y la
     <link linkend="ref.curl">extensi&oacute;n Curl</link>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
