<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 294577 $ -->
<!-- EN-Revision: 297028 Maintainer: seros Status: ready -->
<refentry xml:id="function.stream-filter-register" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>stream_filter_register</refname>
  <refpurpose>Registrar un filtro de flujo definido por el usuario</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>stream_filter_register</methodname>
   <methodparam><type>string</type><parameter>filtername</parameter></methodparam>
   <methodparam><type>string</type><parameter>classname</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>stream_filter_register</function> permite implementar
   un filtro propio sobre cualquier flujo registrado usado con las demás funciones
   de sistema de archivos (como <function>fopen</function>,
   <function>fread</function> etc.).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>filtername</parameter></term>
     <listitem>
      <para>
       El nombre del filtro que va a ser registrado.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>classname</parameter></term>
     <listitem>
      <para>
       Para implementar un filtro se necesita definir una clase como una extensión de
       <literal>php_user_filter</literal> con un número de funciones miembro
       como se define abajo. Cuando se lleva a cabo operaciones de lectura/escritura en el flujo
       al cuál el filtro está enlazado, PHP pasará la información a través de este
       filtro (y cualquier otro filtro enlazado a ese flujo) por lo que la
       información puede ser modificada como se desee. Se deben implementar los métodos
       exactamente como se describe abajo - hacerlo de otro modo conducirá a un comportamiento
       indefinido.
      </para>
      <methodsynopsis>
       <type>int</type><methodname>filter</methodname>
       <methodparam><type>resource</type><parameter>in</parameter></methodparam>
       <methodparam><type>resource</type><parameter>out</parameter></methodparam>
       <methodparam><type>int</type><parameter role="reference">consumed</parameter></methodparam>
       <methodparam><type>bool</type><parameter>closing</parameter></methodparam>
      </methodsynopsis>
      <para>
       Este método es llamado siempre que la información es leída desde o escrita en
       el flujo enlazado (como con <function>fread</function> o <function>fwrite</function>).
       <parameter>in</parameter> es un recurso que apunta a una <literal>cadena de recipientes</literal>
       que contiene uno o más objetos <literal>recipiente</literal> que contienen la información que va a
       ser filtrada. <parameter>out</parameter> es un recurso que apunta a una segunda <literal>cadena
       de recipientes</literal> dentro de la cual se deberían ubicar los recipientes modificados.
       <parameter>consumed</parameter>, el cual <emphasis>siempre</emphasis> debe
       ser declarado por referencia, debería ser incrementado por la longitud de la información
       que el filtro lee y altera. En la mayoría de los casos esto significa que se incrementará
       <parameter>consumed</parameter> por <literal>$recipiente->datalen</literal>
       por cada <literal>$recipiente</literal>. Si el flujo está en el proceso de cierre
       (y por lo tanto éste es el último pase a través de la cadena de filtros),
       el parámetro <parameter>closing</parameter> será establecido a &true;.
       El método <methodname>filter</methodname> debe devolver uno de estos
       tres valores cuando se complete.
       <informaltable>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Valor Devuelto</entry>
           <entry>Significado</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><constant>PSFS_PASS_ON</constant></entry>
           <entry>
            El filtró se procesó con éxito con información disponible en la
            <literal>cadena de recipientes</literal> <parameter>out</parameter>.
           </entry>
          </row>
          <row>
           <entry><constant>PSFS_FEED_ME</constant></entry>
           <entry>
            El filtró se procesó con éxito, sin embargo no había información disponible que
            devolver. Se requiere más información del flujo o del filtro previo.
           </entry>
          </row>
          <row>
           <entry><constant>PSFS_ERR_FATAL</constant> (predeterminado)</entry>
           <entry>
            El filtro experimentó un error irrecuperable y no puede continuar.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
      <methodsynopsis>
       <type>bool</type><methodname>onCreate</methodname>
       <void/>
      </methodsynopsis>
      <simpara>
       Este método se llama durante la instanciación del objeto de la clase del
       filtro. Si el filtro asigna o inicializa cualquier otro recurso
       (como un buffer), éste es el lugar para hacerlo. La implementación de
       este método debería devolver &false; en caso de error, o &true; en caso de éxito.
      </simpara>
      <simpara>
       Cuando primero se instancia el filtro, y
       se llama a <literal>elfiltro-&gt;onCreate()</literal>, estarán disponibles
       varias propiedades como se muestra en la tabla de abajo.
      </simpara>
      <para>
       <informaltable>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Propiedad</entry>
           <entry>Contenido</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry><literal>FilterClass-&gt;filtername</literal></entry>
           <entry>
            Una cadena que contiene el nombre del filtro con el que fue instanciado.
            Los filtros pueden ser registrados bajo múltiples nombres o bajo comodines.
            Use esta propiedad para determinar qué nombre fue usado.
           </entry>
          </row>
          <row>
           <entry><literal>FilterClass-&gt;params</literal></entry>
           <entry>
            El contenido del parámetro <parameter>params</parameter> pasado
            a <function>stream_filter_append</function>
            o a <function>stream_filter_prepend</function>.
           </entry>
          </row>
          <row>
           <entry><literal>FilterClass-&gt;stream</literal></entry>
           <entry>
            El recurso de flujo que va a ser filtrado. Quizás disponible sólo durante
            las llamadas a <methodname>filter</methodname> cuando el
            parámetro <literal>closing</literal> es &false;.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </informaltable>
      </para>
      <methodsynopsis>
       <type>void</type><methodname>onClose</methodname>
       <void/>
      </methodsynopsis>
      <para>
       Este método es llamado bajo el cierre del filtro (normalmente también
       durante el cierre del flujo), y se ejecuta <emphasis>después</emphasis>
       de llamar al método <literal>flush</literal>. Si se asignó o inicializo
       cualquier recurso durante <literal>onCreate()</literal>,
       este sería el momento de destruirlo o deshacerse de él.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
  <para>
   <function>stream_filter_register</function> devolverá &false; si
   <parameter>filtername</parameter> ya está definido.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Filtro para poner en mayúsculas caracteres en el flujo <filename>foo-bar.txt</filename></title>
    <para>
     El ejemplo de abajo implementa un filtro llamado <literal>strtoupper</literal>
     en el flujo <filename>foo-bar.txt</filename> que pondrá en mayúsculas
     todos los caracteres de letras escritos en/leídos desde este flujo.
    </para>
    <programlisting role="php">
<![CDATA[
<?php

/* Definir nuestra clase de filtro */
class strtoupper_filter extends php_user_filter {
  function filter($entrada, $salida, &$consumido, $cerrar)
  {
    while ($recipiente = stream_bucket_make_writeable($entrada)) {
      $recipiente->data = strtoupper($recipiente->data);
      $consumido += $recipiente->datalen;
      stream_bucket_append($salida, $recipiente);
    }
    return PSFS_PASS_ON;
  }
}

/* Registrar nuestro filtro con PHP */
stream_filter_register("strtoupper", "strtoupper_filter")
    or die("Fallo al registrar el filtro");

$fp = fopen("foo-bar.txt", "w");

/* Enlazar el filtro al flujo recién abierto */
stream_filter_append($fp, "strtoupper");

fwrite($fp, "Fila1\n");
fwrite($fp, "Palabra - 2\n");
fwrite($fp, "Tan Sencillo Como 123\n");

fclose($fp);

/* Leer el contenido desde atrás
 */
readfile("foo-bar.txt");

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
FILA1
PALABRA - 2
TAN SENCILLO COMO 123
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Registrar una clase de filtro genérica para comparar múltiples nombres de filtro.</title>
    <programlisting role="php">
<![CDATA[
<?php

/* Definir nuestra clase de filtro */
class string_filter extends php_user_filter {
  var $modo;

  function filter($entrada, $salida, &$consumido, $cerrar)
  {
    while ($recipiente = stream_bucket_make_writeable($entrada)) {
      if ($this->mode == 1) {
        $recipiente->data = strtoupper($recipiente->data);
      } elseif ($this->mode == 0) {
        $recipiente->data = strtolower($recipiente->data);
      }

      $consumido += $recipiente->datalen;
      stream_bucket_append($salida, $recipiente);
    }
    return PSFS_PASS_ON;
  }

  function onCreate()
  {
    if ($this->filtername == 'str.toupper') {
      $this->mode = 1;
    } elseif ($this->filtername == 'str.tolower') {
      $this->mode = 0;
    } else {
      /* Se preguntó por otro filtro str.*,
         informar del fallo, por lo que PHP seguirá mirando */
      return false;
    }

    return true;
  }
}

/* Registrar nuestro filtro con PHP */
stream_filter_register("str.*", "string_filter")
    or die("Fallo al registrar el filtro");

$fp = fopen("foo-bar.txt", "w");

/* Enlazar el filtro al flujo recién abierto
   Alternativamente podríamos enlazar a str.tolower aquí */
stream_filter_append($fp, "str.toupper");

fwrite($fp, "Fila1\n");
fwrite($fp, "Palabra - 2\n");
fwrite($fp, "Tan Sencillo Como 123\n");

fclose($fp);

/* Leer el contenido desde atrás
 */
readfile("foo-bar.txt");

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
FILA1
PALABRA - 2
TAN SENCILLO COMO 123
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>stream_wrapper_register</function></member>
    <member><function>stream_filter_append</function></member>
    <member><function>stream_filter_prepend</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
