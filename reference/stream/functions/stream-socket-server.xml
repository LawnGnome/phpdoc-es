<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.12 Maintainer: lboshell Status: ready -->
  <refentry id="function.stream-socket-server">
   <refnamediv>
    <refname>stream_socket_server</refname>
    <refpurpose>
     Crear un socket de servidor de dominio de Internet o Unix
    </refpurpose> 
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis>
      <type>resource</type><methodname>stream_socket_server</methodname>
      <methodparam><type>string</type><parameter>socket_local</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>&amp;errno</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>&amp;errstr</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>banderas</parameter></methodparam>
      <methodparam choice="opt"><type>resource</type><parameter>contexto</parameter></methodparam>
     </methodsynopsis>
    <para>
     Crea un socket secuenciado o tipo datagrama en
     el <parameter>socket_local</parameter> especificado. El tipo de
     socket creado es determinado por el transporte especificado
     usando el formato de URL
     est&aacute;ndar: <literal>transporte://destino</literal>. Para
     sockets de Dominio de Internet (AF_INET) tales como TCP y UDP, la
     porci&oacute;n <literal>destino</literal> del
     par&aacute;metro <parameter>socket_remoto</parameter> debe
     consistir de un nombre de host o direcci&oacute;n IP, seguido de
     un signo de dos puntos y un n&uacute;mero de puerto. Para sockets
     de dominio Unix, la porci&oacute;n <parameter>destino</parameter>
     debe apuntar al archivo de socket en el sistema de archivos.

     <parameter>banderas</parameter> es un campo de m&aacute;scara de
     bits que puede definirse como una combinaci&oacute;n de banderas
     de creaci&oacute;n de sockets. El valor predeterminado de
     banderas es
     <constant>STREAM_SERVER_BIND</constant>
     | <constant>STREAM_SERVER_LISTEN</constant>.
    </para>
    <para>
     Esta funci&oacute;n solo crea un socket, para empezar a aceptar
     conexiones use <function>stream_socket_accept</function>.
    </para>
    <para>
     Si la llamada falla, devolver&aacute; &false; y si los argumentos
     opcionales
     <parameter>errno</parameter> y <parameter>errstr</parameter>
     est&aacute;n presentes, &eacute;stos ser&aacute;n definidos de
     forma tal que indiquen el error de nivel de sistema actual que ha
     ocurrido en los llamados de sistema
     <literal>socket()</literal>, <literal>bind()</literal>, y
     <literal>listen()</literal>. Si el valor devuelto
     en <parameter>errno</parameter> es <literal>0</literal> y la
     funci&oacute;n ha devuelto &false;, es un indicio de que el error
     ocurri&oacute; antes del llamado
     a <literal>bind()</literal>. Esto, por lo general, es debido a un
     problema en la inicializaci&oacute;n del socket. Note que los
     argumentos <parameter>errno</parameter>
     y <parameter>errstr</parameter> siempre ser&aacute;n pasados por
     referencia.
    </para>
    <para>
     Dependiendo del entorno, los sockets de dominio Unix pueden no
     estar disponibles. Una lista de transportes disponibles puede ser
     recuperada usando <function>stream_get_transports</function>. Vea
     <xref linkend="transports"/> para consultar una lista de
     transportes integrados.
    </para>
    <para>
     <function>stream_socket_server</function>.
     <example>
      <title>Ejemplo
      de <function>stream_socket_server</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$socket = stream_socket_server("tcp://0.0.0.0:8000", $errno, $errstr);
if (!$socket) {
  echo "$errstr ($errno)<br />\n";
} else {
  while ($con = stream_socket_accept($socket)) {
    fputs($con, 'La hora local es ' . date('n/j/Y g:i a') . "\n");
    fclose($con);
  }
  fclose($socket);
}
?>
]]>
      </programlisting>
     </example>
     </para>
     <para>
      El siguiente ejemplo muestra como actuar como servidor de hora,
      el cual puede responder a consultas sobre la hora actual, tal y
      como se muestra en un ejemplo ubicado en la p&aacute;gina
      sobre <function>stream_socket_client</function>.
      <note>
       <simpara>
        La mayor&iacute;a de sistemas requieren acceso de root para
        crear un socket de servidor en un puerto menor a 1024.
       </simpara>
      </note>
     <example>
     <title>Uso de sockets de servidor UDP</title>
     <programlisting role="php">
<![CDATA[
<?php
$socket = stream_socket_server("udp://0.0.0.0:13", $errno, $errstr, STREAM_SERVER_BIND);
if (!$socket) {
    echo "ERROR: $errno - $errstr<br />\n";
} else {
  while ($con = stream_socket_accept($socket)) {
    fwrite($con, date("D M j H:i:s Y\r\n"));
    fclose($con);
  }
  fclose($socket);
}
?>
]]>
     </programlisting>
     </example>
     </para>
     &ipv6.brackets;
     <para>
      Vea tambi&eacute;n
      <function>stream_socket_client</function>, 
      <function>stream_set_blocking</function>,
      <function>stream_set_timeout</function>, 
      <function>fgets</function>,
      <function>fgetss</function>, <function>fputs</function>,
      <function>fclose</function>, <function>feof</function>, y
      la <link linkend="ref.curl">extensi&oacute;n Curl</link>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
