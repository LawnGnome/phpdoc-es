<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.7 $ -->
<!-- EN-Revision: 1.17 Maintainer: lboshell Status: ready -->
  <refentry xml:id="function.stream-filter-append" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>stream_filter_append</refname>
    <refpurpose>Adjuntar un filtro a una secuencia</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis>
      <type>resource</type><methodname>stream_filter_append</methodname>
      <methodparam><type>resource</type><parameter>secuencia</parameter></methodparam>
      <methodparam><type>string</type><parameter>nombre_filtro</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>lectura_escritura</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>parametros</parameter></methodparam>
     </methodsynopsis>
    <para>
     Agrega el <parameter>nombre_filtro</parameter> a la lista de
     filtros adjuntos a la <parameter>secuencia</parameter>. Este
     filtro ser&aacute; a&ntilde;adido con los
     <parameter>parametros</parameter> especificados al
     <emphasis>final</emphasis> de la lista y por lo tanto ser&aacute;
     llamado al &uacute;ltimo durante las operaciones de la
     secuencia. Para agregar un filtro al comienzo de la lista, use
     <function>stream_filter_prepend</function>.
    </para>
    <para>
     Por defecto, <function>stream_filter_append</function>
     adjuntar&aacute; el filtro a la <literal>cadena de filtros de
     lectura</literal> si el archivo fue abierto para lectura (esto
     quiere decir, Modo del Archivo: <literal>r</literal>, o
     <literal>+</literal>). El filtro tambi&eacute;n se
     adjuntar&aacute; a la <literal>cadena de filtros de
     escritura</literal> si el archivo fue abierto para escritura
     (esto quiere decir, Modo del Archivo: <literal>w</literal>,
     <literal>a</literal>, O <literal>+</literal>). Las constantes
     <constant>STREAM_FILTER_READ</constant>,
     <constant>STREAM_FILTER_WRITE</constant>, o
     <constant>STREAM_FILTER_ALL</constant> pueden ser pasadas
     tambi&eacute;n al par&aacute;metro
     <parameter>lectura_escritura</parameter> para sobrescribir este
     comportamiento.
    </para>
    <para>
     A partir de PHP 5.1.0, esta funci&oacute;n devuelve un recurso
     que puede ser usado para referirse a esta instancia de filtro
     durante una llamada a
     <function>stream_filter_remove</function>. Antes de PHP 5.1.0,
     esta funci&oacute;n devuelve &true; en caso de &eacute;xito o
     &false; si ocurre un error.
    </para>
    <para>
     <example>
      <title>Control del lugar en el que se aplican los
      filtros</title>
      <programlisting role="php">
<![CDATA[
<?php
/* Abrir un archivo de prueba para lectura y escritura */
$da = fopen('prueba.txt', 'w+');

/* Aplicar el filtro ROT13 a la cadena de filtros de escritura, pero
 * no a la cadena de filtros de lectura */
stream_filter_append($da, "string.rot13", STREAM_FILTER_WRITE);

/* Escribir una cadena simple al archivo, la cual sera transformada
   mediante ROT13 en su camino de salida */
fwrite($da, "Esta es una prueba\n");

/* Volver al inicio del archivo */
rewind($da);

/* Leer los contenidos del archivo de vuelta. Si hubiesemos aplicado
 * el filtro a la cadena de filtros de lectura tambien, veriamos el
 * texto de vuelta a su estado original debido a la retransformacion
 * con ROT133 */
fpassthru($da);

fclose($da);

/* Salida Esperada
   ---------------

Rfgn rf han cehron

 */
?>
]]>
      </programlisting>
     </example>
    </para>
    <note>
     <title>Cuando se usan filtros personalizados (de usuario)</title>
     <simpara>
      La funci&oacute;n <function>stream_filter_register</function>
      debe ser llamada primero para registrar el filtro de usuario
      deseado para <parameter>nombre_filtro</parameter>.
     </simpara>
    </note>
    <note>
     <simpara>
      Los datos de la secuencia son le&iacute;dos desde los recursos
      (tanto locales como remotos) en paquetes, usando b&uacute;feres
      internos para conservar todos los datos sin consumir. Cuando un
      nuevo filtro es agregado a la secuencia, los datos en los
      b&uacute;feres internos son procesados a trav&eacute;s del nuevo
      filtro en ese momento. Este comportamiento difiere de
      aqu&eacute;l de <function>stream_filter_prepend</function>.
     </simpara>
    </note>
    <simpara>
     Vea tambi&eacute;n <function>stream_filter_register</function>,
     <function>stream_filter_prepend</function>, y
     <function>stream_get_filters</function>.
    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
