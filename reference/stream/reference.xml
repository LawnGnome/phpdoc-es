<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.10 $ -->
<!-- EN-Revision: 1.27 Maintainer: lboshell Status: ready -->
<!-- Purpose: remote.other -->
<!-- Membership: core -->

 <reference xml:id="ref.stream" xmlns="http://docbook.org/ns/docbook">
  <title>Funciones de Secuencias</title>
  <titleabbrev>Secuencias</titleabbrev>

  <partintro>

   <section xml:id="stream.intro">
    &reftitle.intro;
    <simpara>
     Las secuencias (streams) fueron introducidas con PHP 4.3.0 como un
     medio de generalizar el acceso a archivos, recursos de red, compresión
     de datos, y otras operaciones que comparten un juego común de funciones
     y usos. En su forma más simple, una <literal>secuencia</literal> es un
     objeto <literal>recurso</literal> que exhibe un comportamiento
     secuenciable. Esto quiere decir, pueden leerse datos desde la secuencia
     o escribir datos hacia ella en una forma lineal, y puede que sea
     posible efectuar búsquedas con <function>fseek</function> de
     ubicaciones arbitrarias dentro de la secuencia.
    </simpara>
    <simpara>
     Una envoltura (<literal>wrapper</literal>) es un código adicional que
     le dice a la secuencia cómo gestionar los protocolos y codificaciones
     específicas. Por ejemplo, la envoltura <literal>http</literal> sabe
     cómo traducir una URL a una petición <literal>HTTP/1.0</literal> por un
     archivo en un servidor remoto. Existen varias envolturas incluidas con
     PHP por defecto (Vea <xref linkend="wrappers"/>), y envolturas
     adicionales, personalizadas, pueden agregarse ya sea dentro de un
     script PHP usando <function>stream_wrapper_register</function>, o
     directamente desde una extensión usando la Referencia de API en <xref
     linkend="internals2.streams"/>. Dado que cualquier tipo de envoltura
     puede ser agregada a PHP, no existe un límite impuesto en lo que se
     puede hacer con ellas. Para consultar la lista de envolturas soportadas
     actualmente, use <function>stream_get_wrappers</function>.
    </simpara>
    <para>
     Una secuencia es referenciada como:
     <parameter>esquema</parameter>://<parameter>destino</parameter>
     <itemizedlist>
      <listitem>
       <simpara>
        <parameter>esquema</parameter>(cadena) - El nombre de la envoltura a
        ser usada. Algunos ejemplos: file, http, https, ftp, ftps,
        compress.zlib, compress.bz2, y php. Vea <xref linkend="wrappers"/>
        para consultar una lista de envolturas integradas con PHP. Si no se
        especifica una envoltura, es usada la envoltura predeterminada de la
        función (usualmente <literal>file</literal>://).
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <parameter>destino</parameter> - Depende en la envoltura usada. Para
        secuencias relacionadas con el sistema de archivos, este parámetro
        es por lo general una ruta y un nombre de archivo que apunta al
        archivo deseado. Para secuencias de red, usualmente consiste de un
        nombre de host, por lo general con una ruta adicionada al final.
        Nuevamente, vea <xref linkend="wrappers"/> para encontrar una
        descripción de destinos para las secuencias integradas.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
   </section>

   <section xml:id="stream.filters">
    <title>Filtros de Secuencia</title>
    <simpara>
     Un <literal>filtro</literal> es una pieza final de código que puede
     efectuar operaciones sobre los datos a medida que éstos son leídos
     desde una secuencia o escritos hacia una. Puede apilarse cualquier
     cantidad de filtros sobre una secuencia. Pueden definirse filtros
     personalizados en un script PHP usando
     <function>stream_filter_register</function> o en una extensión usando
     la Referencia API de <xref linkend="internals2.streams"/>. Para
     consultar la lista de filtros registrados actualmente, use
     <function>stream_get_filters</function>.
    </simpara>
   </section>

   <section xml:id="stream.contexts">
    <title>Contextos de Secuencia</title>
    <simpara>
     Un <literal>contexto</literal> es un conjunto de
     <literal>parámetros</literal> y <literal>opciones</literal> específicas
     de cada envoltura que modifican o mejoran el comportamiento de una
     secuencia. Los <literal>contextos</literal> son creados usando
     <function>stream_context_create</function> y pueden ser pasados a la
     mayoría de funciones de creación de secuencias relacionadas con el
     sistema de archivos (esto es, <function>fopen</function>,
     <function>file</function>, <function>file_get_contents</function>,
     etc...).
    </simpara>
    <simpara>
     Pueden especificarse <literal>opciones</literal> cuando se hacen
     llamados a <function>stream_context_create</function>, o más adelante
     usando <function>stream_context_set_option</function>. Una lista de
     <literal>opciones</literal> específicas de envoltura puede encontrarse
     con la lista de envolturas integradas (Vea <xref linkend="wrappers"/>).
    </simpara>
    <simpara>
     Adicionalmente, pueden definirse <literal>parámetros</literal> en un
     <literal>contexto</literal> usando
     <function>stream_context_set_params</function>. Actualmente, el único
     <literal>parámetro de contexto</literal> soportado por PHP es
     <literal>notificación</literal>. El valor de este parámetro debe ser el
     nombre de una función a ser llamada cuando un evento ocurre sobre una
     secuencia. La función de notificación llamada durante un evento debe
     aceptar los siguientes seis parámetros:
    </simpara>
    <methodsynopsis>
     <type>void</type><methodname>mi_notificador</methodname>
     <methodparam><type>int</type><parameter>codigo_notificacion</parameter></methodparam>
     <methodparam><type>int</type><parameter>severidad</parameter></methodparam>
     <methodparam><type>string</type><parameter>mensaje</parameter></methodparam>
     <methodparam><type>int</type><parameter>codigo_mensaje</parameter></methodparam>
     <methodparam><type>int</type><parameter>bytes_transferidos</parameter></methodparam>
     <methodparam><type>int</type><parameter>bytes_max</parameter></methodparam>
    </methodsynopsis>
    <simpara>
     <parameter>codigo_mensaje</parameter> y
     <parameter>severidad</parameter> son valores numéricos que corresponden
     a las constantes <constant>STREAM_NOTIFY_*</constant> listadas más
     adelante.

     Si un mensaje descriptivo se encuentra disponible desde la secuencia,
     <parameter>mensaje</parameter> y <parameter>codigo_mensaje</parameter>
     se popularán con los valores apropiados. El significado de éstos
     valores depende de la envoltura específica en uso.

     <parameter>bytes_transferidos</parameter> y
     <parameter>bytes_max</parameter> se poblarán cuando sea aplicable.
    </simpara>
   </section>

   <section xml:id="stream.installation">
    &reftitle.install;
    <para>
     Las secuencias son parte integral de PHP a partir de la versión 4.3.0.
     No se requiere de ningún paso adicional para habilitarlas.
    </para>
   </section>

   <section xml:id="stream.resources">
    <title>Clases de Secuencia</title>
    <simpara>
     Es posible registrar envolturas diseñadas por el usuario mediante
     <function>stream_wrapper_register</function>, use la definición de
     clase expuesta en su respectiva página del manual.
    </simpara>
    <simpara>
     La <literal>clase</literal> php_user_filter se encuentra predefinida y
     es una clase base abstracta para su uso con filtros definidos por el
     usuario. Vea la página del manual sobre
     <function>stream_filter_register</function> para más detalles sobre la
     implementación de filtros definidos por el usuario.
    </simpara>
   </section>

   &reference.stream.constants;

   <section xml:id="stream.errors">
    <title>Errores de Secuencia</title>
    <para>
     Al igual que con cualquier otra función relacionada con archivos o
     sockets, una operación sobre una secuencia puede fallar por una
     variedad de razones normales (esto es: Incapaz de conectarse con el
     servidor remoto, archivo no encontrado, etc...). Una llamada
     relacionada con una secuencia puede fallar también debido a que la
     secuencia deseada no está registrada en el sistema actual. Consulte la
     matriz devuelta por <function>stream_get_wrappers</function> para ver
     una lista de secuencias soportadas en su instalación de PHP. Al igual
     que con la mayoría de funciones internas de PHP, si ocurre un fallo, se
     generará un mensaje <constant>E_WARNING</constant> que describe la
     naturaleza del error.
    </para>
   </section>

   <section xml:id="stream.examples">
    &reftitle.examples;
    <para>
     <example>
      <title>Uso de <function>file_get_contents</function> para recuperar
      datos de múltiples fuentes</title>
      <programlisting role="php">
<![CDATA[
<?php
/* Leer archivo local desde /home/bar */
$archivo_local = file_get_contents("/home/bar/foo.txt");

/* Idéntico al ejemplo anterior, indicando explícitamente el esquema FILE */
$archivo_local = file_get_contents("file:///home/bar/foo.txt");

/* Leer un archivo remoto desde www.example.com usando HTTP */
$archivo_http  = file_get_contents("http://www.example.com/foo.txt");

/* Leer un archivo remoto desde www.example.com usando HTTPS */
$archivo_https = file_get_contents("https://www.example.com/foo.txt");

/* Leer un archivo remoto desde ftp.example.com usando FTP */
$archivo_ftp   = file_get_contents("ftp://usuario:contrasenya@ftp.example.com/foo.txt");

/* Leer un archivo remoto desde ftp.example.com usando FTPS */
$archivo_ftps  = file_get_contents("ftps://usuario:contrasenya@ftp.example.com/foo.txt");
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Realizar una petición POST a un servidor https</title>
      <programlisting role="php">
<![CDATA[
<?php
/* Enviar una petición POST a https://seguro.example.com/formulario.php
 * Incluir elementos de formulario llamados "foo" y "bar" con valores
 * de prueba
 */

$sock = fsockopen("ssl://seguro.example.com", 443, $errno, $errstr, 30);
if (!$sock) die("$errstr ($errno)\n");

$datos = "foo=" . urlencode("Valor para Foo") . "&bar=" . urlencode("Valor para Bar");

fwrite($sock, "POST /formulario.php HTTP/1.0\r\n");
fwrite($sock, "Host: seguro.example.com\r\n");
fwrite($sock, "Content-type: application/x-www-form-urlencoded\r\n");
fwrite($sock, "Content-length: " . strlen($datos) . "\r\n");
fwrite($sock, "Accept: */*\r\n");
fwrite($sock, "\r\n");
fwrite($sock, "$data\r\n");
fwrite($sock, "\r\n");

$cabeceras = "";
while ($cadena = trim(fgets($sock, 4096)))
  $cabeceras .= "$cadena\n";

echo "\n";

$cuerpo = "";
while (!feof($sock))
  $cuerpo .= fgets($sock, 4096);

fclose($sock);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Escritura de datos a un archivo comprimido</title>
      <programlisting role="php">
<![CDATA[
<?php
/* Crear un archivo comprimido que contenga una cadena arbitraria
 * El archivo puede ser leido de vuelta usando una secuencia
 * compress.zlib o simplemente descomprimido desde la línea de comandos
 * usando 'gzip -d foo-bar.txt.gz'
 */
$da = fopen("compress.zlib://foo-bar.txt.gz", "wb");
if (!$da) die("No fue posible crear el archivo.");

fwrite($da, "Esto es una prueba.\n");

fclose($da);
?>
]]>
      </programlisting>
     </example>
    </para>
   </section>
  </partintro>

&reference.stream.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
