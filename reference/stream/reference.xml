<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.8 $ -->
<!-- EN-Revision: 1.24 Maintainer: lboshell Status: ready -->
<!-- Purpose: remote.other -->
<!-- Membership: core -->

 <reference xml:id="ref.stream" xmlns="http://docbook.org/ns/docbook">
  <title>Funciones de Secuencias</title>
  <titleabbrev>Secuencias</titleabbrev>

  <partintro>

   <section xml:id="stream.intro">
    &reftitle.intro;
    <simpara>
     Las secuencias (streams) fueron introducidas con PHP 4.3.0 como
     un medio de generalizar el acceso a archivos, recursos de red,
     compresi&oacute;n de datos, y otras operaciones que comparten un
     juego com&uacute;n de funciones y usos. En su forma m&aacute;s
     simple, una <literal>secuencia</literal> es un objeto
     <literal>recurso</literal> que exhibe un comportamiento
     secuenciable. Esto quiere decir, pueden leerse datos desde la
     secuencia o escribir datos hacia ella en una forma lineal, y
     puede que sea posible efectuar b&uacute;squedas con
     <function>fseek</function> de ubicaciones arbitrarias dentro de
     la secuencia.
    </simpara>
    <simpara>
     Una envoltura (<literal>wrapper</literal>) es un c&oacute;digo
     adicional que le dice a la secuencia c&oacute;mo gestionar los
     protocolos y codificaciones espec&iacute;ficas. Por ejemplo, la
     envoltura <literal>http</literal> sabe c&oacute;mo traducir una
     URL a una petici&oacute;n <literal>HTTP/1.0</literal> por un
     archivo en un servidor remoto. Existen varias envolturas
     incluidas con PHP por defecto (Vea <xref linkend="wrappers"/>), y
     envolturas adicionales, personalizadas, pueden agregarse ya sea
     dentro de un script PHP usando
     <function>stream_wrapper_register</function>, o directamente
     desde una extensi&oacute;n usando la Referencia de API en <xref
     linkend="streams"/>. Dado que cualquier tipo de envoltura puede
     ser agregada a PHP, no existe un l&iacute;mite impuesto en lo que
     se puede hacer con ellas. Para consultar la lista de envolturas
     soportadas actualmente, use
     <function>stream_get_wrappers</function>.
    </simpara>
    <para>
     Una secuencia es referenciada
     como: <parameter>esquema</parameter>://<parameter>destino</parameter>
     <itemizedlist>
      <listitem>
       <simpara>
        <parameter>esquema</parameter>(cadena) - El nombre de la
        envoltura a ser usada. Algunos ejemplos: file, http, https,
        ftp, ftps, compress.zlib, compress.bz2, y php. Vea <xref
        linkend="wrappers"/> para consultar una lista de envolturas
        integradas con PHP. Si no se especifica una envoltura, es
        usada la envoltura predeterminada de la funci&oacute;n
        (usualmente <literal>file</literal>://).
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        <parameter>destino</parameter> - Depende en la envoltura
        usada. Para secuencias relacionadas con el sistema de
        archivos, &eacute;ste par&aacute;metro es por lo general una
        ruta y un nombre de archivo que apunta al archivo
        deseado. Para secuencias de red, usualmente consiste de un
        nombre de host, por lo general con una ruta adicionada al
        final. Nuevamente, vea <xref linkend="wrappers"/> para
        encontrar una descripci&oacute;n de destinos para las
        secuencias integradas.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
   </section>

   <section xml:id="stream.filters">
    <title>Filtros de Secuencia</title>
    <simpara>
     Un <literal>filtro</literal> es una pieza final de c&oacute;digo
     que puede efectuar operaciones sobre los datos a medida que
     &eacute;stos son le&iacute;dos desde una secuencia o escritos
     hacia una. Puede apilarse cualquier cantidad de filtros sobre una
     secuencia. Pueden definirse filtros personalizados en un script
     PHP usando <function>stream_filter_register</function> o en una
     extensi&oacute;n usando la Referencia API de <xref
     linkend="streams"/>. Para consultar la lista de filtros
     registrados actualmente, use
     <function>stream_get_filters</function>.
    </simpara>
   </section>
  
   <section xml:id="stream.contexts">
    <title>Contextos de Secuencia</title>
    <simpara>
     Un <literal>contexto</literal> es un conjunto
     de <literal>par&aacute;metros</literal>
     y <literal>opciones</literal> espec&iacute;ficas de cada
     envoltura que modifican o mejoran el comportamiento de una
     secuencia. Los <literal>contextos</literal> son creados
     usando <function>stream_context_create</function> y pueden ser
     pasados a la mayor&iacute;a de funciones de creaci&oacute;n de
     secuencias relacionadas con el sistema de archivos (esto
     es, <function>fopen</function>,
     <function>file</function>, <function>file_get_contents</function>,
     etc...).
    </simpara>
    <simpara>
     Pueden especificarse <literal>opciones</literal> cuando se hacen
     llamados a <function>stream_context_create</function>, o
     m&aacute;s adelante
     usando <function>stream_context_set_option</function>. Una lista
     de <literal>opciones</literal> espec&iacute;ficas de envoltura
     puede encontrarse con la lista de envolturas integradas (Vea
     <xref linkend="wrappers"/>).
    </simpara>
    <simpara>
     Adicionalmente, pueden definirse
     <literal>par&aacute;metros</literal> en un
     <literal>contexto</literal> usando
     <function>stream_context_set_params</function>. Actualmente, el
     &uacute;nico <literal>par&aacute;metro de contexto</literal>
     soportado por PHP es <literal>notificaci&oacute;n</literal>. El
     valor de &eacute;ste par&aacute;metro debe ser el nombre de una
     funci&oacute;n a ser llamada cuando un evento ocurre sobre una
     secuencia. La funci&oacute;n de notificaci&oacute;n llamada
     durante un evento debe aceptar los siguientes seis
     par&aacute;metros:
    </simpara>
    <methodsynopsis>
     <type>void</type><methodname>mi_notificador</methodname>
     <methodparam><type>int</type><parameter>codigo_notificacion</parameter></methodparam>
     <methodparam><type>int</type><parameter>severidad</parameter></methodparam>
     <methodparam><type>string</type><parameter>mensaje</parameter></methodparam>
     <methodparam><type>int</type><parameter>codigo_mensaje</parameter></methodparam>
     <methodparam><type>int</type><parameter>bytes_transferidos</parameter></methodparam>
     <methodparam><type>int</type><parameter>bytes_max</parameter></methodparam>
    </methodsynopsis>
    <simpara>
     <parameter>codigo_mensaje</parameter>
     y <parameter>severidad</parameter> son valores num&eacute;ricos
     que corresponden a las
     constantes <constant>STREAM_NOTIFY_*</constant> listadas
     m&aacute;s adelante.

     Si un mensaje descriptivo se encuentra disponible desde la
     secuencia, <parameter>mensaje</parameter>
     y <parameter>codigo_mensaje</parameter> se popular&aacute;n con
     los valores apropiados. El significado de &eacute;stos valores
     depende de la envoltura espec&iacute;fica en uso.

     <parameter>bytes_transferidos</parameter>
     y <parameter>bytes_max</parameter> se popular&aacute;n cuando sea
     aplicable.
    </simpara>
   </section>
   
   <section xml:id="stream.installation">
    &reftitle.install; 
    <para>
     Las secuencias son parte integral de PHP a partir de la
     versi&oacute;n 4.3.0. No se requiere de ning&uacute;n paso
     adicional para habilitarlas.
    </para>
   </section>

   <section xml:id="stream.resources">
    <title>Clases de Secuencia</title>
    <simpara>
     Es posible registrar envolturas dise&ntilde;adas por el usuario
     mediante <function>stream_wrapper_register</function>, use la
     definici&oacute;n de clase expuesta en su respectiva
     p&aacute;gina del manual.
    </simpara>
    <simpara>
     La <literal>clase</literal> php_user_filter se encuentra
     predefinida y es una clase base abstracta para su uso con filtros
     definidos por el usuario. Vea la p&aacute;gina del manual
     sobre <function>stream_filter_register</function> para m&aacute;s
     detalles sobre la implementaci&oacute;n de filtros definidos por
     el usuario.
    </simpara>
   </section>

   &reference.stream.constants;

   <section xml:id="stream.errors">
    <title>Errores de Secuencia</title>
    <para>
     Al igual que con cualquier otra funci&oacute;n relacionada con
     archivos o sockets, una operaci&oacute;n sobre una secuencia
     puede fallar por una variedad de razones normales (esto es:
     Incapaz de conectarse con el servidor remoto, archivo no
     encontrado, etc...). Una llamada relacionada con una secuencia
     puede fallar tambi&eacute;n debido a que la secuencia deseada no
     est&aacute; registrada en el sistema actual. Consulte la matriz
     devuelta por <function>stream_get_wrappers</function> para ver
     una lista de secuencias soportadas en su instalaci&oacute;n de
     PHP. Al igual que con la mayor&iacute;a de funciones internas de
     PHP, si ocurre un fallo, se generar&aacute; un mensaje
     <constant>E_WARNING</constant> que describe la naturaleza del
     error.
    </para>
   </section>
   
   <section xml:id="stream.examples">
    &reftitle.examples;
    <para>
     <example>
      <title>Uso de <function>file_get_contents</function> para
       recuperar datos de m&uacute;ltiples fuentes</title>
      <programlisting role="php">
<![CDATA[
<?php
/* Leer archivo local desde /home/bar */
$archivo_local = file_get_contents("/home/bar/foo.txt");

/* Identico al ejemplo anterior, indicando explicitamente el esquema FILE */
$archivo_local = file_get_contents("file:///home/bar/foo.txt");

/* Leer un archivo remoto desde www.example.com usando HTTP */
$archivo_http  = file_get_contents("http://www.example.com/foo.txt");

/* Leer un archivo remoto desde www.example.com usando HTTPS */
$archivo_https = file_get_contents("https://www.example.com/foo.txt");

/* Leer un archivo remoto desde ftp.example.com usando FTP */
$archivo_ftp   = file_get_contents("ftp://usuario:contrasenya@ftp.example.com/foo.txt");

/* Leer un archivo remoto desde ftp.example.com usando FTPS */
$archivo_ftps  = file_get_contents("ftps://usuario:contrasenya@ftp.example.com/foo.txt");
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Realizar una petici&oacute;n POST a un servidor
      https</title>
      <programlisting role="php">
<![CDATA[
<?php
/* Enviar una peticion POST a https://seguro.example.com/formulario.php
 * Incluir elementos de formulario llamados "foo" y "bar" con valores
 * de prueba
 */

$sock = fsockopen("ssl://seguro.example.com", 443, $errno, $errstr, 30);
if (!$sock) die("$errstr ($errno)\n");

$datos = "foo=" . urlencode("Valor para Foo") . "&bar=" . urlencode("Valor para Bar");

fwrite($sock, "POST /formulario.php HTTP/1.0\r\n");
fwrite($sock, "Host: seguro.example.com\r\n");
fwrite($sock, "Content-type: application/x-www-form-urlencoded\r\n");
fwrite($sock, "Content-length: " . strlen($datos) . "\r\n");
fwrite($sock, "Accept: */*\r\n");
fwrite($sock, "\r\n");
fwrite($sock, "$data\r\n");
fwrite($sock, "\r\n");

$cabeceras = "";
while ($cadena = trim(fgets($sock, 4096)))
  $cabeceras .= "$cadena\n";

echo "\n";

$cuerpo = "";
while (!feof($sock))
  $cuerpo .= fgets($sock, 4096);

fclose($sock);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Escritura de datos a un archivo comprimido</title>
      <programlisting role="php">
<![CDATA[
<?php
/* Crear un archivo comprimido que contenga una cadena arbitraria
 * El archivo puede ser leido de vuelta usando una secuencia
 * compress.zlib o simplemente descomprimido desde la linea de comandos
 * usando 'gzip -d foo-bar.txt.gz'
 */
$da = fopen("compress.zlib://foo-bar.txt.gz", "wb");
if (!$da) die("No fue posible crear el archivo.");

fwrite($da, "Esto es una prueba.\n");

fclose($da);
?>
]]>
      </programlisting>
     </example>
    </para>
   </section>
  </partintro>

&reference.stream.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
