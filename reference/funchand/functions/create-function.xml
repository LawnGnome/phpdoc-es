<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.7 Maintainer: lboshell Status: ready -->
<!-- splitted from ./en/functions/funchand.xml, last change in rev 1.1 -->
  <refentry id="function.create-function">
   <refnamediv>
    <refname>create_function</refname>
    <refpurpose>Crear una funci&oacute;n an&oacute;nima
    (estilo-lambda)</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis>
      <type>string</type><methodname>create_function</methodname>
      <methodparam><type>string</type><parameter>args</parameter></methodparam>
      <methodparam><type>string</type><parameter>codigo</parameter></methodparam>
     </methodsynopsis>
    <para>
     Crea una funci&oacute;n an&oacute;nima con los par&aacute;metros
     pasados, y devuelve un nombre &uacute;nico para ella. Por lo
     general los <parameter>args</parameter> ser&aacute;n pasados como
     una cadena delimitada por comillas sencillas, y esto es
     recomendable tambi&eacute;n para el
     <parameter>codigo</parameter>. La raz&oacute;n para usar cadenas
     entre comillas sencillas es evitar que los nombres de variables
     sean interpretados, de otro modo, si usa comillas dobles
     ser&aacute; necesario escapar los nombres de variables, p.ej.
     <literal>\$una_var</literal>.
    </para>
    <para>
     Es posible usar esta funci&oacute;n para (por ejemplo) crear una
     funci&oacute;n a partir de informaci&oacute;n recogida en tiempo
     de ejecuci&oacute;n:
    </para>
    <para>
     <example>
      <title>
       Creaci&oacute;n de una funci&oacute;n an&oacute;nima con
       <function>create_function</function>
      </title>
      <programlisting role="php">
<![CDATA[
<?php
$nueva_func = create_function('$a,$b', 'return "ln($a) + ln($b) = " . log($a * $b);');
echo "Nueva funcion anonima: $nueva_func\n";
echo $nueva_func(2, M_E) . "\n";
// imprime
// Nueva funcion anonima: lambda_1
// ln(2) + ln(2.718281828459) = 1.6931471805599
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     O, quiz&aacute;s para tener una funci&oacute;n de gesti&oacute;n
     general que pueda aplicar un conjunto de operaciones a una lista
     de par&aacute;metros:
    </para>
    <para>
     <example>
      <title>
       Creaci&oacute;n de una funci&oacute;n general de procesamiento
       con <function>create_function</function>
      </title>
      <programlisting role="php">
<![CDATA[
<?php
function procesar($var1, $var2, $f_matriz)
{
    foreach ($f_matriz as $f) {
        echo $f($var1, $var2) . "\n";
    }
}

// crear un grupo de funciones matematicas
$f1 = 'if ($a >=0) {return "b*a^2 = ".$b*sqrt($a);} else {return false;}';
$f2 = "return \"min(b^2+a, a^2,b) = \".min(\$a*\$a+\$b,\$b*\$b+\$a);";
$f3 = 'if ($a > 0 && $b != 0) {return "ln(a)/b = ".log($a)/$b; } else { return false; }';
$f_matriz = array(
    create_function('$x,$y', 'return "operacion trigonometrica: ".(sin($x) + $x*cos($y));'),
    create_function('$x,$y', 'return "una hipotenusa: ".sqrt($x*$x + $y*$y);'),
    create_function('$a,$b', $f1),
    create_function('$a,$b', $f2),
    create_function('$a,$b', $f3)
    );

echo "\nUsando la primera matriz de funciones anonimas\n";
echo "parametros: 2.3445, M_PI\n";
procesar(2.3445, M_PI, $f_matriz);

// ahora crear un grupo de funciones de procesamiento de cadenas
$g_matriz = array(
    create_function('$b,$a', 'if (strncmp($a, $b, 3) == 0) return "** \"$a\" '.
    'y \"$b\"\n** lucen igual! (mirando los 3 primeros caracteres)";'),
    create_function('$a,$b', '; return "CRCs: " . crc32($a) . " , ".crc32(b);'),
    create_function('$a,$b', '; return "similar(a,b) = " . similar_text($a, $b, &$p) . "($p%)";')
    );
echo "\nUsando la segunda matriz de funciones anonimas\n";
procesar("Twas brilling and the slithy toves", "Twas the night", $g_matriz);
?>
]]>
      </programlisting>
      <para>
       y cuando ejecute el c&oacute;digo anterior, la salida
       ser&aacute;:
      </para>
      <screen>
<![CDATA[
Usando la primera matriz de funciones anonimas
parametros: 2.3445, M_PI
operacion trigonometrica: -1.6291725057799
una hipotenusa: 3.9199852871011
b*a^2 = 4.8103313314525
min(b^2+a, a^2,b) = 8.6382729035898
ln(a/b) = 0.27122299212594

Usando la segunda matriz de funciones anonimas
** "Twas the night" y "Twas brilling and the slithy toves"
** lucen igual! (mirando los 3 primeros caracteres)
CRCs: -725381282 , 1908338681
similar(a,b) = 11(45.833333333333%)
]]>
      </screen>
     </example>
    </para>
    <para>
     Pero quiz&aacute;s el uso m&aacute;s com&uacute;n para funciones
     estilo-lambda (an&oacute;nimas) es crear llamadas de retorno, por
     ejemplo cuando se usa <function>array_walk</function> o
     <function>usort</function>
    </para>
    <para>
     <example>
      <title>Uso de funciones an&oacute;nimas como llamadas de
      retorno</title>
      <programlisting role="php">
<![CDATA[
<?php
$av = array("el ", "un ", "ese ", "este ");
array_walk($av, create_function('&$v,$k', '$v = $v . "mango";'));
print_r($av);
?>
]]>
      </programlisting>
      <para>
       imprime:
      </para>
      <screen>
<![CDATA[
Array
(
  [0] => el mango
  [1] => un mango
  [2] => ese mango
  [3] => este mango
)
]]>
      </screen>
      <para>
       una matriz de cadenas ordenadas desde la m&aacute;s corta a la
       m&aacute;s larga
      </para>
      <programlisting role="php">
<![CDATA[
<?php

$sv = array("corta", "mas larga", "una cadena grande", "es una cosa como una cadena");
print_r($sv);

?>
]]>
      </programlisting>
      <para>
       imprime:
      </para>
      <screen>
<![CDATA[
Array
(
    [0] => corta
    [1] => mas larga
    [2] => una cadena grande
    [3] => es una cosa como una cadena
)
]]>
      </screen>
      <para>
       ordenarla desde la m&aacute;s larga a la m&aacute;s corta
      </para>
      <programlisting role="php">
<![CDATA[
<?php

usort($sv, create_function('$a,$b','return strlen($b) - strlen($a);'));
print_r($sv);

?>
]]>
      </programlisting>
      <para>
       imprime:
      </para>
      <screen>
<![CDATA[
Array
(
    [0] => es una cosa como una cadena
    [1] => una cadena grande
    [2] => mas larga
    [3] => corta
)
]]>
      </screen>
     </example>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
