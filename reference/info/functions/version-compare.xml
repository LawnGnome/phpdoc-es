<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: n/a Maintainer: lboshell Status: ready -->
<refentry xml:id="function.version-compare" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>version_compare</refname>
  <refpurpose>Compara dos cadenas de número de versión
  "PHP-estándar"</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>version_compare</methodname>
   <methodparam><type>string</type><parameter>version1</parameter></methodparam>
   <methodparam><type>string</type><parameter>version2</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>operador</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>version_compare</function> compara dos cadenas de número de
   versión "PHP-estandarizadas". Esto es útil si quisiera escribir programas
   que trabajen solo en algunas versiones de PHP.
  </para>
  <para>
   La función comienza por reemplazar <literal>_</literal>,
   <literal>-</literal> y <literal>+</literal> con un punto
   <literal>.</literal> en las cadenas de versión, y también inserta puntos
   <literal>.</literal> antes y después de cualquier secuencia no numérica,
   de modo que por ejemplo '4.3.2RC1' se convierte en '4.3.2.RC.1'. Luego
   separa los resultados como si se usara explode('.', $ver). Luego compara
   las partes de izquierda a derecha. Si una parte contiene cadenas de
   versión especiales, éstas son gestionadas en el siguiente orden:
   <literal>dev</literal> &lt; <literal>alpha</literal> =
   <literal>a</literal> &lt; <literal>beta</literal> = <literal>b</literal>
   &lt; <literal>RC</literal> &lt; <literal>pl</literal>. De este modo, no
   solo las versiones con diferentes niveles, como '4.1' y '4.1.2' pueden
   ser comparadas, sino que también cualquier versión específica de PHP que
   contenga un indicador de estado de desarrollo.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>version1</parameter></term>
     <listitem>
      <para>
       Primer número de versión.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>version2</parameter></term>
     <listitem>
      <para>
       Segundo número de versión.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>operador</parameter></term>
     <listitem>
      <para>
       Si especifica el tercer argumento opcional
       <parameter>operador</parameter>, puede realizar pruebas por una
       relación en particular. Los operadores posibles son:
       <literal>&lt;</literal>, <literal>lt</literal>,
       <literal>&lt;=</literal>, <literal>le</literal>,
       <literal>&gt;</literal>, <literal>gt</literal>,
       <literal>&gt;=</literal>, <literal>ge</literal>,
       <literal>==</literal>, <literal>=</literal>, <literal>eq</literal>,
       <literal>!=</literal>, <literal>&lt;&gt;</literal>,
       <literal>ne</literal> respectivamente. Mediante el uso de este
       argumento, la función devolverá &true; si la relación es la
       especificada por el operador, o &false; de lo contrario.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>version_compare</function> devuelve -1 si la primera versión es
   inferior a la segunda, 0 si son iguales, y +1 si la segunda es menor.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>version_compare</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// imprime -1
echo version_compare("4.0.4", "4.0.6");

// todos estos casos imprimen 1
echo version_compare("4.0.4", "4.0.6", "<");
echo version_compare("4.0.6", "4.0.6", "eq");
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    La constante <constant>PHP_VERSION</constant> almacena la versión actual
    de PHP.
   </para>
  </note>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
