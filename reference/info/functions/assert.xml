<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.6 Maintainer: lboshell Status: ready -->
<!-- splitted from ./en/functions/info.xml, last change in rev 1.51 -->
  <refentry id="function.assert">
   <refnamediv>
    <refname>assert</refname>
    <refpurpose>Revisa si la aserci&oacute;n es evaluada a &false;</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis>
      <type>int</type><methodname>assert</methodname>
      <methodparam><type>mixed</type><parameter>asercion</parameter></methodparam>
     </methodsynopsis>
    <para>
<function>assert</function> revisar&aacute;
la <parameter>asercion</parameter> dada y tomar&aacute; una
acci&oacute;n apropiada si su resultado es &false;.
    </para>
    <para>
Si la <parameter>asercion</parameter> es dada como una cadena,
&eacute;sta ser&aacute; evaluada como c&oacute;digo PHP
por <function>assert</function>. Las ventajas de
una <parameter>asercion</parameter> tipo cadena son menor sobrecarga
cuando el chequeo de aserciones se encuentre deshabilitado, y la
producci&oacute;n de mensajes que contengan la
expresi&oacute;n <parameter>asercion</parameter> cuando &eacute;sta
falle. Esto quiere decir que si pasa una condici&oacute;n booleana
como <parameter>asercion</parameter>, &eacute;sta condici&oacute;n no
aparecer&aacute; como par&aacute;metro de la funci&oacute;n de
aserci&oacute;n, la cual pudo haber definido con la
funci&oacute;n <function>assert_options</function>, la
condici&oacute;n es convertida en una cadena antes de llamar tal
funci&oacute;n gestora, y el valor booleano &false; es convertido como
una cadena vac&iacute;a.
    </para>
    <para>
Las aserciones deben ser usadas como una caracter&iacute;stica de
depuraci&oacute;n &uacute;nicamente. Puede usarlas para realizar
chequeos de integridad que prueben condiciones que deber&iacute;an ser
siempre &true; y que indiquen algunos errores de programaci&oacute;n
si no se cumplen, o que chequeen por la presencia de ciertas
caracter&iacute;sticas como las funciones de extensi&oacute;n, o
ciertos l&iacute;mites y caracter&iacute;sticas de sistema.
    </para>
    <para>
Las aserciones no deber&iacute;an ser usadas para operaciones normales
de tiempo de ejecuci&oacute;n como chequeos de par&aacute;metros de
entrada. Como regla de oro, su c&oacute;digo deber&iacute;a trabajar
correctamente siempre si el chequeo de aserciones no est&aacute;
activado.
    </para>
    <para>
El comportamiento de <function>assert</function> puede ser configurado
por <function>assert_options</function> o mediante los
par&aacute;metros .ini descritos en su respectiva p&aacute;gina del
manual.
    </para>
    <para>
La funci&oacute;n <function>assert_options</function> o la directiva
de configuraci&oacute;n ASSERT_CALLBACK permiten el uso de llamadas de
retorno para gestionar las aserciones fallidas.
    </para>
    <para>
Las llamadas de retorno de <function>assert</function> son
particularmente &uacute;tiles para productos que prueben procesos
automatizados de generaci&oacute;n, ya que le permitin capturar
f&aacute;cilmente el c&oacute;digo pasado a la aserci&oacute;n, junto
con informaci&oacute;n sobre d&oacute;nde se cre&oacute; la
aserci&oacute;n. Aunque esta informaci&oacute;n puede ser capturada
mediante otros m&eacute;todos, &iexcl;el uso de aserciones lo hace
mucho m&aacute;s r&aacute;pido y sencillo!
    </para>
    <para>
La llamada de retorno debe aceptar tres argumentos. El primer
argumento contendr&aacute; el archivo en el que ha fallado la
aserci&oacute;n. El segundo argumento contendr&aacute; la l&iacute;nea
en la que fall&oacute; la aserci&oacute;n, y el tercer argumento
contendr&aacute; la expresi&oacute;n que fall&oacute; (si est&aacute;
disponible - valores literales como 1 o "dos" no ser&aacute;n pasados
a trav&eacute;s de este argumento).
    </para>
    <para>
     <example>
      <title>Gestionar una aserci&oacute;n fallida con una funci&oacute;n personalizada</title>
      <programlisting role="php">
<![CDATA[
<?php
// Activar las aserciones y hacerlas calladas
assert_options(ASSERT_ACTIVE, 1);
assert_options(ASSERT_WARNING, 0);
assert_options(ASSERT_QUIET_EVAL, 1);

// Crear una funcion gestora
function mi_gestor_de_asercion($archivo, $linea, $codigo) {
    echo "<hr>Aserci&oacute;n Fallida:
        Archivo '$archivo'<br />
        Linea   '$linea'<br />
        Codigo  '$codigo'<br /><hr />";
}

// Configurar la llamada de retorno
assert_options(ASSERT_CALLBACK, 'mi_gestor_de_asercion');

// Crear una aserci&oacute;n que deber&iacute;a fallar
assert('mysql_query ("")');
?>
]]>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
