<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: n/a Maintainer: lboshell Status: ready -->
<refentry xml:id="function.assert" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>assert</refname>
  <refpurpose>Revisa si la aserción es evaluada a &false;</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>assert</methodname>
   <methodparam><type>mixed</type><parameter>asercion</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>assert</function> revisará la <parameter>asercion</parameter>
   dada y tomará una acción apropiada si su resultado es &false;.
  </para>
  <para>
   Si la <parameter>asercion</parameter> es dada como una cadena, ésta será
   evaluada como código PHP por <function>assert</function>. Las ventajas de
   una <parameter>asercion</parameter> tipo cadena son menor sobrecarga
   cuando el chequeo de aserciones se encuentre deshabilitado, y la
   producción de mensajes que contengan la expresión
   <parameter>asercion</parameter> cuando ésta falle. Esto quiere decir que
   si pasa una condición booleana como <parameter>asercion</parameter>, esta
   condición no aparecerá como parámetro de la función de aserción, la cual
   pudo haber definido con la función <function>assert_options</function>,
   la condición es convertida en una cadena antes de llamar tal función
   gestora, y el valor booleano &false; es convertido como una cadena vacía.
  </para>
  <para>
   Las aserciones deben ser usadas como una característica de depuración
   únicamente. Puede usarlas para realizar chequeos de integridad que
   prueben condiciones que deberían ser siempre &true; y que indiquen
   algunos errores de programación si no se cumplen, o que chequeen por la
   presencia de ciertas características como las funciones de extensión, o
   ciertos límites y características de sistema.
  </para>
  <para>
   Las aserciones no deberían ser usadas para operaciones normales de tiempo
   de ejecución como chequeos de parámetros de entrada. Como regla de oro,
   su código debería trabajar correctamente siempre si el chequeo de
   aserciones no está activado.
  </para>
  <para>
   El comportamiento de <function>assert</function> puede ser configurado
   por <function>assert_options</function> o mediante los parámetros .ini
   descritos en su respectiva página del manual.
  </para>
  <para>
   La función <function>assert_options</function> o la directiva de
   configuración ASSERT_CALLBACK permiten el uso de llamadas de retorno para
   gestionar las aserciones fallidas.
  </para>
  <para>
   Las llamadas de retorno de <function>assert</function> son
   particularmente útiles para productos que prueben procesos automatizados
   de generación, ya que le permitin capturar fácilmente el código pasado a
   la aserción, junto con información sobre dónde se creó la aserción.
   Aunque esta información puede ser capturada mediante otros métodos, ¡el
   uso de aserciones lo hace mucho más rápido y sencillo!
  </para>
  <para>
   La llamada de retorno debe aceptar tres argumentos. El primer argumento
   contendrá el archivo en el que ha fallado la aserción. El segundo
   argumento contendrá la línea en la que falló la aserción, y el tercer
   argumento contendrá la expresión que falló (si está disponible - valores
   literales como 1 o "dos" no serán pasados a través de este argumento).
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>asercion</parameter></term>
     <listitem>
      <para>
       La aserción.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &false; si la aserción es falsa, &true; de lo contrario.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Gestionar una aserción fallida con una función
    personalizada</title>
    <programlisting role="php">
<![CDATA[
<?php
// Activar las aserciones y hacerlas silenciosas
assert_options(ASSERT_ACTIVE, 1);
assert_options(ASSERT_WARNING, 0);
assert_options(ASSERT_QUIET_EVAL, 1);

// Crear una función gestora
function mi_gestor_de_asercion($archivo, $linea, $codigo)
{
    echo "<hr>Aserción Fallida:
        Archivo '$archivo'<br />
        Línea   '$linea'<br />
        Código  '$codigo'<br /><hr />";
}

// Configurar la llamada de retorno
assert_options(ASSERT_CALLBACK, 'mi_gestor_de_asercion');

// Crear una aserción que debería fallar
assert('mysql_query ("")');
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
