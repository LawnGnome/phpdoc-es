<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: benjamin Status: working -->
<refentry xmlns:xlink="http://www.w3.org/1999/xlink" xmlns="http://docbook.org/ns/docbook" xml:id="function.crypt">
 <refnamediv>
  <refname>crypt</refname>
  <refpurpose>Encripta una cadena mediante un algoritmo no reversible (hash)</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>crypt</methodname>
   <methodparam><type>string</type><parameter>str</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>salt</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>crypt</function> devolverá una cadena encriptada usando el 
   algoritmo estándar de Unix basado en <abbrev> DES </abbrev> o usando 
   algoritmos alternativos que pueden estar disponibles en el sistema.
  </para>
  <para>
   Algunos sistemas operativos soportan más de un tipo de encriptación.
   De hecho, algunas veces la encriptación estándar basada en DES es sustituida
   por un algoritmo de encriptación basado en MD5. El tipo de 
   encriptación se selecciona en base al argumento salt. 
   Para versiones anteriores a la 5.3, PHP determinará los algoritmos disponibles
   al momento de la instalación sobre la base de crypt() del sistema.  
   Si no se proporciona el parámetro salt, PHP autogenerará por defecto 
   un salt de dos caracteres basado en el estandar DES, o de doce caracteres (MD5)
   dependiendo de la disponibilidad de crypt() de MD5. PHP establece
   una constante llamada  <constant>CRYPT_SALT_LENGTH</constant> que indica 
   si el parámetro salt tienen una longitud válida permitida por los tipos de encriptación
   disponibles 
  </para>
  <para>
   La función estandar de encriptación <function>crypt</function> basado en DES
   devuelve salt como los dos primeros caracteres de la salida.
   Además sólo se utiliza los primeros ocho caracteres del parámetro <parameter>str</parameter>,
   para cadenas mas largas que comienzan con los mismos 8 caracteres generará el mismo resultado
   (siempre que se emplee el mismo salt).
  </para>
  <simpara>
   En los sistemas donde la función crypt () soporta múltiples
   tipos de encriptación, las siguientes constantes se establecen en 0 o 1
   dependiendo de si un determinado tipo está disponible:
  </simpara>
  <itemizedlist>
   <listitem>
    <simpara>
     <constant>CRYPT_STD_DES</constant> - Encriptación basada en el estándar DES con salt de 2 caracteres
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_EXT_DES</constant> - Extended DES-based hash. The "salt" is a
     9-character string consisting of an underscore followed by 4 bytes of iteration count and
     4 bytes of salt. These are encoded as printable characters, 6 bits per character, least
     significant character first. The values 0 to 63 are encoded as "./0-9A-Za-z".  
     Encriptación Extendida basada en el estándar DES. Donde "salt" es una cadena de 9 caracteres
     que consiste en un guión seguido de 4 bytes de iteraciones y 4 bytes de salt 
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_MD5</constant> - MD5 hashing with a twelve character salt starting with
     $1$
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_BLOWFISH</constant> - Blowfish hashing with a salt as follows:
     "$2a$", a two digit cost parameter, "$", and 22 base 64 digits from the alphabet
     "./0-9A-Za-z". Using characters outside of this range in the salt will cause crypt() to
     return a zero-length string. The two digit cost parameter is the base-2 logarithm of the
     iteration count for the underlying Blowfish-based hashing algorithmeter and must be in
     range 04-31, values outside this range will cause crypt() to select DES instead, with a salt
     of '$2'.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_SHA256</constant> - SHA-256 hash with a sixteen character salt
     prefixed with $5$. If the salt string starts with 'rounds=&lt;N&gt;$', the numeric value of N
     is used to indicate how many times the hashing loop should be executed, much like the cost
     parameter on Blowfish. The default number of rounds is 5000, there is a minimum of
     1000 and a maximum of 999,999,999. Any selection of N outside this range will be truncated to
     the nearest limit.
    </simpara>
   </listitem>
   <listitem>
    <simpara>
     <constant>CRYPT_SHA512</constant> - SHA-512 hash with a sixteen character salt
     prefixed with $6$. If the salt string starts with 'rounds=&lt;N&gt;$', the numeric value of N
     is used to indicate how many times the hashing loop should be executed, much like the cost
     parameter on Blowfish. The default number of rounds is 5000, there is a minimum of
     1000 and a maximum of 999,999,999. Any selection of N outside this range will be truncated to
     the nearest limit.
    </simpara>
   </listitem>
  </itemizedlist>
  <note>
   <para>
    As of PHP 5.3.0, PHP contains its own implementation and will use that
    if the system lacks of support for one or more of the algorithms.
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>str</parameter></term>
     <listitem>
      <para>
       Cadena que será encriptada 
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>salt</parameter></term>
     <listitem>
      <para>
       An optional salt string to base the hashing on. If not provided,
       one will be randomly generated by PHP each time you call this function.
      </para>
      <para>
       If you are using the supplied salt, you should be aware that the salt
       is generated once. If you are calling this function repeatedly, this
       may impact both appearance and security.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Returns the hashed string or a string that is shorter than 13 characters
   and is guaranteed to differ from the salt on failure.
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.3.2</entry>
       <entry>
        Added SHA-256 and SHA-512 crypt based on Ulrich Drepper's 
        <link xlink:href="&url.crypt.sha;">implementation</link>.
       </entry>
      </row>
      <row>
       <entry>5.3.0</entry>
       <entry>
        PHP now contains its own implementation for the MD5 crypt, Standard DES,
        Extended DES and the Blowfish algorithms and will use that if the system
        lacks of support for one or more of the algorithms.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplos<function>crypt</function> </title>
    <programlisting role="php">
<![CDATA[
<?php
$password = crypt('mypassword'); // Deja que salt se genere de forma automática


/* Para realizar las comprobaciones de contrasenas, se debe establecer como valor de la 
 salt el valor completo devuelto por crypt(). De esta forma, se evitan los 
 problemas que se pueden producir cuando se emplean diferentes algoritmos de 
 encriptacion. (Como se detalla previamente, el metodo DES estandar emplea un salt 
 de 2 caracteres mientras que el metodo MD5 utiliza un salt de 12 caracteres.
 */   
   
if (crypt($user_input, $password) == $password) {
   echo "Password verificado!";
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Utilizando <function>crypt</function> con htpasswd</title>
    <programlisting role="php">
<![CDATA[
<?php
// Estableciendo un password
$password = 'mypassword';

// Obtener el hash, generandose la semilla de forma aleatoria
$hash = crypt($password);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Utilizando <function>crypt</function> con diferentes tipos de hash</title>
    <programlisting role="php">
<![CDATA[
<?php
if (CRYPT_STD_DES == 1) {
    echo 'DES estandar: ' . crypt('rasmuslerdorf', 'rl') . "\n";
}

if (CRYPT_EXT_DES == 1) {
    echo 'DES extendido: ' . crypt('rasmuslerdorf', '_J9..rasm') . "\n";
}

if (CRYPT_MD5 == 1) {
    echo 'MD5:          ' . crypt('rasmuslerdorf', '$1$rasmusle$') . "\n";
}

if (CRYPT_BLOWFISH == 1) {
    echo 'Blowfish:     ' . crypt('rasmuslerdorf', '$2a$07$usesomesillystringforsalt$') . "\n";
}

if (CRYPT_SHA256 == 1) {
    echo 'SHA-256:      ' . crypt('rasmuslerdorf', '$5$rounds=5000$usesomesillystringforsalt$') . "\n";
}

if (CRYPT_SHA512 == 1) {
    echo 'SHA-512:      ' . crypt('rasmuslerdorf', '$6$rounds=5000$usesomesillystringforsalt$') . "\n";
}
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
DES estandar: rl.3StKT.4T8M
DES extendido: _J9..rasmBYk8r9AiWNc
MD5:          $1$rasmusle$rISCgZzpwk3UhDidwXvin0
Blowfish:     $2a$07$usesomesillystringfore2uDLvp1Ii2e./U9C8sBjqp8I90dH6hi
SHA-256:      $5$rounds=5000$usesomesillystri$KqJWpanXZHKq2BOB43TSaYhEWsQ1Lr5QNyPCDH/Tp.6
SHA-512:      $6$rounds=5000$usesomesillystri$D4IrlXatmP7rx3P3InaxBeoomnAihCKRVQP22JZ6EY47Wc6BkroIuUUBOov1i.S5KPgErtP/EN5mcO.ChWQW21
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <simpara>
    There is no decrypt function, since <function>crypt</function> uses a
    one-way algorithm.
   </simpara>
  </note>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>md5</function></member>
    <member>La extensión <link linkend="ref.mcrypt">Mcrypt</link></member>
    <member>The Unix man page for your crypt function for more information</member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

