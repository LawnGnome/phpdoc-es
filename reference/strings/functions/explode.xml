<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 299897 Maintainer: yago Status: ready -->
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.explode">
 <refnamediv>
  <refname>explode</refname>
  <refpurpose>Divide una cadena en varias cadenas</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>array</type><methodname>explode</methodname>
   <methodparam><type>string</type><parameter>delimiter</parameter></methodparam>
   <methodparam><type>string</type><parameter>string</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>limit</parameter></methodparam>
  </methodsynopsis>
  <para>
   Devuelve un array de cadenas, siendo cada una de ellas una subcadena del
   parámetro <parameter>string</parameter> formado por la división 
   según los delimitadores indicados en el parámetro <parameter>delimiter</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>delimiter</parameter></term>
     <listitem>
      <para>
       La cadena delimitadora.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>string</parameter></term>
     <listitem>
      <para>
       La cadena de entrada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>limit</parameter></term>
     <listitem>
      <para>
       Si el parámetro <parameter>limit</parameter> es positivo, el array devuelto contendrá
       el máximo de elementos en el <parameter>limit</parameter> y el último elemento
       contendrá el resto del <parameter>string</parameter>.
      </para>
      <para>
       Si el parámetro <parameter>limit</parameter> es negativo, se devolverán
       todos los componentes a excepción el último -<parameter>limit</parameter>.
      </para>
      <para>
       Si el parámetro <parameter>limit</parameter> es cero, actuará como si su valor fuera 1.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
  <para>
   Aunque <function>implode</function> por razones históricas puede
   aceptar los parámetros en cualquier orden,
   <function>explode</function> no. Debe asegurarse de que el 
   argumento <parameter>delimiter</parameter> va antes que 
   el argumento <parameter>string</parameter>.
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un <type>array</type> de <type>cadenas</type>s
   creadas por la división del parámetro <parameter>string</parameter> usando
   los limitadores indicados en el parámetro <parameter>delimiter</parameter>.
  </para>
  <para>
   Si <parameter>delimiter</parameter> es una <type>cadena</type> vacía (""),
   <function>explode</function> devolverá &false;.
   Si <parameter>delimiter</parameter> contiene un valor que no 
   forma parte del parámetro <parameter>string</parameter> y se utiliza un
   <parameter>limit</parameter> negativo, entonces se devolverá un <type>array</type>,
   en caso contrario se devolverá un <type>array</type> conteniendo el
   <parameter>string</parameter>.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.1.0</entry>
       <entry>
        Se añadió soporte para <parameter>limit</parameter> negativo.
       </entry>
      </row>
      <row>
       <entry>4.0.1</entry>
       <entry>
        Se añadió el parámetro <parameter>limit</parameter>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>explode</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Ejemplo 1
$pizza  = "piece1 piece2 piece3 piece4 piece5 piece6";
$pieces = explode(" ", $pizza);
echo $pieces[0]; // piece1
echo $pieces[1]; // piece2

// Ejemplo 2
$data = "foo:*:1023:1000::/home/foo:/bin/sh";
list($user, $pass, $uid, $gid, $gecos, $home, $shell) = explode(":", $data);
echo $user; // foo
echo $pass; // *

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Ejemplos del parámetro <parameter>limit</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php
$str = 'one|two|three|four';

// positive limit
print_r(explode('|', $str, 2));

// negative limit (since PHP 5.1)
print_r(explode('|', $str, -1));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => one
    [1] => two|three|four
)
Array
(
    [0] => one
    [1] => two
    [2] => three
)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.bin-safe;
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>preg_split</function></member>
    <member><function>str_split</function></member>
    <member><function>str_word_count</function></member>
    <member><function>strtok</function></member>
    <member><function>implode</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
