<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
<!-- EN-Revision: 1.15 Maintainer: javi Status: ready -->
<!-- splitted from ./en/functions/strings.xml, last change in rev 1.2 -->
  <refentry xml:id="function.echo" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
   <refnamediv>
    <refname>echo</refname>
    <refpurpose>Muestra una o m&aacute;s cadenas</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis>
      <type>void</type><methodname>echo</methodname>
      <methodparam><type>string</type><parameter>arg1</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>...</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Muestra todos sus par&aacute;metros por la salida definida.
    </simpara>
    <para>
     <function>echo</function> no es realmente una funci&oacute;n (es una 
     sentencia del lenguaje) de modo que no se requiere el uso de 
     los par&eacute;ntesis. De hecho, si se indica m&aacute;s de un par&aacute;metro,
	 no se pueden incluir los par&eacute;ntesis.
     <example>
      <title>Ejemplos de <function>echo</function></title>
      <programlisting role="php">
<![CDATA[
<?php
echo "Hola Mundo";

echo "Este texto se extiende
por varias lineas. Los saltos de linea
tambien se envian";

echo "Este texto se extiende\npor varias lineas. Los saltos de linea\ntambien se envian.";

echo "Para escapar caracteres, se debe indicar \"de esta forma\".";

// Se pueden usar variables dentro de una sentencia echo
$saludo = "que tal";
$despedida = "hasta luego";

echo "hola, $saludo"; // hola, que tal

// Tambien se pueden usar arrays
$cadena = array("valor" => "saludo desde un array");

echo "Esto es un {$cadena['valor']} "; // Esto es un saludo desde un array

// Si se emplean comillas simples, se muestra el nombre de la variable, no su valor
echo 'hola, $saludo'; // hola, $saludo

// Si no se anade ningun caracter, tambien es posible emplear echo para mostrar el valor de las variables
echo $saludo;             // que tal
echo $saludo,$despedida;  // que talhasta luego

// El uso de echo con multiples parametros es igual que realizar una concatenacion
echo 'Esta ', 'cadena ', 'esta ', 'construida ', 'con muchos parametros.', chr(10);
echo 'Esta ' . 'cadena ' . 'esta ' . 'construida ' . 'empleando concatenacion.' . "\n";

echo <<<FIN
Este texto utiliza una sintaxis especial que 
permite mostrar varias lineas de texto.
La etiqueta que indica el final del bloque de texto 
(y que en este caso es "FIN") debe aparecer en una 
linea que contenga solamente el valor de la etiqueta 
y un caracter de punto y coma (ni siquiera puede 
contener espacios en blanco). 
FIN;

// Como echo no es una funcion, el siguiente codigo no es valido
($una_variable) ? echo 'verdadero' : echo 'falso';

// Sin embargo, los siguientes ejemplos si que funcionan.
($una_variable) ? print('verdadero'): print('falso'); // print es una funcion
echo $una_variable ? 'verdadero': 'false'; // se modifica la sentencia a mostrar en funcion del valor de $una_variable
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <function>echo</function> tambi&eacute; funciona con una sintaxis abreviada 
	 formada por una etiqueta de apertura seguida de un signo igual.
	 La sintaxis abreviada solamente funciona si se encuentra habilitada la 
	 directiva de configuraci&oacute;n <link linkend="ini.short-open-tag">short_open_tag</link>.
     <informalexample>
      <programlisting role="php">
<![CDATA[
Tengo <?=$numero?> unidades.
]]>
      </programlisting>
     </informalexample>
    </para>
    <simpara>
	 En el siguiente articulo de la "FAQTs Knowledge Base" <link xlink:href="&url.echo-print;">&url.echo-print;
     </link> puede encontrarse una argumentaci&oacute;n sobre las diferencias 
	 entre las funciones <function>print</function> y <function>echo</function>.
    </simpara>
    
    &note.language-construct;
    
    <simpara>
     See also
     <function>print</function>,
     <function>printf</function>, y
     <function>flush</function>.
    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
