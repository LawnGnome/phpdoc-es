<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: n/a Maintainer: javi Status: ready -->
<!-- splitted from ./en/functions/strings.xml, last change in rev 1.2 -->
  <refentry xml:id="function.addcslashes" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>addcslashes</refname>
    <refpurpose>Escapa una cadena de la misma forma que lo hace C</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis>
      <type>string</type><methodname>addcslashes</methodname>
      <methodparam><type>string</type><parameter>cadena</parameter></methodparam>
      <methodparam><type>string</type><parameter>lista_caracteres</parameter></methodparam>
     </methodsynopsis>
    <para>
     Devuelve una cadena con barras invertidas antes de los caracteres 
     definidos en el par&aacute;metro <parameter>lista_caracteres</parameter>. Si 
	 <parameter>lista_caracteres</parameter> contiene caracteres como 
	 <literal>\n</literal>, <literal>\r</literal>, etc. tambi&eacute;n se convierten 
	 de la misma forma, mientras que los caracteres con c&oacute;dico ASCII inferior a 32 y superior a 
     126 son convertidos a representaci&oacute;n octal.
	</para>
    <para>
 	 Se debe tener en cuenta que si se marcan para escapar los caracteres 0, a, b, f, n, r, 
     t y v, se transforman en los caracteres especiales \0, \a, \b, \f, \n, \r, \t 
     y \v. En PHP \0 (NULL), \r (retorno de carro), \n (nueva l&iacute;nea) y \t (tabulador)  
     son secuencias de escape predefinidas, mientras que en C todos los caracteres especiales 
	 mencionados anteriormente son secuencias de escape predefinidas.
    </para>
    <para>
 	 El par&aacute;metro <parameter>lista_caracteres</parameter> puede indicar rangos 
	 como por ejemplo "\0..\37", que escapar&iacute;a todos los caracteres 
	 con c&oacute;digo ASCII entre 0 y 31.
     <example>
      <title>Ejemplo de <function>addcslashes</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$escapado = addcslashes($no_escapado, "\0..\37!@\177..\377");
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
	Al definir secuencias de caracteres en el par&aacute;metro <parameter>lista_caracteres</parameter> 
	se debe asegurar que se quieren escapar todos los caracteres incluidos 
	en el rango.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
echo addcslashes('prueba[ ]', 'A..z');
// La salida seria:  \p\r\u\e\b\a\[ \]
// Se escapan todos los caracteres en mayusculas y minusculas
// ... pero tambien los caracteres [\]^_` , los tabuladores, los retornos 
// de carro, las nuevas lineas, etc.
?>
]]>
      </programlisting>
     </informalexample>
     Adem&aacute;s, si el primer car&aacute;cter del rango tiene un valor 
	 ASCII superior al segundo car&aacute;cter que define el rango, no se 
	 puede formar el rango. En otras palabras, no se pueden definir rangos 
	 descendentes y por tanto solo se escapar&aacute;n el primer car&aacute;cter 
	 del rango, el segundo y los puntos que separan a los caracteres.
	 Para obtener el valor ASCII de un car&aacute;cter, se puede emplear 
	 la funci&oacute;n <function>ord</function>.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
echo addcslashes("zoo['.']", 'z..A');
// La salida seria:  \zoo['\.']
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    <para>
     Vea tambi&eacute;n <function>stripcslashes</function>, 
     <function>stripslashes</function>, 
     <function>htmlspecialchars</function> y  
     <function>quotemeta</function>.
    </para>
   </refsect1>
  </refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
