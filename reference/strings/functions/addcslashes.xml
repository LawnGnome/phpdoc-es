<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 288721 Maintainer: benjamin Status: ready -->
<!-- Reviewed: not --> 
<refentry xmlns="http://docbook.org/ns/docbook" xml:id="function.addcslashes">
 <refnamediv>
  <refname>addcslashes</refname>
  <refpurpose>Escapa una cadena de la misma forma que lo hace C</refpurpose>
 </refnamediv>

 <refsect1 role="description"> 
  &reftitle.description; 
  <methodsynopsis>
   <type>string</type>
   <methodname>addcslashes</methodname>
   <methodparam>
    <type>string</type>
    <parameter>str</parameter>
   </methodparam>
   <methodparam>
    <type>string</type>
    <parameter>charlist</parameter>
   </methodparam>
  </methodsynopsis>
  <para> Devuelve una cadena con barras invertidas antes de los caracteres que aparecen en
   el parámetro <parameter>charlist</parameter> </para>
 </refsect1>

 <refsect1 role="parameters"> &reftitle.parameters; <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>str</parameter>
     </term>
     <listitem>
      <para> La cadena a escapar. </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>charlist</parameter>
     </term>
     <listitem>
      <para> Una lista de caracteres que seran escapados. Si
       <parameter>charlist</parameter>  contiene caracteres como
        <literal>\n</literal>, <literal>\r</literal> etc., seran convertidos en  
       la misma forma que el estilo de C,  mientras que los caracteres con códico ASCII inferior a 32 y
       superior a 126 son convertidos a representación octal.  </para>
      <para>Cuando se define una secuencia de caracteres en el argumento charlist 
       asegúrese de  que se quieren escapar 
       todos los caracteres incluidos en el rango.<informalexample>
        <programlisting role="php">
<![CDATA[
<?php
echo addcslashes('foo[ ]', 'A..z');
// output:  \f\o\o\[ \]
// All upper and lower-case letters will be escaped
// ... but so will the [\]^_`
?>
]]>
         </programlisting>
        Además, si el primer carácter del rango tiene un valor
        ASCII superior al segundo carácter que define el rango, no se puede formar el
        rango. En otras palabras, no se pueden definir rangos descendentes y por
        tanto solo se escaparán el primer carácter del rango, el segundo y los puntos
        que separan a los caracteres. Para obtener el valor ASCII de un carácter, se
        puede emplear la función <function>ord</function>. <informalexample>
        <programlisting role="php">
<![CDATA[
<?php
echo addcslashes("zoo['.']", 'z..A');
// output:  \zoo['\.']
?>
]]>
         </programlisting>
       </informalexample>
      </para>
      <para>  Se debe tener en cuenta que si decide escapar los caracteres 0,
       a, b, f, n, r, t y v, se convertirán en \0, \a, \b,
       \f, \n, \r, \t y \v. En PHP \0 (NULL), \r (retorno de carro), \n (nueva
       línea), \ f (avance de página), \ v (tabulador vertical) y \ t (tabulador) son secuencias de escape predefinidas, mientras que
       en C todos los caracteres mencionados anteriormente son secuencias
       de escape predefinidas.  </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues"> &reftitle.returnvalues; <para> Devuelve una 
  cadena con escapes 
 </refsect1>

 <refsect1 role="changelog"> &reftitle.changelog; <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.2.5</entry>
       <entry> Las secuencias de escape \v y \f se han añadido. </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples"> &reftitle.examples; <para>
  <parameter>charlist</parameter> como "\0..\37", escaparía a todos los caracteres con código ASCII entre 0 y 31.
   <example>
    <title>Ejemplo <function>addcslashes</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$escaped = addcslashes($not_escaped, "\0..\37!@\177..\377");
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso"> &reftitle.seealso; <para>
   <simplelist>
    <member>
     <function>stripcslashes</function>
    </member>
    <member>
     <function>stripslashes</function>
    </member>
    <member>
     <function>addslashes</function>
    </member>
    <member>
     <function>htmlspecialchars</function>
    </member>
    <member>
     <function>quotemeta</function>
    </member>
   </simplelist>
  </para>
 </refsect1>
</refentry>
