<?xml version='1.0' encoding='utf-8'?>
<!-- $Revision$ -->
<!-- EN-Revision: n/a Maintainer: lboshell Status: ready -->
<refentry xml:id="function.substr-compare" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>substr_compare</refname>
  <refpurpose>Comparación de 2 cadenas, segura con material binario,
  opcionalmente insensible a mayúsculas y minúsculas, a partir de un
  desplazamiento, y hasta un número límite de caracteres</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>substr_compare</methodname>
   <methodparam><type>string</type><parameter>cadena_principal</parameter></methodparam>
   <methodparam><type>string</type><parameter>cadena</parameter></methodparam>
   <methodparam><type>int</type><parameter>desplazamiento</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>longitud</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>insensibilidad_mayusculas</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>substr_compare</function> compara
   <parameter>cadena_principal</parameter> desde la posición
   <parameter>desplazamiento</parameter> con <parameter>cadena</parameter>
   hasta tantos caracteres como el valor de <parameter>longitud</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>cadena_principal</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cadena</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>desplazamiento</parameter></term>
     <listitem>
      <para>
       La posición de inicio para la comparación. Si es un valor negativo,
       comienza contando desde el final de la cadena.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>longitud</parameter></term>
     <listitem>
      <para>
       La longitud de la comparación.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>insensibilidad_mayusculas</parameter></term>
     <listitem>
      <para>
       Si <parameter>insensibilidad_mayusculas</parameter> es &true;, la
       comparación es insensible a mayúsculas y minúsculas.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve &lt; 0 si <parameter>cadena_principal</parameter> desde la
   posición <parameter>desplazamiento</parameter> es menor que
   <parameter>cadena</parameter>, &gt; 0 si es mayor que
   <parameter>cadena</parameter>, y 0 si son iguales. Si
   <parameter>longitud</parameter> es igual o mayor que la longitud de
   <parameter>cadena_principal</parameter> y <parameter>longitud</parameter>
   se define, <function>substr_compare</function> imprime una advertencia y
   devuelve &false;.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.1.0</entry>
       <entry>
        Se agregó la posibilidad de usar un
        <parameter>desplazamiento</parameter> negativo.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Un ejemplo de <function>substr_compare</function></title>
    <programlisting role="php">
<![CDATA[
<?php
echo substr_compare("abcde", "bc", 1, 2); // 0
echo substr_compare("abcde", "de", -2, 2); // 0
echo substr_compare("abcde", "bcg", 1, 2); // 0
echo substr_compare("abcde", "BC", 1, 2, true); // 0
echo substr_compare("abcde", "bc", 1, 3); // 1
echo substr_compare("abcde", "cd", 1, 2); // -1
echo substr_compare("abcde", "abc", 5, 1); // advertencia
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
