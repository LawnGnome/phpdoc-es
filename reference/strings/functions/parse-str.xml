<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
<!-- EN-Revision: 1.10 Maintainer: javi Status: ready -->
<!-- splitted from ./en/functions/strings.xml, last change in rev 1.2 -->
  <refentry xml:id="function.parse-str" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>parse_str</refname>
    <refpurpose>Divide la cadena en variables</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis>
      <type>void</type><methodname>parse_str</methodname>
      <methodparam><type>string</type><parameter>cadena</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter role="reference">array</parameter></methodparam>
     </methodsynopsis>
    <para>
     Divide <parameter>cadena</parameter> como si fuera una cadena formada por 
	 una URL de las enviadas habitualmente en las consultas y crea las variables en el entorno de ejecuci&oacute;n actual.
	 Si se indica el segundo par&aacute;metro <parameter>array</parameter>, las variables se almacenan 
	 como elementos de ese array, en vez de crearse como variables en el entorno de ejecuci&oacute;n actual.
    </para>
    <note>
     <para>
      El soporte del segundo par&aacute;metro se incluy&oacute; en PHP 4.0.3.
     </para>
    </note>
    <note>
     <para>
      Para obtener el valor de la <emphasis>QUERY_STRING</emphasis>, se puede emplear 
	  la variable reservada <link linkend="reserved.variables.server">$_SERVER['QUERY_STRING']</link>.
	  Tambi&eacute;n puede ser de utilidad leer la secci&oacute;n de las 
      <link linkend="language.variables.external">variables externas a PHP</link>.
     </para>
    </note>
    <note>
     <para>
      La directiva de configuraci&oacute;n <link linkend="ini.magic-quotes-gpc">magic_quotes_gpc</link> 
	  afecta al comportamiento de esta funci&oacute;n, ya que <function>parse_str</function> emplea 
	  el mismo mecanismo que el utilizado por  PHP para crear las variables <literal>$_GET</literal>, 
      <literal>$_POST</literal>, etc.
     </para>
    </note>
    <para>
     <example>
      <title>Usando <function>parse_str</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$cadena = "primero=valor&amp;segundo[]=esto+funciona&amp;segundo[]=otro";
parse_str($cadena);
echo $primero;    /* escribe "valor" */
echo $segundo[0]; /* escribe "esto funciona" */
echo $segundo[1]; /* escribe "otro" */

parse_str($cadena, $salida);
echo $salida['primero'];  	/* escribe "valor" */
echo $salida['segundo'][0]; /* escribe "esto funciona" */
echo $salida['segundo'][1]; /* escribe "otro" */

?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     Vea tambi&eacute;n <function>parse_url</function>, <function>pathinfo</function>,
     <function>get_magic_quotes_gpc</function> y <function>urldecode</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
