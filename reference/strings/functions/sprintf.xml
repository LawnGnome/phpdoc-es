<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
<!-- EN-Revision: 1.15 Maintainer: lboshell Status: ready -->
<!-- splitted from ./en/functions/strings.xml, last change in rev 1.2 -->
  <refentry id="function.sprintf">
   <refnamediv>
    <refname>sprintf</refname>
    <refpurpose>Devuelve una cadena con formato</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis>
      <type>string</type><methodname>sprintf</methodname>
      <methodparam><type>string</type><parameter>formato</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>args</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     Devuelve una cadena producida de acuerdo con la cadena de formato
     <parameter>formato</parameter>.
    </simpara>
    <simpara>
     La cadena de formato se compone de cero o m&aacute;s directivas:
     caracteres ordinarios (excluyendo <literal>%</literal>) que son
     copiados directamente en el resultado, y unas
     <emphasis>especificaciones de conversi&oacute;n</emphasis>, cada
     una de las cuales produce una b&uacute;squeda por su propio
     par&aacute;metro. Esto se aplica tanto en
     <function>sprintf</function> como en <function>printf</function>.
    </simpara>
    <para>
     Cada especificaci&oacute;n de conversi&oacute;n consiste de un
     signo de porcentaje (<literal>%</literal>), seguido por uno o
     m&aacute;s de los siguientes elementos, en orden:
     <orderedlist>
      <listitem>
       <simpara>
        Un <emphasis>indicador de signo</emphasis> opcional que obliga
        a que se use un determinado signo (- o +) en un
        n&uacute;mero. De forma predeterminada, s&oacute;lo el signo -
        es usado en un n&uacute;mero si &eacute;ste es negativo. Este
        indicador obliga a los n&uacute;meros positivos a que tengan
        tambi&eacute;n el signo + adjunto, comportamiento que se
        agreg&oacute; en PHP 4.3.0.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Un <emphasis>indicador de relleno</emphasis> opcional, que
        dice qu&eacute; caracter ser&aacute; usado para adaptar el
        resultado al tama&ntilde;o de cadena apropiado. Este puede ser
        un caracter de espacio, o un <literal>0</literal> (caracter
        cero). El comportamiento predeterminado es rellenar con
        espacios. Un caracter de relleno alternativo puede
        especificarse al colocar una comilla sencilla
        (<literal>'</literal>) al comienzo. Vea los ejemplos
        m&aacute;s adelante.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Un <emphasis>indicador de alineamiento</emphasis> opcional que
        dice si el resultado debe alinearse a la izquierda o a la
        derecha. El comportamiento predeterminado es alinear a la
        derecha; un caracter <literal>-</literal> en este lugar hace
        que la alineaci&oacute;n sea a la izquierda.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Un n&uacute;mero opcional, un <emphasis>indicador de
        ancho</emphasis> que dice cu&aacute;ntos caracteres (como
        m&iacute;nimo) debe producir la conversi&oacute;n.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        Un <emphasis>indicador de precisi&oacute;n</emphasis> opcional
        que dice cu&aacute;ntos d&iacute;gitos decimales deben
        mostrarse para los n&uacute;meros de punto flotante. Cuando se
        usa este indicador con una cadena, act&uacute;a como un punto
        de corte, indicando un l&iacute;mite m&aacute;ximo de
        caracteres para la cadena.
       </simpara>
      </listitem>
      <listitem>
       <para>
        Un <emphasis>indicador de tipo</emphasis> que especifica el
        tipo bajo el que deben tratarse los datos del argumento. Los
        posibles tipos son:
        <simplelist>
         <member>
          <literal>%</literal> - un caracter de porcentaje literal. No
          requiere argumento.
         </member>
         <member>
          <literal>b</literal> - el argumento es tratado como un
          entero, presentado como un n&uacute;mero binario.
         </member>
         <member>
          <literal>c</literal> - el argumento es tratado como un
          entero, y presentado como el caracter con ese valor ASCII.
         </member>
         <member>
          <literal>d</literal> - el argumento es tratado como un
          entero, y presentado como un n&uacute;mero decimal (con
          signo).
         </member>
         <member>
          <literal>e</literal> - el argumento es tratado como
          notaci&oacute;n cient&iacute;fica (p.ej. 1.2e+2).
         </member>
         <member>
          <literal>u</literal> - el argumento es tratado como un
          entero, y presentado como un n&uacute;mero decimal sin
          signo.
         </member>
         <member>
          <literal>f</literal> - el argumento es tratado como un
          flotante, y presentado como un n&uacute;mero de punto
          flotante (teniendo en cuenta la localidad).
         </member>
         <member>
          <literal>F</literal> - el argumento es tratado como un
          flotante, y presentado como un n&uacute;mero de punto
          flotante (no tiene en cuenta la localidad). Disponible desde
          PHP 4.3.10 y PHP 5.0.3.
         </member>
         <member>
          <literal>o</literal> - el argumento es tratado como un
          entero, y presentado como un n&uacute;mero octal.
         </member>
         <member>
          <literal>s</literal> - el argumento es tratado y presentado
          como una cadena.
         </member>
         <member>
          <literal>x</literal> - el argumento es tratado como un
          entero y presentado como un n&uacute;mero hexadecimal (con
          letras min&uacute;sculas).
         </member>
         <member>
          <literal>X</literal> - el argumento es tratado como un
          entero y presentado como un n&uacute;mero hexadecimal (con
          letras may&uacute;sculas).
         </member>
        </simplelist>
       </para>
      </listitem>
     </orderedlist>
    </para>
    <para>
     A partir de PHP 4.0.6, la cadena de formato soporta la
     numeraci&oacute;n/intercambio de argumentos. He aqu&iacute; un
     ejemplo:
     <example>
      <title>Intercambio de argumentos</title>
      <programlisting role="php">
<![CDATA[
<?php
$formato = "Hay %d monos en el %s";
printf($formato, $num, $ubicacion);
?>
]]>
      </programlisting>
     </example>
     Esto podr&iacute;a imprimir, "Hay 5 monos en el
     &aacute;rbol". Pero imagine que creamos una cadena de formato en
     un archivo separado, generalmente por que queremos implementar un
     mecanismo de internacionalizaci&oacute;n, y re-escribimos el
     c&oacute;digo:
     <example>
      <title>Intercambio de argumentos</title>
      <programlisting role="php">
<![CDATA[
<?php
$formato = "El %s contiene %d monos";
printf($formato, $num, $ubicacion);
?>
]]>
      </programlisting>
     </example>
     Ahora tenemos un problema. El orden de los recipientes en la
     cadena de formato no coincide con el orden de los argumentos en
     el c&oacute;digo. Quisi&eacute;ramos dejar el c&oacute;digo tal
     como est&aacute;, y simplemente indicar en la cadena de formato
     cu&aacute;les argumentos est&aacute;n siendo referidos por los
     recipientes. Entonces re-escribir&iacute;amos la cadena de
     formato de esta forma:
     <example>
      <title>Intercambio de argumentos</title>
      <programlisting role="php">
<![CDATA[
<?php
$formato = "El %2\$s contiene %1\$d monos";
printf($formato, $num, $ubicacion);
?>
]]>
      </programlisting>
     </example>
     Un beneficio adicional de esto es que puede repetir los
     recipientes sin agregar m&aacute;s argumentos en el
     c&oacute;digo. Por ejemplo:
     <example>
      <title>Intercambio de argumentos</title>
      <programlisting role="php">
<![CDATA[
<?php
$formato = "El %2\$s contiene %1\$d monos.
           Se trata de un bonito %2\$s lleno con %1\$d monos.";
printf($formato, $num, $ubicacion);
?>
]]>
      </programlisting>
     </example>
    </para>
    <simpara>
     Vea tambi&eacute;n <function>printf</function>,
     <function>sscanf</function>, <function>fscanf</function>,
     <function>vsprintf</function>, y
     <function>number_format</function>.
    </simpara>
   </refsect1>
   <refsect1>
    <title>Ejemplos</title>
    <example>
     <title><function>printf</function>: ejemplos varios</title>
     <programlisting role="php">
<![CDATA[
<?php
$n =  43951789;
$u = -43951789;
$c = 65; // el valor ASCII 65 es 'A'

// note el doble %%, esto imprime un caracter '%' literal
printf("%%b = '%b'\n", $n); // representacion binaria
printf("%%c = '%c'\n", $c); // imprime el caracter ascii, igual que la funcion chr()
printf("%%d = '%d'\n", $n); // representacion de entero estandar
printf("%%e = '%e'\n", $n); // notacion cientifica
printf("%%u = '%u'\n", $n); // representacion entera sin signo de un entero positivo
printf("%%u = '%u'\n", $u); // representacion entera sin signo de un entero negativo
printf("%%f = '%f'\n", $n); // representacion en punto flotante
printf("%%o = '%o'\n", $n); // representacion octal
printf("%%s = '%s'\n", $n); // representacion de cadena
printf("%%x = '%x'\n", $n); // representacion hexadecimal (minusculas)
printf("%%X = '%X'\n", $n); // representacion hexadecimal (mayusculas)

printf("%%+d = '%+d'\n", $n); // indicador de signo en un entero positivo
printf("%%+d = '%+d'\n", $u); // indicador de signo en un entero negativo
?>
]]>
     </programlisting>
     <para>
      La salida de este programa ser&iacute;a:
     </para>
     <screen>
<![CDATA[
%b = '10100111101010011010101101'
%c = 'A'
%d = '43951789'
%e = '4.39518e+7'
%u = '43951789'
%u = '4251015507'
%f = '43951789.000000'
%o = '247523255'
%s = '43951789'
%x = '29ea6ad'
%X = '29EA6AD'
%+d = '+43951789'
%+d = '-43951789'
]]>
     </screen>
    </example>
    <example>
     <title><function>printf</function>: indicadores de cadena</title>
     <programlisting role="php">
<![CDATA[
<?php
$s = 'mono';
$t = 'varios monos';

printf("[%s]\n",      $s); // salida de cadena estandar
printf("[%10s]\n",    $s); // alineacion a derecha con espacios
printf("[%-10s]\n",   $s); // alineacion a izquierda con espacios
printf("[%010s]\n",   $s); // el relleno con ceros funciona con cadenas tambien
printf("[%'#10s]\n",  $s); // usar el caracter de relleno '#'
printf("[%10.10s]\n", $t); // alineacion a izquierda pero con un corte de 10 caracteres
?>
]]>
     </programlisting>
     <para>
      La salida de este programa ser&iacute;a:
     </para>
     <screen>
<![CDATA[
[mono]
[      mono]
[mono      ]
[000000mono]
[######mono]
[varios mon]
]]>
     </screen>
    </example>
    <example>
     <title><function>sprintf</function>: enteros con relleno de
     ceros</title>
     <programlisting role="php">
<![CDATA[
<?php
$fecha_iso = sprintf("%04d-%02d-%02d", $anyo, $mes, $dia);
?>
]]>
     </programlisting>
    </example>
    <example>
     <title><function>sprintf</function>: formato de valores
     monetarios</title>
     <programlisting role="php">
<![CDATA[
<?php
$dinero1 = 68.75;
$dinero2 = 54.35;
$dinero = $dinero1 + $dinero2;
// echo $dinero imprimiria "123.1";
$con_formato = sprintf("%01.2f", $dinero);
// echo $con_formato imprime "123.10"
?>
]]>
     </programlisting>
    </example>
    <example>
     <title><function>sprintf</function>: notaci&oacute;n
     cient&iacute;fica</title>
     <programlisting role="php">
<![CDATA[
<?php
$numero = 362525200;

echo sprintf("%.3e", $numero); // imprime 3.63e+8
?>
]]>
     </programlisting>
    </example>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
