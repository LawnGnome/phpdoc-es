<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.9 $ -->
<!-- EN-Revision: 1.16 Maintainer: lboshell Status: ready -->
<!-- splitted from ./en/functions/exec.xml, last change in rev 1.28 -->
  <refentry id='function.proc-open'>
   <refnamediv>
    <refname>proc_open</refname>
    <refpurpose>
     Ejecutar un comando y abrir apuntadores de archivo para entrada/salida
    </refpurpose>
   </refnamediv>
   <refsect1 role="description">
    &reftitle.description;
     <methodsynopsis>
      <type>resource</type><methodname>proc_open</methodname>
      <methodparam><type>string</type><parameter>cmd</parameter></methodparam>
      <methodparam><type>array</type><parameter>espec_descriptor</parameter></methodparam>
      <methodparam><type>array</type><parameter role="reference">pipes</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>cwd</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter>env</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter>otras_opciones</parameter></methodparam>
     </methodsynopsis>
    <para>
     <function>proc_open</function> es similar a <function>popen</function>
     pero provee un grado de control mucho mayor sobre la ejecución del
     programa.
    </para>

<!-- ptys are currently disabled in the sources
    <para>
     PHP 5 introduce soporte pty para sistemas con ptys Unix98. Esto le
     permite a su script interactuar con aplicaciones que esperan hablar con
     una terminal. Un pty trabaja como un pipe, pero es bi-direccional, así
     que no hay necesidad de especificar un modo de lectura/escritura. El
     ejemplo presentado más adelante muestra cómo usar un pty, note que no
     tiene que tener todos los descriptores hablando con un pty. También
     note que solo un pty es creado, aun cuando se especifica pty 3 veces.
     En una futura versión de PHP, puede que sea posible hacer más que solo
     leer y escribir en el pty.
    </para>
-->

   </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>cmd</parameter></term>
     <listitem>
      <para>
       El comando a ejecutar
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>espec_descriptor</parameter></term>
     <listitem>
      <para>
       Una matriz indexada en donde las llaves representan el número del
       descriptor y el valor representa el modo en que PHP pasará el
       descriptor al proceso hijo. 0 es stdin, 1 es stdout, y 2 es stderr.
      </para>
      <para>
       Los tipos de pipe soportados actualmente son <literal>file</literal>
       y <literal>pipe</literal> <!--y <literal>pty</literal>-->.
      </para>
      <para>
       Los números de descriptor de archivo no se limitan a 0, 1 y 2 - es
       posible que especifique cualquier número de descriptor de archivo
       válido y éste será pasado al proceso hijo. Esto le permite a su
       script interoperar con otros scripts que corren como "co-procesos".
       En particular, esto es útil para pasar frases secretas a programas
       como PGP, GPG y openssl de una forma más segura. También es útil para
       leer información de status ofrecida por esos programas en
       descriptores de archivo auxiliares.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>pipes</parameter></term>
     <listitem>
      <para>
       Recibirá como valor una matriz indexada de apuntadores de archivo que
       corresponden a los valores en PHP de los pipes creados.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>cwd</parameter></term>
     <listitem>
      <para>
       El directorio de trabajo inicial para el comando. Este debe ser una
       ruta de directorio <emphasis role="strong">absoluta</emphasis>, o
       &null; si desea usar el valor predeterminado (el directorio de
       trabajo del proceso PHP actual)
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>env</parameter></term>
     <listitem>
      <para>
       Una matriz con las variables de entorno para el comando que será
       ejecutado, o &null; para usar el mismo entorno que el proceso PHP
       actual
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>otras_opciones</parameter></term>
     <listitem>
      <para>
       Le permite especificar opciones adicionales. Las opciones actualmente
       soportadas incluyen:
       <simplelist>
        <member>
         <literal>suppress_errors</literal> (sólo en windows): elimina
         errores generados por esta función cuando se define como &true;
        </member>
        <member>
         <literal>bypass_shell</literal> (sólo en windows): evita el
         intérprete de comandos <literal>cmd.exe</literal> cuando se define
         como &true;
        </member>
        <member>
         <literal>context</literal>: contexto de secuencia usado cuando se
         abren archivos (creado con
         <function>stream_context_create</function>)
        </member>
        <member>
         <literal>binary_pipes</literal>: abrir pipes en modo binario, en
         lugar de usar el valor <literal>stream_encoding</literal> usual
        </member>
       </simplelist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un recurso que representa el proceso, el cual debe ser liberado
   usando <function>proc_close</function> cuando haya terminado de usarlo.
   En caso de error, devuelve &false;.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>6.0.0</entry>
       <entry>
        Se agregaron las opciones <literal>context</literal> y
        <literal>binary_pipes</literal> al parámetro
        <parameter>otras_opciones</parameter>.
       </entry>
      </row>
      <row>
       <entry>5.2.1</entry>
       <entry>
        Se agregó la opción <literal>bypass_shell</literal> al parámetro
        <parameter>otras_opciones</parameter>.
       </entry>
      </row>
      <row>
       <entry>5.0.0</entry>
       <entry>
        Se añadieron los parámetros <parameter>cwd</parameter>,
        <parameter>env</parameter> y <parameter>otras_opciones</parameter>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Un ejemplo de <function>proc_open</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$espec_descriptor = array(
   0 => array("pipe", "r"),  // stdin es un pipe usado por el hijo para lectura
   1 => array("pipe", "w"),  // stdout es un pipe usado por el hijo para escritura
   2 => array("file", "/tmp/salida-errores.txt", "a") // stderr es un archivo para escritura
);

$cwd = '/tmp';
$env = array('una_opcion' => 'aeiou');

$proceso = proc_open('php', $espec_descriptor, $pipes, $cwd, $env);

if (is_resource($proceso)) {
    // $pipes ahora luce de esta forma:
    // 0 => gestor de escritura conectado con la entrada estándar del hijo
    // 1 => gestor de lectura conectado con la salida estándar del hijo
    // Cualquier mensaje de salida de error será adicionado a /tmp/salida-errores.txt

    fwrite($pipes[0], '<?php print_r($_ENV); ?>');
    fclose($pipes[0]);

    echo stream_get_contents($pipes[1]);
    fclose($pipes[1]);

    // Es importante que cierre todos los pipes antes de llamar
    // proc_close para evitar un bloqueo muerto
    $retval = proc_close($proceso);

    echo "el comando ha devuelto $retval\n";
}
?>
]]>
    </programlisting>
    &example.outputs.similar;
    <screen>
<![CDATA[
Array
(
    [some_option] => aeiou
    [PWD] => /tmp
    [SHLVL] => 1
    [_] => /usr/local/bin/php
)
el comando ha devuelto 0
]]>
    </screen>
   </example>
  </para>

<!-- ptys are currently disabled
  <para>
   <example>
    <title>Uso de ptys</title>
    <programlisting role="php">
<![CDATA[
<?php
// Crear una pseudo terminal para el proceso hijo
$espec_descriptor = array(
   0 => array("pty"),
   1 => array("pty"),
   2 => array("pty")
);
$proceso = proc_open("cvs -d:pserver:cvsread@cvs.php.net:/repository login", $espec_descriptor, $pipes);
if (is_resource($proceso)) {
   // trabaje con el recurso aquí
}
?>
]]>
    </programlisting>
   </example>
  </para>
-->

 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Compatibilidad con Windows: Los descriptores más allá de 2 (stderr) se
    ponen a disposición del proceso hijo como gestores heredables, pero ya
    que la arquitectura de Windows no asocia números de descriptores de
    archivo con gestores de bajo nivel, el proceso hijo no tiene (aun) una
    forma de acceder a esos gestores. Stdin, stdout y stderr funcionan como
    es de esperarse.
   </para>
  </note>
  <note>
   <para>
    Si solo necesita un pipe de proceso uni-direccional (de una vía), use
    <function>popen</function> en su lugar, ya que es mucho más fácil de
    usar.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>popen</function></member>
    <member><function>exec</function></member>
    <member><function>system</function></member>
    <member><function>passthru</function></member>
    <member><function>stream_select</function></member>
    <member>El <link linkend="language.operators.execution">operador
    de comilla invertida</link></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
