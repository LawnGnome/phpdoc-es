<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: seros Status: ready -->
<!-- splitted from ./en/functions/com.xml, last change in rev 1.12 -->
<refentry xml:id="class.com" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>COM</refname>
  <refpurpose>COM class</refpurpose>
 </refnamediv>
 <refsynopsisdiv>
  <synopsis>$obj = new <classname>COM</classname>("Application.ID")</synopsis>
 </refsynopsisdiv>
 <refsect1 xml:id="class.com.class">
  <title>Descripción</title>
  <simpara>
   La clase COM permite instanciar un objeto COM compatible con OLE y
   llamar a sus métodos y accecer a sus propiedades.
  </simpara>
 </refsect1>
 <refsect1 xml:id="class.com.constructor">
  <title>Métodos</title>
  <methodsynopsis>
   <type>com</type><methodname>COM::COM</methodname>
   <methodparam><type>string</type><parameter>module_name</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>server_name</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>codepage</parameter></methodparam>
   <methodparam choice="opt"><type>string</type><parameter>typelib</parameter></methodparam>
  </methodsynopsis>
  <para>
   Constructor de la clase COM. Los parámetros tienen los siguientes significados:
   <variablelist>
    <varlistentry>
     <term>module_name</term>
     <listitem>
      <simpara>
       Puede ser un ProgID, Class ID o Moniker que nombra al componente a cargar.
      </simpara>
      <simpara>
       Un ProgID es normalmente el nombre de la aplicación o DLL, seguido de un punto,
       seguido del nombre del objeto. P.ej: <literal>Word.Application</literal>.
      </simpara>
      <simpara>
       Un Class ID es el UUID que identifica de manera única una clase dada.
      </simpara>
      <simpara>
       Un Moniker es una forma de nominación especial, similar al concepto de un esquema
       URL, que identifica un recurso y especifica cómo debería ser cargado.
       Como ejemplo, se podría cargar Word y obtener un objeto
       que represente un documento de Word especificando la ruta completa de éste
       como el nombre del módulo, o se puede usar <literal>LDAP:</literal> como
       un moniker para utilizar la interfaz ADSI para LDAP.
      </simpara>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>server_name</term>
     <listitem>
      <simpara>
       El nombre del servidor DCOM en el que se debería cargar y ejecutar el
       componente. Si es &null;, el objeto se ejecuta usando lo predeterminado para la
       aplicación. Lo predeterminado es normalmente ejecutarlo en la máquina local,
       aunque el administrador podría haber configurado la aplicación para
       lanzarlo en una máquina diferente.
      </simpara>
      <simpara>
       Si se especifica un valor distinto de &null; para el servidor, PHP rehusará cargar
       el objeto a menos que la opción de configuración
       <xref linkend="ini.com.allow-dcom"/>
       esté establecida a &true;.
      </simpara>
      <para>
       Si <parameter>server_name</parameter> es un array, debería contener los
       siguientes elementos (¡sensible a mayúsculas-minúsculas!). Observe que todos son opcionales
       (aunque se necesitan especificar Username y Password juntos); si
       se omite Server, se usará el servidor predeterminado (como
       se mencionó arriba), y la instanciación del objeto no será afectada
       por la directiva
       <xref linkend="ini.com.allow-dcom"/>.
       <table>
        <title>Nombre del servidor DCOM</title>
        <tgroup cols="3">
         <thead>
          <row>
           <entry>clave <parameter>server_name</parameter></entry>
           <entry>tipo</entry>
           <entry>descripción</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry>Server</entry>
           <entry>string</entry>
           <entry>El nombre del servidor.</entry>
          </row>
          <row>
           <entry>Username</entry>
           <entry>string</entry>
           <entry>El nombre de ususario con que se va a contectar.</entry>
          </row>
          <row>
           <entry>Password</entry>
           <entry>string</entry>
           <entry>La contraseña para <parameter>Username</parameter>.</entry>
          </row>
          <row>
           <entry>Flags</entry>
           <entry>integer</entry>
           <entry>Una o más de las siguientes constantes, lógicamente usando OR entre ellas:
            <constant>CLSCTX_INPROC_SERVER</constant>,
            <constant>CLSCTX_INPROC_HANDLER</constant>,
            <constant>CLSCTX_LOCAL_SERVER</constant>,
            <constant>CLSCTX_REMOTE_SERVER</constant>,
            <constant>CLSCTX_SERVER</constant> and
            <constant>CLSCTX_ALL</constant>.  El valor por defecto si
            no se especifica es <constant>CLSCTX_SERVER</constant> si también
            se omite <parameter>Server</parameter>, o
            <constant>CLSCTX_REMOTE_SERVER</constant> si se especifica un
            servidor. Debería consultar la documentación de Microsoft de
            CoCreateInstance para más información sobre el significado de estas
            constantes; normalmente no tendrá que usarlas nunca.
           </entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>codepage</term>
     <listitem>
      <simpara>
       Especifica la página de código que se usa para convertir cadenas a
       cadenas unicode y viceversa. La conversión se aplica siempre que se
       pasa una cadena de PHP como parámetro o es devuelta desde un método de este
       objeto COM. La página de código en PHP 5 es "pegajosa", lo que significa que se
       propagará por los objetos y variantes devueltos desde el objeto.
      </simpara>
      <simpara>
       Los valores posibles son
       <constant>CP_ACP</constant> (utiliza la página de código ANSI predeterminada del sistema - lo
       predeterminado si se omite el parámetro),
       <constant>CP_MACCP</constant>,
       <constant>CP_OEMCP</constant>, <constant>CP_SYMBOL</constant>,
       <constant>CP_THREAD_ACP</constant> (utiliza el conjunto página de código/configuración regional
       para el hilo actual en ejecución), <constant>CP_UTF7</constant>
       y <constant>CP_UTF8</constant>. También se puede usar el número para una
       página de código dada; consulte la documentación de Microsoft para más detalles sobre
       páginas de código y sus valores numéricos.
      </simpara>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 xml:id="class.com.overloadedmethods">
  <title>Métodos sobrecargados</title>
  <para>
   El objeto devuelto es un objeto sobrecargado, lo que significa que PHP
   no ve ningún método fijo como lo hace con las clases regulares; en su lugar, cualquier
   acceso a una propiedad o método es pasado a través de COM.
  </para>
  <para>
   Desde PHP 5, PHP detecta métodos que aceptan
   parámetros por referencia, y automáticamente convierte variables regulares
   de PHP a una forma que puede ser pasada por referencia. Esto significa que se
   puede llamar al método con mucha naturalidad; no se necesita ningún esfuerzo extra en
   su código.
  </para>
  <para>
   en PHP 4, para pasar parámetros por referencia se necesita crear una instancia
   de la clase <xref linkend="class.variant"/> para envolver los
   parámetros por referencia.
  </para>
 </refsect1>

 <refsect1 xml:id="class.com.falsemethods">
  <title>Pseudo Métodos</title>
  <para>
   En versiones de PHP anteriores a la 5, un número de errores no muy agradables significó que
   los siguiente nombres de métodos no fueron pasados a través de COM y que estaban directamente
   manejados por PHP. PHP 5 elimina esto; lea los detalles de abajo para
   determinar cómo arreglar sus scripts. Estos nombres de métodos mágicos son insensibles a
   mayúsculas-minúsculas.
  </para>
  <methodsynopsis>
   <type>void</type><methodname>COM::AddRef</methodname>
   <void/>
  </methodsynopsis>
  <simpara>
   Añade artificialmente una cuenta de referencias al objeto COM.
  </simpara>
  <warning>
   <simpara>
    Nunca debería de necesitar usar este método. Existe un complemento lógico para
    el método Release() de abajo.
   </simpara>
  </warning>
  <methodsynopsis>
   <type>void</type><methodname>COM::Release</methodname>
   <void/>
  </methodsynopsis>
  <simpara>
   Elimina artificialmente una cuenta de referencias de un objeto COM.
  </simpara>
  <warning>
   <simpara>
    Nunca debería de necesitar usar este método. Su existencia en PHP es un error
    diseñado para evitar un error que mantiene los objetos COM ejecutándose más de lo
    deberían.
   </simpara>
  </warning>
 </refsect1>
 <refsect1 xml:id="class.com.iteratormethods">
  <title>Pseudométodos para Iterar</title>
  <para>
   Estos pseudométodos sólo están disponibles si
   <function>com_isenum</function> devuelve &true;, en cuyo caso oculta
   cualquier método con el mismo nombre que de otro modo pudiera ser proporcionado por el
   objeto COM. Todos estos métodos han sido eliminados en PHP 5, y debería de
   usar <xref linkend="com.examples.foreach"/> en su lugar.
  </para>
  <methodsynopsis>
   <type>variant</type><methodname>COM::All</methodname>
   <void/>
  </methodsynopsis>
  <simpara>
   Devuelve una variante que representa un SafeArray que tiene 10 elementos;
   cada elemento será una variante vacía/null. Esta función se suponiá que
   devolvía un array que contenía todos los elementos del iterador, pero nunca
   fue completada. No la use.
  </simpara>
  <methodsynopsis>
   <type>variant</type><methodname>COM::Next</methodname>
   <void/>
  </methodsynopsis>
  <simpara>
   Devuelve una variante que representa el siguiente elemento disponible del
   iterador, o &false; cuando no hay más elementos.
  </simpara>
  <methodsynopsis>
   <type>variant</type><methodname>COM::Prev</methodname>
   <void/>
  </methodsynopsis>
  <simpara>Devuelve una variante que representa el elemento previo disponible del
   iterador, o &false; cuando no hay más elementos.
  </simpara>
  <methodsynopsis>
   <type>void</type><methodname>COM::Reset</methodname>
   <void/>
  </methodsynopsis>
  <simpara>
   Rebobina el iterador al inicio.
  </simpara>
 </refsect1>
 <refsect1 xml:id="class.com.examples">
  <title>Ejemplos de COM</title>
  <para>
   <example xml:id="example.com1">
    <title>Ejemplo de COM (1)</title>
    <programlisting role="php">
<![CDATA[
<?php
// iniciar word
$word = new COM("word.application") or die("Unable to instantiate Word");
echo "Loaded Word, version {$word->Version}\n";

//traerlo al frente
$word->Visible = 1;

//abrir un documento vacío
$word->Documents->Add();

//hacer alguna cosa extraña
$word->Selection->TypeText("This is a test...");
$word->Documents[1]->SaveAs("Useless test.doc");

//cerra word
$word->Quit();

//liberar el objeto
$word = null;
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example xml:id="example.com2">
    <title>Ejemplo de COM (2)</title>
    <programlisting role="php">
<![CDATA[
<?php

$conn = new COM("ADODB.Connection") or die("Cannot start ADO");
$conn->Open("Provider=SQLOLEDB; Data Source=localhost;
Initial Catalog=database; User ID=user; Password=password");

$rs = $conn->Execute("SELECT * FROM sometable");    // Recordset

$num_columns = $rs->Fields->Count();
echo $num_columns . "\n";

for ($i=0; $i < $num_columns; $i++) {
    $fld[$i] = $rs->Fields($i);
}

$rowcount = 0;
while (!$rs->EOF) {
    for ($i=0; $i < $num_columns; $i++) {
        echo $fld[$i]->value . "\t";
    }
    echo "\n";
    $rowcount++;            // increments rowcount
    $rs->MoveNext();
}

$rs->Close();
$conn->Close();

$rs = null;
$conn = null;

?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
