<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./es/functions/array.xml, last change in rev 1.1 -->
<!-- last change to 'extract' in en/ tree in rev 1.2 -->
  <refentry id="function.extract">
   <refnamediv>
    <refname>extract</refname>
    <refpurpose>
     Importa variables a la tabla de s&iacute;mbolos desde una matriz
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis>
     <type>void</type><methodname>extract</methodname>
     <methodparam><type>array</type><parameter>matriz_vars</parameter></methodparam>
     <methodparam choice="opt"><type>int</type><parameter>tipo_extraccion</parameter></methodparam>
     <methodparam choice="opt"><type>string</type><parameter>prefijo</parameter></methodparam>
     </methodsynopsis>
    <para>
     Esta funci&oacute;n se utiliza para importar variables desde una matriz
     a la tabla de s&iacute;mbolos actual. Toma la matriz asoiativa
     <parameter>matriz_vars</parameter> y trata las claves como nombres
     de variable y los valores como los valores de &eacute;stas. Para cada
     par clave/valor crear&aacute; una variable en la tabla de s&iacute;mbolos actual,
     sujeto a los par&aacute;metros <parameter>tipo_extraccion</parameter> y
     <parameter>prefijo</parameter>.
    </para>
    <para>
     <function>extract</function> controla las colisiones con las
     variables que ya existen. La forma de tratar &eacute;stas se determina
     por el <parameter>tipo_extraccion</parameter>. Puede tener &uacute;nicamente
     uno de los siguientes valores:
     <variablelist>
      <varlistentry>
       <term>EXTR_OVERWRITE</term>
       <listitem>
	<simpara>
	 Si hay colisi&oacute;n, sobreescribe la variable existente.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_SKIP</term>
       <listitem>
	<simpara>
	 Si hay colisi&oacute;n, no sobreescribas la variable existente.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_PREFIX_SAME</term>
       <listitem>
	<simpara>Si hay una colisi&oacute;n, a&ntilde;ade el <parameter>prefijo</parameter>
	a la nueva variable.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_PREFIX_ALL</term>
       <listitem>
	<simpara>
	 A&ntilde;ade el <parameter>prefijo</parameter> a todas las variables.
	</simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     Si no se especifica <parameter>tipo_extraccion</parameter>, se asume que
     vale EXTR_OVERWRITE.
    </para>
    <para>
     N&oacute;tese que el <parameter>prefijo</parameter> s&oacute;lo se necisita si
     <parameter>tipo_extraccion</parameter> vale EXTR_PREFIX_SAME o
     EXTR_PREFIX_ALL.
    </para>
    <para>
     <function>extract</function> comprueba si cada clave es un nombre
     v&aacute;lido de variable, y s&oacute;lo lo importa si lo es.
    </para>
    <note>
     <para>
      N.T.: En el caso espa&ntilde;ol, no valdr&iacute;a "a&ntilde;o" como nombre variable
      (pero s&iacute; como clave en una matriz cualquiera).
     </para>
    </note>
    <para>
     Un uso posible para extract ser&iacute;a importar en la tabla de s&iacute;mbolos
     las variables contenidas en la matriz asociativa que devuelve
     <function>wddx_deserialize</function>.
    </para>
    <para>
     <example>
      <title>Ejemplo de <function>extract</function></title>
      <programlisting role="php">
&lt;php?

/* Suponemos que $matriz_var es una matriz devuelta por 
   wddx_deserialize */

$tamano = "grande";
$matriz_var = array ("color" => "azul",
                    "tamano"  => "media",
                    "forma" => "esfera");
extract ($matriz_var, EXTR_PREFIX_SAME, "wddx");

print "$color, $tamano, $forma, $wddx_tamano\n";

?>
      </programlisting>
     </example>
    </para>
    <para>
     El programa anterior producir&aacute;:
     <programlisting>
azul, grande, esfera, media
     </programlisting>
    </para>
    <para>
     La variable $tamano no fue sobreescrita porque especificamos
     EXTR_PREFIX_SAME, que provoc&oacute; la creaci&oacute;n de $wddx_tamano.
     Si se hubiera especificado EXTR_SKIP, $wddx_tamano ni siquiera
     habr&iacute;a sido creada. EXTR_OVERWRITE habr&iacute;a provocado que $tamano 
     tuviera el valor "media", y EXTR_PREFIX_ALL habr&iacute;a provocado que
     aparecieran nuevas variables llamadas $wddx_color, $wddx_tamano,
     y $wddx_forma.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
