<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 329178 Maintainer: yago Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.array-multisort" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array_multisort</refname>
  <refpurpose>Ordena múltiples arrays, o arrays multi-dimensionales</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>bool</type><methodname>array_multisort</methodname>
   <methodparam><type>array</type><parameter role="reference">arr</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>arg</parameter><initializer>SORT_ASC</initializer></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>arg</parameter><initializer>SORT_REGULAR</initializer></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>array_multisort</function> puede usarse para ordenar varios
   arrays al mismo tiempo, o un array multi-dimensional por una o más
   dimensiones.
  </para>
  <para>
   Las llaves asociativas (<type>string</type>) se mantendrán, aunque las
   llaves numéricas son re-indexadas.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>arr</parameter></term>
     <listitem>
      <para>
       Un valor tipo <type>array</type> a ordenar.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>arg</parameter></term>
     <listitem>
      <para>
       Opcionalmente otro <type>array</type>, u opciones de ordenación para el
       argumento <type>array</type> anterior: 
      </para>
      <para>
       Banderas de tipo de ordenación:
       <itemizedlist>
        <listitem>
         <simpara><constant>SORT_ASC</constant> - ordena los elementos ascendentemente.</simpara>
        </listitem>
        <listitem>
         <simpara><constant>SORT_DESC</constant> - ordena los elementos descendentemente.</simpara>
        </listitem>
        <listitem>
         <simpara><constant>SORT_REGULAR</constant> - compara los elementos normalmente
          (no cambia los tipos)</simpara>
        </listitem>
        <listitem>
         <simpara><constant>SORT_NUMERIC</constant> - compara los elementos numéricamente</simpara>
        </listitem>
        <listitem>
         <simpara><constant>SORT_STRING</constant> - compara los elementos como strings</simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>SORT_LOCALE_STRING</constant> - compara los elementos como
          strings, basándose en la configuración regional en uso. Utiliza la configuración regional,
          la cual se puede cambiar usando <function>setlocale</function>
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>SORT_NATURAL</constant> - compara los elementos como strings
          usando el "orden natural" como <function>natsort</function>
         </simpara>
        </listitem>
        <listitem>
         <simpara>
          <constant>SORT_FLAG_CASE</constant> - puede ser combinado
          (OR a nivel de bits) con
          <constant>SORT_STRING</constant> o
          <constant>SORT_NATURAL</constant> para ordenar strings sin tener en cuent las mayúsculas/minúsculas
         </simpara>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>...</parameter></term>
     <listitem>
      <para>
       <parameter>arg</parameter>s adicionales.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.4.0</entry>
       <entry>
        Se añadieron <constant>SORT_NATURAL</constant> y <constant>SORT_FLAG_CASE</constant>
        a <parameter>arg</parameter> como posibles banderas de ordenación.
       </entry>
      </row>
      <row>
       <entry>5.3.0</entry>
       <entry>
        Se añadió <constant>SORT_LOCALE_STRING</constant> a
        <parameter>arg</parameter> como posible bandera de ordenación.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ordenar varios arrays</title>
    <programlisting role="php">
<![CDATA[
<?php
$matriz1 = array(10, 100, 100, 0);
$matriz2 = array(1, 3, 2, 4);
array_multisort($matriz1, $matriz2);

var_dump($matriz1);
var_dump($matriz2);
?>
]]>
    </programlisting>
    <para>
     En este ejemplo, después del ordenado, el primer array contendrá
     los valores 0, 10, 100, 100. El segundo array contendrá 4, 1, 2, 3.
     Las entradas en el segundo array que correspondían a las entradas
     idénticas del primer array (100 y 100) fueron ordenadas también.
    </para>
    <screen>
<![CDATA[
array(4) {
  [0]=> int(0)
  [1]=> int(10)
  [2]=> int(100)
  [3]=> int(100)
}
array(4) {
  [0]=> int(4)
  [1]=> int(1)
  [2]=> int(2)
  [3]=> int(3)
}
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Ordenar un array multi-dimensional</title>
    <programlisting role="php">
<![CDATA[
<?php
$ar = array(
       array("10", 11, 100, 100, "a"),
       array(   1,  2, "2",   3,   1)
      );
array_multisort($ar[0], SORT_ASC, SORT_STRING,
                $ar[1], SORT_NUMERIC, SORT_DESC);
var_dump($ar);
?>
]]>
    </programlisting>
    <para>
     En este ejemplo, después del ordenado, el primer array se
     transformará a 10, 100, 100, 11, "a" (fue ordenada como cadenas en
     orden ascendente), y la segunda tendrá 1, 3, "2", 2, 1 (ordenada como
     números, en orden descendiente).
    </para>
    <screen>
<![CDATA[
array(2) {
  [0]=> array(5) {
    [0]=> string(2) "10"
    [1]=> int(100)
    [2]=> int(100)
    [3]=> int(11)
    [4]=> string(1) "a"
  }
  [1]=> array(5) {
    [0]=> int(1)
    [1]=> int(3)
    [2]=> string(1) "2"
    [3]=> int(2)
    [4]=> int(1)
  }
}
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Ordenar resultados de una base de datos</title>
    <para>
     Para este ejemplo, cada elemento en el array <varname>datos</varname>
     representa una fila en una tabla. Este tipo de conjunto de datos es
     típico de los registros en una base de datos.
    </para>
    <para>
     Datos de ejemplo:
    </para>
    <screen>
<![CDATA[
volumen| edicion
-------+--------
    67 |       2
    86 |       1
    85 |       6
    98 |       2
    86 |       6
    67 |       7
]]>
    </screen>
    <para>
     Los datos como un array, llamada <varname>datos</varname>. Ésta se
     obtendría usualmente, por ejemplo, mediante un ciclo con <function>mysql_fetch_assoc</function>.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$datos[] = array('volumen' => 67, 'edicion' => 2);
$datos[] = array('volumen' => 86, 'edicion' => 1);
$datos[] = array('volumen' => 85, 'edicion' => 6);
$datos[] = array('volumen' => 98, 'edicion' => 2);
$datos[] = array('volumen' => 86, 'edicion' => 6);
$datos[] = array('volumen' => 67, 'edicion' => 7);
?>
]]>
    </programlisting>
    <para>
     En este ejemplo, ordenaremos por <varname>volumen</varname>
     descendientemente, y por <varname>edicion</varname> ascendentemente.
    </para>
    <para>
     Tenemos un array de filas, pero <function>array_multisort</function>
     requiere un array de columnas, así que usamos el código a continuación para obtener
     las columnas, y luego realizar el ordenado.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
// Obtener una lista de columnas
foreach ($data as $key => $row) {
    $volume[$key]  = $row['volume'];
    $edition[$key] = $row['edition'];
}

// Ordenar los datos con volumen descendiente, edicion ascendiente
// Agregar $datos como el último parámetro, para ordenar por la llave común
array_multisort($volume, SORT_DESC, $edition, SORT_ASC, $data);
?>
]]>
    </programlisting>
    <para>
     El conjunto de datos está ordenado ahora, y lucirá de este modo:
    </para>
    <screen>
<![CDATA[
volumen| edicion
-------+--------
    98 |       2
    86 |       1
    86 |       6
    85 |       6
    67 |       2
    67 |       7
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Ordenardo insensible a mayúsculas/minúsculas</title>
    <para>
     Tanto <constant>SORT_STRING</constant> como
     <constant>SORT_REGULAR</constant> son sensibles a
     mayúsculas/minúsculas, las cadenas que comienzan con una letra
     mayúscula vendrán antes que las cadenas con una letra minúscula.
    </para>
    <para>
     Para realizar una búsqueda insensible a minúsculas y mayúsculas,
     asegúrese de que el orden sea determinado por una copia en minúsculas
     del array original.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$array = array('Alpha', 'atomic', 'Beta', 'bank');
$array_lowercase = array_map('strtolower', $array);

array_multisort($array_lowercase, SORT_ASC, SORT_STRING, $array);

print_r($array);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => Alpha
    [1] => atomic
    [2] => bank
    [3] => Beta
)
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>usort</function></member>
    <member>&seealso.array.sorting;</member>
   </simplelist>
  </para>
 </refsect1> 
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
