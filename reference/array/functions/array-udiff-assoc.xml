<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.4 Maintainer: lboshell Status: ready -->
<!-- splitted from ./en/functions/array.xml, last change in rev 1.14 -->
  <refentry id="function.array-udiff-assoc">
   <refnamediv>
    <refname>array_udiff_assoc</refname>
    <refpurpose>Computa la diferencia entre matrices con un chequeo
    de &iacute;ndices adicional. Los datos son comparados usando una llamada
    de retorno.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis>
      <type>array</type><methodname>array_udiff_assoc</methodname>
      <methodparam><type>array</type><parameter>matriz1</parameter></methodparam>
      <methodparam><type>array</type><parameter>matriz2</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter> ...</parameter></methodparam>
      <methodparam><type>callback</type><parameter>func_comparacion_datos</parameter></methodparam>
     </methodsynopsis>
    <para>
<function>array_udiff_assoc</function> devuelve un <type>array</type>
que contiene todos los valores de <parameter>matriz1</parameter> que
no est&aacute;n presentes en ninguno de los otros argumentos. Note que
las claves son usadas en la comparaci&oacute;n, a diferencia
de <function>array_diff</function>
y <function>array_udiff</function>. La comparaci&oacute;n entre datos
de las matrices es realizada usando una llamada de retorno
especificada por el usuario. En este sentido, el comportamiento de
&eacute;sta funci&oacute;n es opuesto al
de <function>array_diff_assoc</function>, la cual usa una
funci&oacute;n interna para la comparaci&oacute;n.
    </para>
    <para>
     <example>
      <title>Ejemplo de <function>array_udiff_assoc</function></title>
      <programlisting role="php">
<![CDATA[
<?php
class cr {
    var $miembro_privado;
    function cr($val) {
        $this->miembro_privado = $val;
    }
    function func_comp_cr($a, $b) {
        if ($a->miembro_privado === $b->miembro_privado) return 0;
        return ($a->miembro_privado > $b->miembro_privado)? 1:-1;
    }
}
$a = array("0.1" => new cr(9), "0.5" => new cr(12), 0 => new cr(23), 1=> new cr(4), 2 => new cr(-15),);
$b = array("0.2" => new cr(9), "0.5" => new cr(22), 0 => new cr(3), 1=> new cr(4), 2 => new cr(-15),);

$resultado = array_udiff_assoc($a, $b, array("cr", "func_comp_cr"));
print_r($resultado);
?>
]]>
      </programlisting>
      <para>
       El resultado es:
      </para>
      <screen>
<![CDATA[
Array
(
    [0.1] => cr Object
        (
            [miembro_privado:private] => 9
        )

    [0.5] => cr Object
        (
            [miembro_privado:private] => 12
        )

    [0] => cr Object
        (
            [miembro_privado:private] => 23
        )
)
]]>
      </screen>
     </example>
    </para>
    <simpara>
En nuestro ejemplo anterior puede observar la pareja <literal>"1"
=&gt; new cr(4)</literal> presente en ambas matrices y por lo tanto no
hace parte de la salida de la funci&oacute;n.
    </simpara>
    <simpara>
Para la comparaci&oacute;n es usada la llamada de retorno entregada por el
usuario. &Eacute;sta debe devolver un entero menor que, igual, o mayor que
cero si el primer argumento es considerado como menor, igual, o mayor
que el segundo, respectivamente.
    </simpara>
    <note>
     <simpara>
Por favor note que esta funci&oacute;n s&oacute;lo analiza una
dimensi&oacute;n de una matriz n-dimensional. Por supuesto, puede
analizar dimensiones m&aacute;s profundas usando, por
ejemplo, <literal>array_udiff_assoc($matriz1[0], $matriz2[0],
"func_alguna_comparacion");</literal>.
     </simpara>
    </note>
    <para>
     Vea tambi&eacute;n
     <function>array_diff</function>,
     <function>array_diff_assoc</function>,
     <function>array_diff_uassoc</function>,
     <function>array_udiff</function>,
     <function>array_udiff_uassoc</function>, 
     <function>array_intersect</function>,  
     <function>array_intersect_assoc</function>,
     <function>array_uintersect</function>,  
     <function>array_uintersect_assoc</function> y
     <function>array_uintersect_uassoc</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
