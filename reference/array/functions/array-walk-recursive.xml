<?xml version='1.0' encoding='iso-8859-1'?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.5 Maintainer: lboshell Status: ready -->
<refentry id="function.array-walk-recursive">
 <refnamediv>
  <refname>array_walk_recursive</refname>
  <refpurpose>
   Aplicar una funci&oacute;n de usuario recursivamente a cada miembro
   de una matriz
  </refpurpose>
 </refnamediv>
 <refsect1>
  <title>Descripci&oacute;n</title>
  <methodsynopsis>
   <type>bool</type><methodname>array_walk_recursive</methodname>
   <methodparam><type>array</type><parameter>&amp;entrada</parameter></methodparam>
   <methodparam><type>callback</type><parameter>nombre_func</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>datos_usuario</parameter></methodparam>
  </methodsynopsis>
  <simpara>
   Aplica la funci&oacute;n definida por el usuario
   <parameter>nombre_func</parameter> a cada elemento de la matriz
   <parameter>entrada</parameter>. Esta funci&oacute;n opera de forma
   recursiva sobre matrices profundas. Por lo general,
   <parameter>nombre_func</parameter> recibe dos par&aacute;metros. El
   valor del par&aacute;metro <parameter>entrada</parameter> es el
   primero, y la clave/&iacute;ndice es el segundo. Si se define el
   par&aacute;metro opcional <parameter>datos_usuario</parameter>,
   &eacute;ste ser&aacute; pasado como el tercer par&aacute;metro a la
   llamada de retorno <parameter>nombre_func</parameter>.
  </simpara>
  <simpara>
   &return.success;
  </simpara>
  <note>
   <para>
    Si <parameter>nombre_func</parameter> necesita trabajar con los
    valores reales de la matriz, especifique el primer
    par&aacute;metro de <parameter>nombre_func</parameter> como una
    <link linkend="language.references">referencia</link>. Entonces,
    cualquier cambio realizado sobre esos elementos ser&aacute;
    efectuado sobre la matriz original misma.
   </para>
  </note>
  <para>
   <example>
    <title>Ejemplo de
    <function>array_walk_recursive</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$dulce = array('a' => 'manzana', 'b' => 'banano');
$frutas = array('dulce' => $dulce, 'acido' => 'limon');

function prueba_imprimir($item, $clave)
{
    echo "$clave contiene $item\n";
}

array_walk_recursive($frutas, 'prueba_imprimir');
?>
]]>
    </programlisting>
    <para>
     La salida del anterior programa ser&aacute;:
    </para>
    <screen role="php">
<![CDATA[
a contiene manzana
b contiene banano
acido contiene limon
]]>
    </screen>
    <para>
     Notar&aacute; que la clave 'dulce' nunca es mostrada. Cualquier
     clave que contenga un valor <type>array</type> no ser&aacute;
     pasada a la funci&oacute;n.
    </para>
   </example>
  </para>
  <simpara>
   Vea tambi&eacute;n <function>array_walk</function>.
  </simpara>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
