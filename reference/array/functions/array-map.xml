<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.12 $ -->
<!-- EN-Revision: 1.20 Maintainer: lboshell Status: ready -->
<refentry xml:id="function.array-map" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>array_map</refname>
  <refpurpose>
   Aplica la llamada de retorno especificada a los elementos de las matrices
   dadas
  </refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
  <type>array</type><methodname>array_map</methodname>
  <methodparam><type>callback</type><parameter>llamada_de_retorno</parameter></methodparam>
  <methodparam><type>array</type><parameter>matriz1</parameter></methodparam>
  <methodparam choice="opt"><type>array</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>array_map</function> devuelve una matriz que contiene todos los
   elementos de <parameter>matriz1</parameter> después de haber aplicado la
   función <parameter>llamada_de_retorno</parameter> a cada uno de ellos. El
   número de parámetros que la función
   <parameter>llamada_de_retorno</parameter> acepte debería coincidir con el
   número de matrices que son pasadas como argumentos a
   <function>array_map</function>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>llamada_de_retorno</parameter></term>
     <listitem>
      <para>
       Función tipo llamada de retorno a ejecutar para cada elemento en cada
       matriz.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>matriz1</parameter></term>
     <listitem>
      <para>
       Una matriz a recorrer con la función
       <parameter>llamada_de_retorno</parameter>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>matriz</parameter></term>
     <listitem>
      <para>
       Lista variable de argumentos tipo matriz a recorrer con la función
       <parameter>llamada_de_retorno</parameter>.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve una matriz que contiene todos los elementos de
   <parameter>matriz1</parameter> después de aplicar la función
   <parameter>llamada_de_retorno</parameter> a cada uno de ellos.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>array_map</function></title>
    <programlisting role="php">
<![CDATA[
<?php
function cubo($n)
{
    return($n * $n * $n);
}

$a = array(1, 2, 3, 4, 5);
$b = array_map("cubo", $a);
print_r($b);
?>
]]>
    </programlisting>
    <para>
     Esto hace que <varname>$b</varname> contenga:
    </para>
    <screen>
<![CDATA[
Array
(
    [0] => 1
    [1] => 8
    [2] => 27
    [3] => 64
    [4] => 125
)
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title><function>array_map</function> - usando más matrices</title>
    <programlisting role="php">
<![CDATA[
<?php
function mostrar_castellano($n, $m)
{
    return("El número $n es llamado $m en castellano");
}

function map_castellano($n, $m)
{
    return(array($n => $m));
}

$a = array(1, 2, 3, 4, 5);
$b = array("uno", "dos", "tres", "cuatro", "cinco");

$c = array_map("mostrar_castellano", $a, $b);
print_r($c);

$d = array_map("map_castellano", $a , $b);
print_r($d);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
// salida correspondiente a $c
Array
(
    [0] => El número 1 es llamado uno en castellano
    [1] => El número 2 es llamado dos en castellano
    [2] => El número 3 es llamado tres en castellano
    [3] => El número 4 es llamado cuatro en castellano
    [4] => El número 5 es llamado cinco en castellano
)

// salida correspondiente a $d
Array
(
    [0] => Array
        (
            [1] => uno
        )

    [1] => Array
        (
            [2] => dos
        )

    [2] => Array
        (
            [3] => tres
        )

    [3] => Array
        (
            [4] => cuatro
        )

    [4] => Array
        (
            [5] => cinco
        )

)
]]>
    </screen>
   </example>
  </para>
  <para>
   Usualmente, cuando se usan dos o más matrices, éstas deberían ser de
   longitudes iguales ya que la llamada de retorno es aplicada en paralelo a
   los elementos correspondientes. Si las matrices son de longitudes
   diferentes, la más corta de ellas será extendida con elementos vacíos.
  </para>
  <para>
   Un uso interesante de esta función es la construcción de una matriz de
   matrices, que puede ser llevada a cabo usando &null; como el nombre de la
   llamada de retorno.
  </para>
  <para>
   <example>
    <title>Creación de una matriz de matrices</title>
    <programlisting role="php">
<![CDATA[
<?php
$a = array(1, 2, 3, 4, 5);
$b = array("one", "two", "three", "four", "five");
$c = array("uno", "dos", "tres", "cuatro", "cinco");

$d = array_map(null, $a, $b, $c);
print_r($d);
?>
]]>
    </programlisting>
    &example.outputs;
   <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => 1
            [1] => one
            [2] => uno
        )

    [1] => Array
        (
            [0] => 2
            [1] => two
            [2] => dos
        )

    [2] => Array
        (
            [0] => 3
            [1] => three
            [2] => tres
        )

    [3] => Array
        (
            [0] => 4
            [1] => four
            [2] => cuatro
        )

    [4] => Array
        (
            [0] => 5
            [1] => five
            [2] => cinco
        )

)
]]>
    </screen>
   </example>
  </para>
  <para>
   Si el argumento matriz contiene claves tipo cadena, entonces la matriz
   devuelta tendrá claves tipo cadena si y solo si es pasada exactamente una
   matriz. Si más de un argumento es pasado, entonces la matriz devuelta
   siempre tendrá claves tipo entero.
  </para>
  <para>
   <example>
    <title><function>array_map</function> - con claves tipo cadena</title>
    <programlisting role="php">
<![CDATA[
<?php
$matriz = array("clave_cadena" => "valor");
function llamada1($a) {
    return array ($a);
}
function llamada2($a, $b) {
    return array ($a, $b);
}
var_dump(array_map("llamada1", $matriz));
var_dump(array_map("llamada2", $matriz, $matriz));
var_dump(array_map(null,  $matriz));
var_dump(array_map(null, $matriz, $matriz));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(1) {
  ["clave_cadena"]=>
  array(1) {
    [0]=>
    string(5) "valor"
  }
}
array(1) {
  [0]=>
  array(2) {
    [0]=>
    string(5) "valor"
    [1]=>
    string(5) "valor"
  }
}
array(1) {
  ["clave_cadena"]=>
  string(5) "valor"
}
array(1) {
  [0]=>
  array(2) {
    [0]=>
    string(5) "valor"
    [1]=>
    string(5) "valor"
  }
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>array_filter</function></member>
    <member><function>array_reduce</function></member>
    <member><function>array_walk</function></member>
    <member><function>create_function</function></member>
   </simplelist>
   &seealso.callback;
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
