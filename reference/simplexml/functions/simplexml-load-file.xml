<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.11 Maintainer: soywiz Status: revise -->
  <refentry id='function.simplexml-load-file'>
   <refnamediv>
    <refname>simplexml_load_file</refname>
    <refpurpose>
     Interpreta un fichero XML en un objeto
    </refpurpose>
   </refnamediv>
   <refsect1>
    &reftitle.description;
    <methodsynopsis>
     <type>object</type><methodname>simplexml_load_file</methodname>
     <methodparam><type>string</type><parameter>filename</parameter></methodparam>
     <methodparam choice="opt"><type>string</type><parameter>class_name</parameter></methodparam>
     <methodparam choice="opt"><type>int</type><parameter>options</parameter></methodparam>
    </methodsynopsis>
    <para>
     Esta funci&oacute;n convertir&aacute; un documento XML v&aacute;lido en un fichero
     especificado por <parameter>filename</parameter> en un <type>objeto</type>
     de clase <type>SimpleXMLElement</type>. Si ocurre alg&uacute;n error durante
     el acceso o la interpretaci&oacute;n, la funci&oacute;n devolver&aacute; &false;.
    </para>
    <para>
     Puedes utilizar el par&aacute;metro opcional <parameter>class_name</parameter> de forma
     que <function>simplexml_load_file</function> devolver&aacute; un objeto de 
     la clase especificada. Esa clase deber&iacute; debe extender la clase
     <type>SimpleXMLElement</type>.
    </para>
    <para>
     Desde PHP 5.1.0 y Libxml 2.6.0, tambi&eacute;n puedes usar el par&aacute;metro
     <parameter>options</parameter> para especificar <link
      linkend="libxml.constants">par&aacute;metros de Libxml adicionales</link>.
    </para>
    <note>
     <para>
      Libxml 2 decodifica la URI, así que si quieres pasar e.j.
      <literal>b&amp;c</literal> como par&aacute;metro URI <literal>a</literal>,
      tienes que llamar
      <literal>simplexml_load_file(rawurlencode('http://example.com/?a=' .
      urlencode('b&amp;c')))</literal>. A partir de PHP 5.1.0 ya no es necesario hacer esto
      porque PHP lo hará automáticamente.
     </para>
    </note>
    <para>
     <example>
      <title>Interpretar un documento XML</title>
      <programlisting role="php">
<![CDATA[
<?php
// El fichero test.xml contiene un documento XML con el elemento raiz
// y almenos un elemento /[root]/title.

if (file_exists('test.xml')) {
    $xml = simplexml_load_file('test.xml');
 
    var_dump($xml);
} else {
    exit('Error al abrir test.xml.');
}
?>
]]>
      </programlisting>
      <para>
       Este script mostrará, si tiene &eacute;xito:
      </para>
      <screen>
<![CDATA[
SimpleXMLElement Object
(
  [title] => Example Title
  ...
)
]]>
      </screen>
      <simpara>
       A partir de aqu&iacute;, puedes puedes acceder al nodo <literal>title</literal> mediante <literal>$xml->title</literal>
       y a cualquier otro elemento.
      </simpara>
     </example>
    </para>
    <para>
     Vea tambi&eacute;n: <function>simplexml_load_string</function>
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
