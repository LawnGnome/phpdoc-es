<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.17 Maintainer: soywiz Status: revise -->
<!-- Purpose: xml -->
<!-- Membership: bundled, external -->

 <reference xml:id="ref.simplexml" xmlns="http://docbook.org/ns/docbook">
  <title>Funciones SimpleXML</title>
  <titleabbrev>SimpleXML</titleabbrev>

  <partintro>
   <section xml:id="simplexml.intro">
    &reftitle.intro;
    <para>
     La extensi&oacute;n SimpleXML ofrece un conjunto de herramientas simples y f&aacute;ciles de usar
     para convertir un XML en un objeto que puede ser procesado
     con selectores de propiedades e iteradores de matrices.
    </para>
   </section>
   
   <section xml:id="simplexml.requirements">
    &reftitle.required;
    <para>
     La extensi&oacute;n SimpleXML requiere PHP 5.
    </para>
   </section>

   &reference.simplexml.configure;   
 
   <section xml:id="simplexml.examples">
    &reftitle.examples;
    <para>
     Varios ejemplos de la referencia requieren una cadena XML. En vez de
     repetir esta cadena cada vez, la ponemos en un fichero php que
     incluiremos en cada ejemplo. &eacute;ste fichero lo mostramos en la siguiente
     secci&oacute;n de ejemplo. Alternativamente, puedes crear un documento XML
     y cargarlo mediante la funci&oacute;n <function>simplexml_load_file</function>.
    </para>
    <para>
     <example>
      <title>Fichero de Inclusi&oacute;n ejemplo.php con una cadena XML</title>
      <programlisting role="php" xml:id="simplexml.examples.movie">
<![CDATA[
<?php
$xmlstr = <<<XML
<?xml version='1.0' standalone='yes'?>
<movies>
 <movie>
  <title>PHP: Behind the Parser</title>
  <characters>
   <character>
    <name>Ms. Coder</name>
    <actor>Onlivia Actora</actor>
   </character>
   <character>
    <name>Mr. Coder</name>
    <actor>El Act&#211;r</actor>
   </character>
  </characters>
  <plot>
   So, this language. It's like, a programming language. Or is it a
   scripting language? All is revealed in this thrilling horror spoof
   of a documentary.
  </plot>
  <rating type="thumbs">7</rating>
  <rating type="stars">5</rating>
 </movie>
</movies>
XML;
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     La simplicidad de SimpleXML aparece m&aacute;s claramente cuando se extrae
     una cadena o un n&uacute;mero de un documento XML b&aacute;sico.
     <example>
      <title>Obteniendo <literal>&lt;plot&gt;</literal></title>
      <programlisting role="php"><![CDATA[
<?php
include 'ejemplo.php';

$xml = simplexml_load_string($xmlstr);

echo $xml->movie[0]->plot; // "So this language. It's like..."
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Accediendo a elementos no &uacute;nicos en SimpleXML</title>
      <simpara>
       Cuando existen multiples instancias de un elemento de 
       un mismo elemento padre, se aplican las t&eacute;cnicas normales de iteraci&oacute;n.
      </simpara>
      <programlisting role="php"><![CDATA[
<?php
include 'ejemplo.php';

$xml = simplexml_load_string($xmlstr);

/* Para cada nodo <movie>, mostramos un <plot>. */
foreach ($xml->movie as $movie) {
   echo $movie->plot, '<br />';
}

?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Usando atributos</title>
      <simpara>
       Por ahora, solo hemos cubierto la parte de leer los nombres de los elementos 
       y sus valores. SimpleXML tambi&eacute;n puede acceder a los atributos de los elementos.
       Acceder a los atributos de un elemento es como acceder a los elementos
       de una <type>array</type>.
      </simpara>
      <programlisting role="php">
<![CDATA[
<?php
include 'ejemplo.php';

$xml = simplexml_load_string($xmlstr);

/* Accede a los nodos <rating> de la primera pel&iacute;cula.
 * Output the rating scale, too. */
foreach ($xml->movie[0]->rating as $rating) {
    switch((string) $rating['type']) { // Obtenemos los atributos como elementos &iacute;ndice
    case 'thumbs':
        echo $rating, ' thumbs up';
        break;
    case 'stars':
        echo $rating, ' stars';
        break;
    }
}
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Comparando Elementos y Atributos con Texto</title>
      <simpara>
       Para comparar un elemento o atributo con una cadena o pasarlo a una funci&oacute;n
       que requiera una cadena, debes convertirlo a cadena mediante
       <literal>(string)</literal>. De otra forma, PHP tratar&aacute; el elemento como un objeto.
      </simpara>
      <programlisting role="php"><![CDATA[
<?php     
include 'ejemplo.php';

$xml = simplexml_load_string($xmlstr);

if ((string) $xml->movie->title == 'PHP: Behind the Parser') {
    print 'Mi pel&iacute;cula favorita.';
}

htmlentities((string) $xml->movie->title);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Usando Xpath</title>
      <simpara>
       SimpleXML incluye soporte nativo de <acronym>Xpath</acronym>.
       Para encontrar todos los elementos <literal>&lt;character&gt;</literal>:
      </simpara>
      <programlisting role="php">
<![CDATA[
<?php
include 'ejemplo.php';
$xml = simplexml_load_string($xmlstr);

foreach ($xml->xpath('//character') as $character) {
    echo $character->name, 'played by ', $character->actor, '<br />';
}
?>
]]>
      </programlisting>
      <simpara>
       '<literal>//</literal>' sirve como comod&iacute;n. Para especificar paths
       absolutos, hay que omitir una de las barras invertidas.
      </simpara>
     </example>
    </para>
    <para>
     <example>
      <title>Definiendo valores</title>
      <simpara>
       Los datos en SimpleXML no tienen porqu&eacute; ser constantes. El objeto permite
       la manipulaci&oacute;n de todos sus elementos.
      </simpara>
      <programlisting role="php">
<![CDATA[
<?php
include 'ejemplo.php';
$xml = simplexml_load_string($xmlstr);

$xml->movie[0]->characters->character[0]->name = 'Miss Coder';

echo $xml->asXML();
?>
]]>
      </programlisting>
      <simpara>
       El c&oacute;digo de arriba mostrar&aacute; un documento XML nuevo, como el original,
       excepto que el nuevo XML tendr&aacute; <literal>Miss Coder</literal> en vez de <literal>Ms. Coder</literal>.
      </simpara>
     </example>
    </para>
    <para>
     <example>
      <title>Interoperabilidad con DOM</title>
      <simpara>
       PHP tiene un mecanismo para convertir nodos XML entre los formatos de SimpleXML
       y DOM. Este ejemplo muestra como se podr&iacute;a cambiar un elemento DOM a otro
       SimpleXML.
      </simpara>
      <programlisting role="php">
<![CDATA[
<?php
$dom = new domDocument;
$dom->loadXML('<books><book><title>blah</title></book></books>');
if (!$dom) {
     echo 'Error al parsear el documento';
     exit;
}

$s = simplexml_import_dom($dom);

echo $s->book[0]->title;
?>
]]>
      </programlisting>
     </example>
    </para>
   </section>
  </partintro>

&reference.simplexml.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

