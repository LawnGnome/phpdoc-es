<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 293214 $ -->
<!-- EN-Revision: 293214 Maintainer: tatai Status: ready -->
<refentry xml:id='simplexmlelement.children' xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>SimpleXMLElement::children</refname>
  <refpurpose>Encuentra los hijos del nodo dado</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <classsynopsis>
   <ooclass><classname>SimpleXMLElement</classname></ooclass>
   <methodsynopsis>
    <type>SimpleXMLElement</type><methodname>children</methodname>
    <methodparam choice="opt"><type>string</type><parameter>ns</parameter></methodparam>
    <methodparam choice="opt"><type>bool</type><parameter>es_prefijo</parameter></methodparam>
   </methodsynopsis>
  </classsynopsis>
  <para>
   Este método encuentra los hijos de un elemento del cuál es miembro. El
   resultado cumple las reglas normales de iteración.
  </para>
  &simplexml.iteration;
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>ns</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>is_prefix</parameter></term>
     <listitem>
      <para>
       Por defecto &false;
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un elemento <classname>SimpleXMLElement</classname>, tanto si el
   nodo tiene hijos o no.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.2.0</entry>
       <entry>
        Se añade el parámetro opcional <parameter>is_prefix</parameter>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Recorre el pseudo-array <literal>children()</literal></title>
    <programlisting role="php">
<![CDATA[
<?php
$xml = new SimpleXMLElement(
'<persona>
 <hijo rol="hijo">
  <hijo rol="hija"/>
 </hijo>
 <hijo rol="hija">
  <hijo rol="hijo">
   <hijo rol="hijo"/>
  </hijo>
 </hijo>
</persona>');

foreach ($xml->children() as $segunda_gen) {
    echo 'La persona engendra un/a ' . $segunda_gen['role'];

    foreach ($second_gen->children() as $tercera_gen) {
        echo ' quien engendra un/a ' . $tercera_gen['role'] . ';';

        foreach ($tercera_gen->children() as $cuarta_gen) {
            echo ' y ese/a ' . $tercera_gen['role'] .
                ' engendra un/a ' . $cuarta_gen['role'];
        }
    }
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
La persona engendra un/a hijo quien engendra un/a hija; La persona engendra
un/a hija quien engendra a un/a hijo; y ese/a hijo engendra un/a hijo
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;

  <simpara>
   <methodname>SimpleXMLElement::children</methodname> devuleve un nodo de 
   objeto no impotando si el nodo actuali tiene un hijo o no. Use
   <methodname>SimpleXMLElement::count</methodname> para comprobar si hay
   algún hijo.
  </simpara>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>SimpleXMLElement::count</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
