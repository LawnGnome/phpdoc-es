<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<refentry xml:id="mysqli.connect" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>mysqli::__construct</refname>
  <refname>mysqli_connect</refname>
  <refpurpose>Abre una nueva conexión al servidor MySQL</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <para>&style.oop;</para>
  <constructorsynopsis>
   <methodname>mysqli::__construct</methodname>
   <methodparam choice='opt'><type>string</type><parameter>host</parameter><initializer>ini_get("mysqli.default_host")</initializer></methodparam>
   <methodparam choice='opt'><type>string</type><parameter>username</parameter><initializer>ini_get("mysqli.default_user")</initializer></methodparam>
   <methodparam choice='opt'><type>string</type><parameter>passwd</parameter><initializer>ini_get("mysqli.default_pw")</initializer></methodparam>
   <methodparam choice='opt'><type>string</type><parameter>dbname</parameter><initializer>""</initializer></methodparam>
   <methodparam choice='opt'><type>int</type><parameter>port</parameter><initializer>ini_get("mysqli.default_port")</initializer></methodparam>
   <methodparam choice='opt'><type>string</type><parameter>socket</parameter><initializer>ini_get("mysqli.default_socket")</initializer></methodparam>
  </constructorsynopsis>
  <para>&style.procedural;</para>
  <methodsynopsis>
   <type>mysqli</type><methodname>mysqli_connect</methodname>
   <methodparam choice='opt'><type>string</type><parameter>host</parameter><initializer>ini_get("mysqli.default_host")</initializer></methodparam>
   <methodparam choice='opt'><type>string</type><parameter>username</parameter><initializer>ini_get("mysqli.default_user")</initializer></methodparam>
   <methodparam choice='opt'><type>string</type><parameter>passwd</parameter><initializer>ini_get("mysqli.default_pw")</initializer></methodparam>
   <methodparam choice='opt'><type>string</type><parameter>dbname</parameter><initializer>""</initializer></methodparam>
   <methodparam choice='opt'><type>int</type><parameter>port</parameter><initializer>ini_get("mysqli.default_port")</initializer></methodparam>
   <methodparam choice='opt'><type>string</type><parameter>socket</parameter><initializer>ini_get("mysqli.default_socket")</initializer></methodparam>
  </methodsynopsis>
  <para>
   Abre una conexión al servidor MySQL que este funcionando.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>host</parameter></term>
     <listitem>
      <para>
       Puede ser tanto un nombre de host o una dirección IP. Pasando el valor &null;
       o la cadena "localhost" a este parametro, se asume que será el host local.
       Cuando sea posible, se utilizaran tuberías en lugar del protocolo TCP/IP.
      </para>
      <para>
       Anteponiendo al host con <literal>p:</literal> se abrirá una conexión persistente.
       <function>mysqli_change_user</function> será llamada automáticamente en conexiones
       abiertas desde la agrupación de conexiones.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>username</parameter></term>
     <listitem>
      <para>
       Nombre de usuario de MySQL.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>passwd</parameter></term>
     <listitem>
      <para>
       Si no se facilita o es &null;, el servidor MySQL intentará autenticar
       el usuario contra el registro de usuarios sin contraseña. 
       Esto permite que un usuario sea utilizado con diferentes permisos
       (según si la contraseña ha sido facilitada o no).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>dbname</parameter></term>
     <listitem>
      <para>
       Si se facilita indicará base de datos por defecto que será usada cuando se realicen consultas.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>port</parameter></term>
     <listitem>
      <para>
       Especifica el numero del puerto donde se intentará la conexión al servidor MySQL.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>socket</parameter></term>
     <listitem>
      <para>
       Especifica el socket o la tubería nombrada para ser usada.
      </para>
      <note>
       <para>
        Especificando el parámetro <parameter>socket</parameter> no se determinará
        explícitamente el tipo de conexión que será usada cuando se conecte al servidor MySQL.
        Como se realiza la conexión a la base de datos MySQL está determinado por el parametro
        <parameter>host</parameter>.
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un objeto que representa la conexión a un servidor MySQL.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.3.0</entry>
       <entry>
        Added the ability of persistent connections.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><methodname>mysqli::__construct</methodname> example</title>
   <para>&style.oop;</para>
   <programlisting role="php">
<![CDATA[
<?php
$mysqli = new mysqli('localhost', 'my_user', 'my_password', 'my_db');

/*
 * This is the "official" OO way to do it,
 * BUT $connect_error was broken until PHP 5.2.9 and 5.3.0.
 */
if ($mysqli->connect_error) {
    die('Connect Error (' . $mysqli->connect_errno . ') '
            . $mysqli->connect_error);
}

/*
 * Use this instead of $connect_error if you need to ensure
 * compatibility with PHP versions prior to 5.2.9 and 5.3.0.
 */
if (mysqli_connect_error()) {
    die('Connect Error (' . mysqli_connect_errno() . ') '
            . mysqli_connect_error());
}

echo 'Success... ' . $mysqli->host_info . "\n";

$mysqli->close();
?>
]]>
   </programlisting>
   <para>&style.oop; when extending mysqli class</para>
   <programlisting role="php">
<![CDATA[
<?php

class foo_mysqli extends mysqli {
    public function __construct($host, $user, $pass, $db) {
        parent::__construct($host, $user, $pass, $db);

        if (mysqli_connect_error()) {
            die('Connect Error (' . mysqli_connect_errno() . ') '
                    . mysqli_connect_error());
        }
    }
}

$db = new foo_mysqli('localhost', 'my_user', 'my_password', 'my_db');

echo 'Success... ' . $db->host_info . "\n";

$db->close();
?>
]]>
   </programlisting>
   <para>&style.procedural;</para>
   <programlisting role="php">
<![CDATA[
<?php
$link = mysqli_connect('localhost', 'my_user', 'my_password', 'my_db');

if (!$link) {
    die('Connect Error (' . mysqli_connect_errno() . ') '
            . mysqli_connect_error());
}

echo 'Success... ' . mysqli_get_host_info($link) . "\n";

mysqli_close($link);
?>
]]>
   </programlisting>
   &examples.outputs;
   <screen>
<![CDATA[
Success... MySQL host info: localhost via TCP/IP
]]>
   </screen>
  </example>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &mysqli.charset.note;
  <note>
   <para>
    OO syntax only: If a connection fails an object is still returned. To check 
    if the connection failed then use either the 
    <function>mysqli_connect_error</function> function or the <link 
    linkend="mysqli.connect-error">mysqli->connect_error</link> property as in 
    the preceding examples.
   </para>
  </note>
  <note>
   <para>
    If it is necessary to set options, such as the connection timeout,
    <function>mysqli_real_connect</function> must be used instead.
   </para>
  </note>
  <note>
   <para>
    Calling the constructor with no parameters is the same as calling
    <function>mysqli_init</function>.
   </para>
  </note>
  <note>
   <para>
    Error "Can't create TCP/IP socket (10106)" usually means that the <link
    linkend="ini.variables-order">variables_order</link> configure directive
    doesn't contain character <literal>E</literal>. On Windows, if the
    environment is not copied the <literal>SYSTEMROOT</literal> environment
    variable won't be available and PHP will have problems loading Winsock.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>mysqli_real_connect</function></member>
    <member><function>mysqli_options</function></member>
    <member><function>mysqli_connect_errno</function></member>
    <member><function>mysqli_connect_error</function></member>
    <member><function>mysqli_close</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
