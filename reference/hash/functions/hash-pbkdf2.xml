<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 299488 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="function.hash-pbkdf2" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>hash_pbkdf2</refname>
  <refpurpose>Genera una derivación de clave PBKDF2 de una contraseña proporcionada</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="procedural">
   <type>string</type><methodname>hash_pbkdf2</methodname>
   <methodparam><type>string</type><parameter>algo</parameter></methodparam>
   <methodparam><type>string</type><parameter>password</parameter></methodparam>
   <methodparam><type>string</type><parameter>salt</parameter></methodparam>
   <methodparam><type>int</type><parameter>iterations</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>length</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>raw_output</parameter><initializer>false</initializer></methodparam>
  </methodsynopsis>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>algo</parameter></term>
     <listitem>
      <para>
       El nombre del algoritmo hash seleccionado (esto es, <literal>"md5"</literal>,
       <literal>"sha256"</literal>, <literal>"haval160,4"</literal>, etc.). Véase
       <function>hash_algos</function> para una lista de los algoritmos admitidos.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>password</parameter></term>
     <listitem>
      <para>
       La contraseña a usar para la derivación.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>salt</parameter></term>
     <listitem>
      <para>
       La sal a usar para la derivación.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>iterations</parameter></term>
     <listitem>
      <para>
       El número de iteraciones internas para realizar la derivación.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>length</parameter></term>
     <listitem>
      <para>
       La longitud de la clave derivada a generar. Si es <literal>0</literal>, se usa
       la longitud del algoritmo proporcionado.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>raw_output</parameter></term>
     <listitem>
      <para>
       Cuando se establece a &true;, genera datos binarios sin tratar.
       &false; genera hexits en minúsculas.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues"><!-- {{{ -->
  &reftitle.returnvalues;
  <para>
   Devuelve un string que contiene la clave derivada como hexits en minúsculas,
   a menos que <parameter>raw_output</parameter> sea establecido a true, en cuyo caso
   devuelve la represetación binaria de la clave derivada.
  </para>
 </refsect1><!-- }}} -->
 
 <refsect1 role="errors"><!-- {{{ -->
  &reftitle.errors;
  <para>
   Se emitirá un <constant>E_WARNING</constant> si el algoritmo es
   desconocido, el parámetro <parameter>iterations</parameter> es menor o
   igual a <literal>0</literal>, el parámetro <parameter>length</parameter> es menor
   que <literal>0</literal> o el parámetro <parameter>salt</parameter> es demasiado grande
   (mayor que <constant>INT_MAX</constant><literal> - 4</literal>).
  </para>
 </refsect1><!-- }}} -->
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de uso básico de <function>hash_pbkdf2</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$contraseña = "contraseña";
$sal = "salt";
$hash = hash_pbkdf2("sha256", $contraseña, $sal, 1, 20);
echo $hash;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
120fb6cffcf8b32c43e7
]]>
    </screen>
   </example>
  </para>
 </refsect1>
 
 <refsect1 role="notes">
  &reftitle.notes;
  <caution>
   <para>
    El método PBKDF2 se puede usar para el almacenamiento de contraseñas de hash (está
    aprovado por el NIST para tal uso). Sin embargo, se debería observar que
    <constant>CRYPT_BLOWFISH</constant> es más conveniente para el almacenamiento de contraseñas,
    por lo que debería usarse en vez de mediante <function>crypt</function>.
   </para>
  </caution>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>crypt</function></member>
    <member><function>hash</function></member>
    <member><function>hash_algos</function></member>
    <member><function>hash_init</function></member>
    <member><function>hash_hmac</function></member>
    <member><function>hash_hmac_file</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"~/.phpdoc/manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 vim600: syn=xml fen fdm=syntax fdl=2 si
 vim: et tw=78 syn=sgml
 vi: ts=1 sw=1
 -->
