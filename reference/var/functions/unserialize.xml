<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 292619 Maintainer: jesusruiz Status: ready -->
<refentry xml:id="function.unserialize" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>unserialize</refname>
  <refpurpose>
   Crea un valor PHP a partir de una representación almacenada
  </refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>unserialize</methodname>
   <methodparam><type>string</type><parameter>str</parameter></methodparam>
  </methodsynopsis>
  <simpara>
   <function>unserialize</function> toma una variable sencilla seriada y la
   la convierte de nuevo a su valor PHP.
  </simpara>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>str</parameter></term>
     <listitem>
      <para>
       La cadena seriada.
      </para>
      <para>
       Si la variable que está siendo convertida de vuelta es un objeto, PHP
       intentará llamar la función miembro <function>__wakeup</function>
       si existe) automáticamente luego de haber recontruido satisfactoriamente
       el objeto.
      </para>
      <para>
       <note>
        <title>Directiva unserialize_callback_func</title>
        <para>
         Es posible establecer una función-llamada de retorno la cual será
         llamada si una clase no definida debería ser instanciada durante el
         proceso de revertir la seriación(para prevenir que se reciba un 
   <type>object</type> incompleto "__PHP_Incomplete_Class".)
         Use su &php.ini;, <function>ini_set</function> o &htaccess; 
         para definir '<literal>unserialize_callback_func</literal>'. Cada vez que una clase no definida
         deba ser instanciada, esta función será llamada. Para deshabilitar esta característica simplemente 
   asigne un valor vacío a este parámetro.
        </para>
       </note>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   El valor convertido es retornado, y puede ser un <type>boolean</type>,
   <type>integer</type>, <type>float</type>, <type>string</type>,
   <type>array</type> u <type>object</type>.
  </para>
  <para>
   En caso de que la cadena pasada no pueda ser procesada para revertir la
   seriación, se devuelve &false; y un error de tipo
   <constant>E_NOTICE</constant> es generado.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.2.0</entry>
       <entry>
        La directiva unserialize_callback_func se encuentra disponible.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo <function>unserialize</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// Aquí usamos unserialize() para cargar los datos de sesión
// provenientes de la cadena seleccionada desde la base de datos en la
// matriz $datos_sesion. Este ejemplo complementa aquél descrito con
// serialize().

$con  = odbc_connect("bd_web", "php", "gallina");
$sent = odbc_prepare($con, "SELECT datos FROM sesiones WHERE id = ?");
$datos_sql = array($_SERVER['PHP_AUTH_USER']);

if (!odbc_execute($sent, &$datos_sql) || !odbc_fetch_into($sent, &$tmp)) {
    // si la ejecución del comando o la recuperación de datos falla,
    // inicializar una matriz vacía
    $datos_sesion = array();
} else {
    // ahora deberíamos tener los datos seriados en $tmp[0].
    $datos_sesion = unserialize($tmp[0]);
    if (!is_array($datos_sesion)) {
        // algo ha fallado, inicializar una matriz vacía
        $datos_sesion = array();
    }
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Ejemplo de unserialize_callback_func</title>
    <programlisting role="php">
<![CDATA[
<?php
$objeto_seriado='O:1:"a":1:{s:5:"valor";s:3:"100";}';

// la directiva unserialize_callback_func está disponible a partir de PHP 4.2.0
ini_set('unserialize_callback_func', 'mi_llamada_de_retorno'); // defina su callback_function

function mi_llamada_de_retorno($nombre_clase)
{
    // tan solo incluya un archivo que contenga su definición de clase

    // recibe $nombre_clase para determinar qué definición de
    // clase requiere
}
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <warning>
   <para>
    &false; es devuelto tanto en el caso de un error como cuando se
    convierte el valor seriado &false;. Es posible atrapar este caso especial
    comparando <parameter>str</parameter> con
    <literal>serialize(false)</literal> o atrapando el error
    <constant>E_NOTICE</constant> generado.
   </para>
  </warning>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>serialize</function></member>
    <member><link linkend="language.oop5.autoload">Autocarga de Objetos</link></member>
    <member><link linkend="unserialize-callback-func">unserialize_callback_func</link></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
