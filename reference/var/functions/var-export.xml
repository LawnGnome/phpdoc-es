<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.9 $ -->
<!-- EN-Revision: 1.15 Maintainer: lboshell Status: ready -->
<!-- splitted from ./en/functions/var.xml, last change in rev 1.6 -->
<refentry xml:id="function.var-export" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>var_export</refname>
  <refpurpose>Imprime o devuelve una representación de cadena, apta para su
  procesamiento, de una variable</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>var_export</methodname>
   <methodparam><type>mixed</type><parameter>expresion</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>devolver</parameter></methodparam>
  </methodsynopsis>
  <simpara>
   <function>var_export</function> obtiene información estructurada sobre la
   variable dada. Es similar a <function>var_dump</function> con una
   excepción: la representación devuelta es código PHP válido.
  </simpara>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>expresion</parameter></term>
     <listitem>
      <para>
       La variable que desea exportar.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>devolver</parameter></term>
     <listitem>
      <para>
       Si es usada y se define como &true;, <function>var_export</function>
       devolverá la representación de la variable en lugar de imprimirla.
      </para>
      &note.uses-ob;
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve la representación de la variable cuando el parámetro
   <parameter>devolver</parameter> es usado y evalúa a &true;. De otro modo,
   esta función devolverá &null;.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.1.0</entry>
       <entry>
        Posibilidad de exportar clases y matrices que contengan clases,
        usando el método mágico <link
        linkend="language.oop5.magic.set-state">__set_state</link>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplos de <function>var_export</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$a = array (1, 2, array ("a", "b", "c"));
var_export ($a);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array (
  0 => 1,
  1 => 2,
  2 => 
  array (
    0 => 'a',
    1 => 'b',
    2 => 'c',
  ),
)
]]>
    </screen>
    <programlisting role="php">
<![CDATA[
<?php

$b = 3.1;
$v = var_export($b, true);
echo $v;

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
3.1
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Exportación de clases a partir de PHP 5.1.0</title>
    <programlisting role="php">
<![CDATA[
<?php
class A { public $var; }
$a = new A;
$a->var = 5;
var_export($a);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
A::__set_state(array(
   'var' => 5,
))
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Uso de <link
    linkend="language.oop5.magic.set-state">__set_state</link> (a partir de
    PHP 5.1.0)</title>
    <programlisting role="php">
<![CDATA[
<?php
class A
{
    public $var1;
    public $var2;

    public static function __set_state($una_matriz)
    {
        $obj = new A;
        $obj->var1 = $una_matriz['var1'];
        $obj->var2 = $una_matriz['var2'];
        return $obj;
    }
}

$a = new A;
$a->var1 = 5;
$a->var2 = 'foo';

eval('$b = ' . var_export($a, true) . ';'); // $b =
A::__set_state(array(
                                            //    'var1' => 5,
                                            //    'var2' => 'foo',
                                            // ));
var_dump($b);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(A)#2 (2) {
  ["var1"]=>
  int(5)
  ["var2"]=>
  string(3) "foo"
}
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Las variables de tipo <type>resource</type> no pueden ser exportadas por
    esta función.
   </para>
  </note>
  <note>
   <para>
    <function>var_export</function> no maneja referencias circulares ya que
    sería prácticamente imposible generar código PHP interpretable en tal
    caso. Si desea trabajar con la representación completa de una matriz u
    objeto, use <function>serialize</function>.
   </para>
  </note>
 </refsect1>

<refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>print_r</function></member>
    <member><function>serialize</function></member>
    <member><function>var_dump</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
