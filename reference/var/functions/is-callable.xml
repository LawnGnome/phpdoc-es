<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.7 Maintainer: lboshell Status: ready -->
<!-- splitted from ./en/functions/var.xml, last change in rev 1.87 -->
  <refentry id="function.is-callable">
   <refnamediv>
    <refname>is_callable</refname>
    <refpurpose>
     Verifica que los contenidos de una variable puedan ser llamados
     como una funci&oacute;n
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis>
      <type>bool</type><methodname>is_callable</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><type>bool</type><parameter>solo_sintaxis</parameter></methodparam>
      <methodparam choice="opt"><type>string</type><parameter>nombre_a_llamar</parameter></methodparam>
     </methodsynopsis>
    <para>
     Verifica que los contenidos de una variable puedan ser llamados
     como una funci&oacute;n. Esto permite revisar que los contenidos
     de una variable contengan el nombre de una funci&oacute;n
     v&aacute;lida, o que una matriz contenga un objeto adecuadamente
     codificado y un nombre de funci&oacute;n.
    </para>
    <para>
     El par&aacute;metro <parameter>var</parameter> puede ser o bien
     el nombre de una funci&oacute;n almacenada en una variable tipo
     cadena, o un objeto y el nombre de un m&eacute;todo dentro del
     objeto, de este modo:
     <screen>array($AlgunObjeto, 'NombreDelMetodo')</screen>
    </para>
    <para>
     Si el argumento <parameter>solo_sintaxis</parameter> es &true; la
     funci&oacute;n solo verifica que <parameter>var</parameter> pueda
     ser una funci&oacute;n o un m&eacute;todo. Solo rechazar&aacute;
     variables simples que no sean cadenas, o una matriz que no tenga
     una estructura v&aacute;lida para ser usada como llamada de
     retorno. Se espera que las matrices v&aacute;lidas tengan solo 2
     entradas, la primera de las cuales es un objeto o una cadena, y
     la segunda una cadena.
    </para>
    <para>
     El argumento <parameter>nombre_a_llamar</parameter> recibe el
     "nombre que puede ser llamado". En el ejemplo siguiente este es
     "algunaClase:algunMetodo". Note, sin embargo, que a pesar de la
     implicaci&oacute;n de que algunaClase::algunMetodo() es un
     m&eacute;todo est&aacute;tico que puede ser llamado, este no es
     el caso.
    </para>
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
//  Como chequear una variable para ver si puede ser llamada
//  como una funcion.

//
//  Variable simple que contiene una funcion
//

function algunaFuncion()
{
}

$variableFuncion = 'algunaFuncion';

var_dump(is_callable($variableFuncion, false, $nombre_a_llamar));  // bool(true)

echo $nombre_a_llamar, "\n";  // algunaFuncion

//
//  Matriz que contiene un metodo
//

class algunaClase {

  function algunMetodo()
  {
  }

}

$unObjeto = new algunaClase();

$variableMetodo = array($unObjeto, 'algunMetodo');

var_dump(is_callable($variableMetodo, true, $nombre_a_llamar));  //  bool(true)

echo $nombre_a_llamar, "\n";  //  algunaClase:algunMetodo

?>
]]>
     </programlisting>
    </informalexample>   
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
