<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.12 Maintainer: lboshell Status: ready -->
<!-- splitted from ./en/functions/var.xml, last change in rev 1.2 -->
  <refentry id="function.unset">
   <refnamediv>
    <refname>unset</refname>
    <refpurpose>Remover una variable dada</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis>
      <type>void</type><methodname>unset</methodname>
      <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>var</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
     </methodsynopsis>

    <para>
     <function>unset</function> destruye las variables
     especificadas. Note que en PHP 3, <function>unset</function>
     siempr&eacute; devolver&aacute; &true; (en realidad, el valor
     entero 1). En PHP 4, sin embargo, <function>unset</function> no
     es una funci&oacute;n verdadera: es una sentencia. Como tal, no
     devuelve valor alguno, e intentar tomar el valor de
     <function>unset</function> resulta en un error de
     int&eacute;rprete.
    </para>
    <para>
     <example>
      <title>Ejemplo de <function>unset</function></title>
      <programlisting role="php">
<![CDATA[
<?php
// destruir una variable sencilla
unset($foo);

// destruir un elemento de una matriz
unset($bar['quux']);

// destruir mas de una variable
unset($foo1, $foo2, $foo3);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     El comportamiento de <function>unset</function> al interior de
     una funci&oacute;n puede variar dependiendo del tipo de variable
     que intenta destruir.
    </para>
    <para>
     Si se aplica <function>unset</function> sobre una variable global
     al interior de una funci&oacute;n, solo la variable local es
     destruida. La variable en el entorno de la llamada
     retendr&aacute; el mismo valor que antes que que se llamara
     <function>unset</function>.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function destruir_foo()
{
    global $foo;
    unset($foo);
}

$foo = 'bar';
destruir_foo();
echo $foo;
?>
]]>
      </programlisting>
     </informalexample>
    </para>
    &example.outputs;
    <para>
     <informalexample>
      <screen>
<![CDATA[
bar
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     Si se aplica <function>unset</function> sobre una variable que es
     PASADA POR REFERENCIA al interior de una funci&oacute;n, solo la
     variable local es destruida. La variable en el entorno de la
     llamada retendr&aacute; el mismo valor que antes de que
     <function>unset</function> fuera llamada.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function foo(&$bar)
{
    unset($bar);
    $bar = "blah";
}

$bar = 'algo';
echo "$bar\n";

foo($bar);
echo "$bar\n";
?>
]]>
      </programlisting>
     </informalexample>
    </para>
     &example.outputs;
    <para>
     <informalexample>
      <screen>
<![CDATA[
algo
algo
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     Si se aplica <function>unset</function> sobre una variable
     est&aacute;tica al interior de una funci&oacute;n,
     <function>unset</function> destruye la variable y todas sus
     referencias.
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function foo()
{
    static $a;
    $a++;
    echo "$a\n";
    unset($a);
}

foo();
foo();
foo();
?>
]]>
      </programlisting>
     </informalexample>
    </para>
     &example.outputs;
    <para>
     <informalexample>
      <screen>
<![CDATA[
1
2
3
]]>
      </screen>
     </informalexample>
    </para>
    <para>
     Si desea remover una variable global desde el interior de una
     funci&oacute;n, puede usar la matriz <varname>$GLOBALS</varname>
     para tal efecto:
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
function foo()
{
    unset($GLOBALS['bar']);
}

$bar = "algo";
foo();
?>
]]>
      </programlisting>
     </informalexample>
    </para>

    &note.language-construct;

    <para>
     Vea tambi&eacute;n <function>isset</function>,
     <function>empty</function>, y <function>array_splice</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
