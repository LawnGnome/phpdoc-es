<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.7 $ -->
<!-- EN-Revision: 1.18 Maintainer: lboshell Status: ready -->
<refentry xml:id="function.unset" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>unset</refname>
  <refpurpose>Remover una variable dada</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>void</type><methodname>unset</methodname>
   <methodparam><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>var</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   <function>unset</function> destruye las variables especificadas.
  </para>
  <para>
   El comportamiento de <function>unset</function> al interior de una
   función puede variar dependiendo del tipo de variable que intenta
   destruir.
  </para>
  <para>
   Si se aplica <function>unset</function> sobre una variable global al
   interior de una función, solo la variable local es destruida. La variable
   en el entorno de la llamada retendrá el mismo valor que antes que que se
   llamara <function>unset</function>.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function destruir_foo()
{
    global $foo;
    unset($foo);
}

$foo = 'bar';
destruir_foo();
echo $foo;
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  &example.outputs;
  <para>
   <informalexample>
    <screen>
<![CDATA[
bar
]]>
    </screen>
   </informalexample>
  </para>
  <para>
   Si desea aplicar <function>unset</function> sobre una variable global al
   interior de una función, puede usar la matriz <varname>$GLOBALS</varname>
   para este propósito:
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function foo()
{
    unset($GLOBALS['bar']);
}

$bar = "algo";
foo();
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <para>
   Si se aplica <function>unset</function> sobre una variable que es PASADA
   POR REFERENCIA al interior de una función, solo la variable local es
   destruida. La variable en el entorno de la llamada retendrá el mismo
   valor que antes de que <function>unset</function> fuera llamada.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function foo(&$bar)
{
    unset($bar);
    $bar = "blah";
}

$bar = 'algo';
echo "$bar\n";

foo($bar);
echo "$bar\n";
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  &example.outputs;
  <para>
   <informalexample>
    <screen>
<![CDATA[
algo
algo
]]>
    </screen>
   </informalexample>
  </para>
  <para>
   Si se aplica <function>unset</function> sobre una variable estática al
   interior de una función, <function>unset</function> destruye la variable
   únicamente en el contexto del resto de una función. Las llamadas
   siguientes recuperarán el valor previo de una variable.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
function foo()
{
    static $bar;
    $bar++;
    echo "Antes de unset: $bar, ";
    unset($bar);
    $bar = 23;
    echo "después de unset: $bar\n";
}

foo();
foo();
foo();
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  &example.outputs;
  <para>
   <informalexample>
    <screen>
<![CDATA[
Antes de unset: 1, después de unset: 23
Antes de unset: 2, después de unset: 23
Antes de unset: 3, después de unset: 23
]]>
    </screen>
   </informalexample>
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       La variable a destruir.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>var</parameter></term>
     <listitem>
      <para>
       Otra variable ..
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>...</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.void;
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.0.0</entry>
       <entry>
        <function>unset</function> se conviritó en una expresión.  (En PHP
        3, <function>unset</function> siempre devolvía 1).
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>unset</function></title>
    <programlisting role="php">
<![CDATA[
<?php
// destruir una variable sencilla
unset($foo);

// destruir un elemento de una matriz
unset($bar['quux']);

// destruir más de una variable
unset($foo1, $foo2, $foo3);
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  &note.language-construct;
  <note>
   <para>
    Es posible remover incluso propiedades de objetos visibles en el
    contexto actual.
   </para>
  </note>
  <note>
   <para>
    No es posible remover <literal>$this</literal> al interior de un método
    en un objeto a partir de PHP 5.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>isset</function></member>
    <member><function>empty</function></member>
    <member><function>array_splice</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
