<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ --> 
<!-- EN-Revision: 315718 Maintainer: andresdzphp Status: ready -->

<appendix xml:id="json.constants" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 &reftitle.constants;
 &extension.constants;
 <para>
  Las siguientes constantes indican el tipo de error retornado por
  <function>json_last_error</function>. Todas están disponibles a partir de
  PHP 5.3.0
 </para>
 <variablelist>
  <varlistentry>
   <term>
    <constant>JSON_ERROR_NONE</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     No ha ocurrido ningún error.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>JSON_ERROR_DEPTH</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Se ha excedido la profundidad máxima de la pila.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>JSON_ERROR_STATE_MISMATCH</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Por desbordamiento de buffer o cuando los modos no coinciden.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>JSON_ERROR_CTRL_CHAR</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Error del carácter de control, posiblemente se ha codificado de forma incorrecta.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>JSON_ERROR_SYNTAX</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Error de sintaxis.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>JSON_ERROR_UTF8</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Caracteres UTF-8 mal formados, posiblemente codificados incorrectamente. Esta
     constante está disponible desde PHP 5.3.1.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
 
 <para>
  Las siguientes constantes se pueden combinar para obtener opciones para
  <function>json_last_error</function>. Todas están disponibles a partir de
  PHP 5.3.0
 </para>
 <variablelist>
  <varlistentry>
   <term>
    <constant>JSON_HEX_TAG</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Todos los &lt; y &gt; se convierten a \u003C y \u003E.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>JSON_HEX_AMP</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Todos los &amp; se convierten a \u0026.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>JSON_HEX_APOS</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Todas las ' se convierten a \u0027.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>JSON_HEX_QUOT</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Todas las " se convierten a  \u0022.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>JSON_FORCE_OBJECT</constant>
    (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Devuelve un objeto en vez de un array cuando se usa un array no
     asociativo. Especialmente útil cuando el destinatario del resultado espera
     un objeto y el array está vacío.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>JSON_NUMERIC_CHECK</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Codifica textos numéricos como números.
     Disponible desde PHP 5.3.3.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>JSON_BIGINT_AS_STRING</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Disponible desde PHP 5.4.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>JSON_PRETTY_PRINT</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Utiliza espacios en blanco para formatear los datos devueltos.
     Disponible desde PHP 5.4.0.
    </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>JSON_UNESCAPED_SLASHES</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     No escapar <literal>/</literal>.
     Disponible desde PHP 5.4.0.
  </simpara>
   </listitem>
  </varlistentry>
  <varlistentry>
   <term>
    <constant>JSON_UNESCAPED_UNICODE</constant>
     (<type>integer</type>)
   </term>
   <listitem>
    <simpara>
     Codificar caracteres Unicode multibyte literalmente (por defecto es escapado como \uXXXX).
     Disponible desde PHP 5.4.0.
    </simpara>
   </listitem>
  </varlistentry>
 </variablelist>
</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

