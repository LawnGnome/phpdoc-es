<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 291072 $ -->
<!-- EN-Revision: 291072 Maintainer: tatai Status: ready -->
<refentry xml:id="function.json-decode" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>json_decode</refname>
  <refpurpose>Decodifica un string JSON</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>json_decode</methodname>
   <methodparam><type>string</type><parameter>json</parameter></methodparam>
   <methodparam choice="opt"><type>bool</type><parameter>asociativo</parameter><initializer>false</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>profundidad</parameter><initializer>512</initializer></methodparam>
  </methodsynopsis>
  <para>
   Convierte un string codificado en JSON en una variable PHP.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>json</parameter></term>
     <listitem>
      <para>
       El <type>string</type> <parameter>json</parameter> a ser decodificado.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>asociativo</parameter></term>
     <listitem>
      <para>
       Cuando es &true;, los <type>object</type>s retornados se convertirán en
	   <type>array</type>s asociativos.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>profundidad</parameter></term>
     <listitem>
      <para>
       Máxima profudidad de recursión.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Retorna el valor codificado de <parameter>json</parameter> en un tipo PHP
   apropiado. Los valores <literal>true</literal>, <literal>false</literal> y
   <literal>null</literal> (case-insensitive) se retornan como &true;, &false;
   y &null; respectivamente. &null; se retorna si no se puede decodificar
   <parameter>json</parameter> o si los datos superan el límite de profundidad
   de recursión indicado por <parameter>profundidad</parameter>.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplos de <function>json_decode</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$json = '{"a":1,"b":2,"c":3,"d":4,"e":5}';

var_dump(json_decode($json));
var_dump(json_decode($json, true));

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(stdClass)#1 (5) {
    ["a"] => int(1)
    ["b"] => int(2)
    ["c"] => int(3)
    ["d"] => int(4)
    ["e"] => int(5)
}

array(5) {
    ["a"] => int(1)
    ["b"] => int(2)
    ["c"] => int(3)
    ["d"] => int(4)
    ["e"] => int(5)
}
]]>
    </screen>
   </example>
   <example>
    <title>Otro ejemplo</title>
    <programlisting role="php">
<![CDATA[
<?php

$json = '{"foo-bar": 12345}';

$obj = json_decode($json);
print $obj->{'foo-bar'}; // 12345

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>common mistakes using <function>json_decode</function></title>
    <programlisting role="php">
<![CDATA[
<?php

// los siguientes strings son válidos en JavaScript pero no en JSON

// el nombre y el valor deben rodearse por dobles comillas
// las comillas simples no son válidas
$bad_json = "{ 'bar': 'baz' }";
json_decode($bad_json); // null

// el nombre debe roderarse por dobles comillas
$bad_json = '{ bar: "baz" }';
json_decode($bad_json); // null

// las comas finales no se permiten
$bad_json = '{ bar: "baz", }';
json_decode($bad_json); // null

?>
]]>
    </programlisting>
   </example>
   <example>
    <title>Errores de <parameter>profundidad</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php
// Codificar los datos.
$json = json_encode(
	array(
		1 => array(
			'Inglés' => array(
				'One',
				'January'
			),
			'Francés' => array(
				'Une',
				'Janvier'
			)
		)
	)
);

// Definimos los errores.
$json_errors = array(
	JSON_ERROR_NONE => 'No ha ocurrido ningún error',
	JSON_ERROR_DEPTH => 'Se ha excedido la máxima profundidad de la pila',
	JSON_ERROR_CTRL_CHAR => 'Error de carácter de control, posiblemente esté mal codificado',
	JSON_ERROR_SYNTAX => 'Error de sintaxis',
);

// Mostramos los errores para diferentes profundidades.
foreach(range(4, 3, -1) as $depth) {
	var_dump(json_decode($json, True, $depth));
	echo 'último error: ', $json_errors[json_last_error()], PHP_EOL, PHP_EOL;
	}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
array(1) {
  [1]=>
  array(2) {
    ["Inglés"]=>
    array(2) {
      [0]=>
      string(3) "One"
      [1]=>
      string(7) "January"
    }
    ["Francés"]=>
    array(2) {
      [0]=>
      string(3) "Une"
      [1]=>
      string(7) "Janvier"
    }
  }
}
último error: No ha ocurrido ningún error

NULL
último error: Se ha excedido la máxima profundidad de la pila
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    La espeficación JSON no es JavaScript, pero sí un subconjunto de JavaScript.
   </para>
  </note>
  <note>
   <para>
    En el caso de error al decodificar, <function>json_last_error</function>
    se puede usar para determinar la naturaleza exacta del error.
   </para>
  </note>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.3.0</entry>
       <entry>Añadido el parámetro opcional <parameter>profundidad</parameter>. La profundidad de recursión por defecto se incrementó de 128 a 512</entry>
      </row>
      <row>
       <entry>5.2.3</entry>
       <entry>La profundidad de recursión por defecto se incrementó de 20 a 128</entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>json_encode</function></member>
    <member><function>json_last_error</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
