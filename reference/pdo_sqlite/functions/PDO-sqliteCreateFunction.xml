<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 315005 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.pdo-sqlitecreatefunction" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::sqliteCreateFunction</refname>
  <refpurpose>
   Registrar una Función Definida por el Usuario para utilizarla en sentencias SQL
  </refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <classsynopsis>
   <ooclass><classname>PDO</classname></ooclass>
   <methodsynopsis>
    <type>bool</type><methodname>sqliteCreateFunction</methodname>
    <methodparam><type>string</type><parameter>function_name</parameter></methodparam>
    <methodparam><type>callback</type><parameter>callback</parameter></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>num_args</parameter></methodparam>
   </methodsynopsis>
  </classsynopsis>
  &warn.experimental.func;
  
  <para>
   Este método permite registrar una función de PHP con SQLite como una
   <acronym>FDU</acronym> (Función Definida por el Usuario), por lo que puede ser llamada
   desde el interior de sentencias SQL.
  </para>
  <para>
   La FDU se puede usar en cualquier sentencia SQL que pueda llamar a funciones, como
   las sentencias SELECT y UPDATE, así como en disparadores.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>function_name</parameter></term>
     <listitem>
      <para>
       El nombre de la función usada en sentencias SQL.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>callback</parameter></term>
     <listitem>
      <para>
       Función de retorno de llamada para manejar la función SQL definida..
      </para>
      <note>
       <simpara>
        Las funciones de retorno de llamada deberían devolver un tipo que comprenda SQLite (p.ej.
        <link linkend="language.types.intro">tipo escalar</link>).
       </simpara>
      </note>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>num_args</parameter></term>
     <listitem>
      <para>
       Indica al analizador de SQLite si la función de llamada de retorno acepta un
       número predeterminado de argumentos.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>PDO::sqliteCreateFunction</function></title>
    <programlisting role="php">
<![CDATA[
<?php
function md5_e_invertir($cadena) 
{
    return strrev(md5($cadena));
}

$bd = new PDO('sqlite:bdsqlite');
$bd->sqliteCreateFunction('md5inv', 'md5_e_invertir', 1);
$filas = $bd->query('SELECT md5inv(nombre_fichero) FROM files')->fetchAll();
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   En este ejemplo tenemos una función que calcula la suma md5 de una
   cadena y la inverte. Cuando se ejecuta la sentencia SQL,
   devuelve el valor de nombre_fichero transformado por nuestra función. La información
   devuelta en <parameter>$filas</parameter> contiene el resultado procesado.
  </para>
  <para>
   La belleza de esta técinia es que no necesita procesar el
   resultado usando un bucle &foreach; desdpués de consultar los datos.
  </para>
  <!-- not for PDO it doesn't, at least not yet 
  <para>
  PHP registers a special function named <literal>php</literal> when the
  database is first opened.  The php function can be used to call any PHP
  function without having to register it first.
 </para>
  <para>
  <example>
  <title>Example of using the PHP function</title>
  <programlisting role="php">
<![CDATA[
  <?php
  $rows = $db->query("SELECT php('md5', filename) from files")->fetchAll();
  ?>
  ]]>
 </programlisting>
  <para>
  This example will call the <function>md5</function> on each
  <literal>filename</literal> column in the database and return the result
  into <parameter>$rows</parameter>
 </para>
 </example>
 </para>
  
  -->
  <tip>
   <para>
    Se puede usar <xref linkend="function.pdo-sqlitecreatefunction" /> y
    <xref linkend="function.pdo-sqlitecreateaggregate" /> para sobreescribir funciones
    de SQL nativas de SQLite.
   </para>
  </tip>
  <note>
   <para>
    Este método no está disponible en el controlador SQLite2.
    Utilice el estilo aniguo de la API sqlite en su lugar.
   </para>
  </note>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><xref linkend="function.pdo-sqlitecreateaggregate" /></member>
    <member><function>sqlite_create_function</function></member>
    <member><function>sqlite_create_aggregate</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
