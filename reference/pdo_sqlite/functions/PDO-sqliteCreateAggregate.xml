<?xml version="1.0" encoding="UTF-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 315005 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="function.pdo-sqlitecreateaggregate" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDO::sqliteCreateAggregate</refname>
  <refpurpose>
   Registrar una Función Definida por el Usuario totalizadora para usarla en sentencias SQL
  </refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <classsynopsis>
   <ooclass><classname>PDO</classname></ooclass>
   <methodsynopsis>
    <type>bool</type><methodname>sqliteCreateAggregate</methodname>
    <methodparam><type>string</type><parameter>function_name</parameter></methodparam>
    <methodparam><type>callback</type><parameter>step_func</parameter></methodparam>
    <methodparam><type>callback</type><parameter>finalize_func</parameter></methodparam>
    <methodparam choice="opt"><type>int</type><parameter>num_args</parameter></methodparam>
   </methodsynopsis>
  </classsynopsis>
  &warn.experimental.func;
  <para>
   Este método es similar a <xref linkend="function.pdo-sqlitecreatefunction"
   /> excepto que registra funciones que pueden ser usadas para calcular un
   resultado total de todas las filas de una consulta.
  </para>
  <para>
   La diferencia clave entre este método y <xref
   linkend="function.pdo-sqlitecreatefunction" /> es que se necesitan dos
   funciones para dirigir la totalización.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>function_name</parameter></term>
     <listitem>
      <para>
       El nombre de la función usada en las sentencias SQL.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>step_func</parameter></term>
     <listitem>
      <para>
       Función de llamada de retorno para cada fila del conjunto de resultados. Su función
       de PHP debería acumular el resultado y almacenarlo en el contexto
       totalizador.
      </para>
      <para>
       Esta función necesita ser definida como:
       <methodsynopsis>
        <methodname><replaceable>step</replaceable></methodname>
        <methodparam><type>mixed</type><parameter>context</parameter></methodparam>
        <methodparam><type>int</type><parameter>rownumber</parameter></methodparam>
        <methodparam><type>mixed</type><parameter>value1</parameter></methodparam>
        <methodparam choice="opt"><type>mixed</type><parameter>value2</parameter></methodparam>
        <methodparam choice="opt"><type>mixed</type><parameter>..</parameter></methodparam>
       </methodsynopsis>
      </para>
      <para>
       <varname>context</varname> será &null; para la primera fila; en
       filas posteriores tendrá el valor que fue devuelto previamente
       desde la función acumuladora; se debería usar esto para guardar el estado
       del todal.
      </para>
      <para>
       <varname>rownumber</varname> guardará el número de fila actual.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>finalize_func</parameter></term>
     <listitem>
      <para>
       Función de llamada de retorno para totalizar la información acumulada de cada fila.
       Una vez que han sido procesadas todas las filas, se llamará a esta función
       y debería tomar entonces la información del contexto totalizador y
       devolver el resultado. Las funciones de llamada de retorno deberían devolver un tipo que entienda
       SQLite (p.ej. <link 
       linkend="language.types.intro">tipo escalar</link>).
      </para>
      <para>
       Esta función necesita ser definida como:
       <methodsynopsis>
        <methodname><replaceable>fini</replaceable></methodname>
        <methodparam><type>mixed</type><parameter>context</parameter></methodparam>
        <methodparam><type>int</type><parameter>rownumber</parameter></methodparam>
       </methodsynopsis>
      </para>
      <para>
       <varname>context</varname> guardará el valor devuelto de la última
       llamada a la función acumuladora.
      </para>
      <para>
       <varname>rownumber</varname> guardará el número de filas sobre las que
       se realizó el total.
      </para>
      <para>
       El valor devuelto por esta función será utilizado como el valor devuelto para
       el total.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>num_args</parameter></term>
     <listitem>
      <para>
       Indica al analizador de SQLite si la función de llamada de retorno acepta un
       número predeterminado de argumentos.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de función totalizadora max_length</title>
    <programlisting role="php">
<![CDATA[
<?php
$datos = array(
   'one',
   'two',
   'three',
   'four',
   'five',
   'six',
   'seven',
   'eight',
   'nine',
   'ten',
   );
$bd = new PDO('sqlite::memory:');
$bd->exec("CREATE TABLE cadenas(a)");
$insert = $bd->prepare('INSERT INTO cadenas VALUES (?)');
foreach ($datos as $cad) {
    $insert->execute(array($cad));
}
$insert = null;

function max_len_step(&$contexto, $número_fila, $cadena) 
{
    if (strlen($cadena) > $contexto) {
        $contexto = strlen($cadena);
    }
    return $contexto;
}

function max_len_finalize(&$contexto, $número_fila) 
{
    return $contexto;
}

$bd->sqliteCreateAggregate('max_len', 'max_len_step', 'max_len_finalize');

var_dump($bd->query('SELECT max_len(a) from cadenas')->fetchAll());

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   En este ejemplo, creamos una función totalizadora que
   calculará la longitud de la cadena más larga en una de las columnas de la
   tabla. Para cada fila, se llama a la función <literal>max_len_step</literal>
   y se le pasa un parámetro <parameter>contexto</parameter>. El parámetro
   contexto es como cualquier otra variable de PHP es establecido para guardar un array
   o incluso un valor de un objeto. En este ejemplo, simplemente lo estamos utilizando para guardar
   la longitud máxima que hemos visto antes; si la
   <parameter>cadena</parameter> tiene una longitud superior al máximo
   actual, actualizamos el contexto para guardar esta nueva longitud máxima.
  </para>
  <para>
   Después de que todas las filas hayan sido procesadas, SQLite llama a la
   función <literal>max_len_finalize</literal> para determinar el resultado
   total. Aquí, realizamos algún tipo de cálculo basado en la
   información encontrada en el <parameter>contexto</parameter>. En nuestro ejemplo sencillo,
   hemos ido calculando el resultado mientras la consulta progresaba, por lo que
   simplemente necesitamos devolver el valor del contexto.
  </para>
  <tip>
   <para>
    NO es recomendable almacenar una copia de los valores en el contexto
    y después procesarlo al final, ya que podría ocasionar que SQLite use un montón de
    memoria al procesar la consulta - piense en cuánta memoria necesitaría
    si un millón de filas estuviran almacenadas en memoria, cada una conteniendo una cadena de 32 bytes
    de longitud.
   </para>
  </tip>
  <tip>
   <para>
    Se puede usar <xref linkend="function.pdo-sqlitecreatefunction" /> y
    <xref linkend="function.pdo-sqlitecreateaggregate" /> para sobreescribir funciones
    de SQL nativas de SQLite.
   </para>
  </tip>
  <note>
   <para>
    Este método no está disponible en el controlador SQLite2.
    Utilice el estilo aniguo de la API sqlite en su lugar.
   </para>
  </note>
  
 </refsect1>
 
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><xref linkend="function.pdo-sqlitecreatefunction" /></member>
    <member><function>sqlite_create_function</function></member>
    <member><function>sqlite_create_aggregate</function></member>
   </simplelist>
  </para>
 </refsect1>
 
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
