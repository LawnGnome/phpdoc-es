<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: n/a Maintainer: lboshell Status: ready -->
<refentry xml:id="function.preg-replace-callback" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>preg_replace_callback</refname>
  <refpurpose>Realizar una búsqueda con expresiones regulares y generar
  reemplazos usando una llamada de retorno</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>preg_replace_callback</methodname>
   <methodparam><type>mixed</type><parameter>patron</parameter></methodparam>
   <methodparam><type>callback</type><parameter>llamada_de_retorno</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>asunto</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>limite</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">conteo</parameter></methodparam>
  </methodsynopsis>
  <para>
   El comportamiento de esta función es casi idéntico al de
   <function>preg_replace</function>, con la excepción de que en lugar del
   parámetro <parameter>reemplazo</parameter>, uno debe especificar una
   <parameter>llamada_de_retorno</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>patron</parameter></term>
     <listitem>
      <para>
       El patrón a buscar. Puede ser una cadena o una matriz con cadenas.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>llamada_de_retorno</parameter></term>
     <listitem>
      <para>
       Una llamada de retorno que será usada pasándole una matriz de los
       elementos coincidentes en <parameter>asunto</parameter>. La llamada
       de retorno debería devolver la cadena de reemplazo.
      </para>
      <para>
       Con frecuencia necesitará la función de <parameter>llamada de
       retorno</parameter> cuando use
       <function>preg_replace_callback</function> únicamente en un lugar. En
       este caso, usted puede usar <function>create_function</function> para
       declarar una función anónima como llamada de retorno dentro del
       llamado a <function>preg_replace_callback</function>. Al hacerlo de
       este modo, usted tendrá toda la información necesaria para el llamado
       en un solo lugar y no abarrota su espacio de nombres de funciones con
       nombres de llamadas de retorno que no son usadas en ninguna otra
       parte.
      </para>
      <para>
       <example>
        <title><function>preg_replace_callback</function> y
        <function>create_function</function></title>
        <programlisting role='php'>
<![CDATA[
<?php
/* un filtro de línea de comandos tipo Unix para convertir letras
 * mayúsculas al comienzo de los parágrafos a minúsculas */
$da = fopen("php://stdin", "r") or die("no se puede leer stdin");
while (!feof($da)) {
    $linea = fgets($da);
    $linea = preg_replace_callback(
        '|<p>\s*\w|',
        create_function(
            // las comillas sencillas son cruciales aquí,
            // o alternativamente escapar todos los signos $ como \$
            '$coincidencias',
            'return strtolower($coincidencias[0]);'
        ),
        $linea
    );
    echo $linea;
}
fclose($da);
?>
]]>
        </programlisting>
       </example>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>asunto</parameter></term>
     <listitem>
      <para>
       La cadena o una matriz con cadenas para buscar y reemplazar.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>limite</parameter></term>
     <listitem>
      <para>
       La cantidad máxima posible de reemplazos para cada patrón en cada
       cadena <parameter>asunto</parameter>. Su valor predeterminado es
       <literal>-1</literal> (sin límite).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>conteo</parameter></term>
     <listitem>
      <para>
       Si se especifica, esta variables será llenada con el número de
       reemplazos realizados.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>preg_replace_callback</function> devuelve una matriz si el
   parámetro <parameter>asunto</parameter> es una matriz, o una cadena de lo
   contrario.
  </para>
  <para>
   Si se encuentran coincidencias, el nuevo <parameter>asunto</parameter>
   será devuelto, de otra forma <parameter>asunto</parameter> será devuelto
   intacto.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.1.0</entry>
       <entry>
        El parámetro <parameter>conteo</parameter> fue agregado
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>preg_replace_callback</function></title>
    <programlisting role='php'>
<![CDATA[
<?php
// este texto fue usado en 2002
// queremos actualizarlo para 2003
$texto = "El día de los inocentes es 04/01/2002\n";
$texto.= "La última navidad fue 12/24/2001\n";
// la llamada de retorno
function siguiente_anyo($coincidencias)
{
  // como es usual: $coincidencias[0] es la coincidencia completa
  // $coincidencias[1] la coincidencia para el primer subpatrón
  // ubicado entre '(...)' y así sucesivamente

  return $coincidencias[1].($coincidencias[2]+1);
}
echo preg_replace_callback(
            "|(\d{2}/\d{2}/)(\d{4})|",
            "siguiente_anyo",
            $texto);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
El día de los inocentes es 04/01/2003
La última navidad fue 12/24/2002
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title><function>preg_replace_callback</function> usando una estructura
    recursiva para manejar código BB encapsulado</title>
    <programlisting role="php">
<![CDATA[
<?php
$entrada = "plano [indent] profundo [indent] más profundo [/indent] profundo [/indent] plano";

function procesarEtiquetasRecursivamente($entrada)
{

    $regex = '#\[indent]((?:[^[]|\[(?!/?indent])|(?R))+)\[/indent]#';

    if (is_array($entrada)) {
        $entrada = '<div style="margin-left: 10px">'.$entrada[1].'</div>';
    }

    return preg_replace_callback($regex, 'procesarEtiquetasRecursivamente', $entrada);
}

$salida = procesarEtiquetasRecursivamente($entrada);

echo $salida;
?>
]]>
    </programlisting>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>preg_replace</function></member>
    <member><function>create_function</function></member>
    <member>&seealso.callback;</member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
