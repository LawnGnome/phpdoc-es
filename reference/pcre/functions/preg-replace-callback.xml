<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.8 $ -->
<!-- EN-Revision: 1.13 Maintainer: lboshell Status: ready -->
<!-- splitted from ./en/functions/pcre.xml, last change in rev 1.47 -->
<refentry xml:id="function.preg-replace-callback" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>preg_replace_callback</refname>
  <refpurpose>Realizar una búsqueda con expresiones regulares y
  generar reemplazos usando una llamada de retorno</refpurpose>
 </refnamediv>
 <refsect1>
  <title>Descripción</title>
  <methodsynopsis>
   <type>mixed</type><methodname>preg_replace_callback</methodname>
   <methodparam><type>mixed</type><parameter>patron</parameter></methodparam>
   <methodparam><type>callback</type><parameter>llamada_de_retorno</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>fuente</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>limite</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">conteo</parameter></methodparam>
  </methodsynopsis>
  <para>
   El comportamiento de esta función es casi idéntico al de
   <function>preg_replace</function>, con la excepción de que en lugar
   del parámetro <parameter>reemplazo</parameter>, uno debe
   especificar una <parameter>llamada_de_retorno</parameter> que será
   usada pasándole una matriz de los elementos coincidentes en la
   cadena fuente. La llamada de retorno debería devolver la cadena de
   reemplazo. Vea <function>preg_replace</function> para la
   descripción de otros parámetros.
  </para>
  <example>
   <title>Ejemplo de <function>preg_replace_callback</function></title>
   <programlisting role='php'>
<![CDATA[
<?php
// este texto fue usado en 2002
// queremos actualizarlo para 2003
$texto = "El día de los inocentes es 04/01/2002\n";
$texto.= "La última navidad fue 12/24/2001\n";
// la llamada de retorno
function siguiente_anyo($coincidencias)
{
  // como es usual: $coincidencias[0] es la coincidencia completa
  // $coincidencias[1] la coincidencia para el primer subpatrón
  // ubicado entre '(...)' y así sucesivamente

  return $coincidencias[1].($coincidencias[2]+1);
}
echo preg_replace_callback(
            "|(\d{2}/\d{2}/)(\d{4})|",
            "siguiente_anyo",
            $texto);
// el resultado es:
// El día de los inocentes es 04/01/2003
// La última navidad fue 12/24/2002
?>
]]>
   </programlisting>
  </example>
  <para>
   Con frecuencia necesitará la función de <parameter>llamada de
   retorno</parameter> cuando use
   <function>preg_replace_callback</function> únicamente en un
   lugar. En este caso, usted puede usar
   <function>create_function</function> para declarar una función
   anónima como llamada de retorno dentro del llamado a
   <function>preg_replace_callback</function>. Al hacerlo de este
   modo, usted tendrá toda la información necesaria para el llamado en
   un solo lugar y no abarrota su espacio de nombres de funciones con
   nombres de llamadas de retorno que no son usadas en ninguna otra
   parte.
  </para>
  <example>
   <title><function>preg_replace_callback</function> y
   <function>create_function</function></title>
   <programlisting role='php'>
<![CDATA[
<?php
/* un filtro de línea de comandos tipo Unix para convertir letras
 * mayúsculas al comienzo de los parágrafos a minúsculas */
$da = fopen("php://stdin", "r") or die("no se puede leer stdin");
while (!feof($da)) {
    $linea = fgets($da);
    $linea = preg_replace_callback(
        '|<p>\s*\w|',
        create_function(
            // las comillas sencillas son cruciales aquí,
            // o alternativamente escapar todos los signos $ como \$
            '$coincidencias',
            'return strtolower($coincidencias[0]);'
        ),
        $linea
    );
    echo $linea;
}
fclose($da);
?>
]]>
   </programlisting>
  </example>
  <example>
   <title><function>preg_replace_callback</function> usando una
   estructura recursiva para manejar código BB encapsulado</title>
   <programlisting role='php'>
<![CDATA[
<?php
$entrada = "plano [indent] profundo [indent] más profundo [/indent] profundo [/indent] plano";

function procesarEtiquetasRecursivamente($entrada)
{

    $regex = '#\[indent]((?:[^[]|\[(?!/?indent])|(?R))+)\[/indent]#';

    if (is_array($entrada)) {
        $entrada = '<div style="margin-left: 10px">'.$entrada[1].'</div>';
    }

    return preg_replace_callback($regex, 'procesarEtiquetasRecursivamente', $entrada);
}

$salida = procesarEtiquetasRecursivamente($entrada);

echo $salida;
?>
]]>
   </programlisting>
  </example>
  <note>
   <para>
    El parámetro <parameter>conteo</parameter> está disponible desde
    PHP 5.1.0.
   </para>
  </note>
  <para>
   Vea también <function>preg_replace</function>,
   <function>create_function</function>, &listendand;
   &seealso.callback;.
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
