<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.8 $ -->
<!-- EN-Revision: 1.26 Maintainer: lboshell Status: ready -->
<refentry xml:id="function.preg-replace" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>preg_replace</refname>
  <refpurpose>Realizar una operación de búsqueda y reemplazo con expresiones
  regulares</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>mixed</type><methodname>preg_replace</methodname>
   <methodparam><type>mixed</type><parameter>patron</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>reemplazo</parameter></methodparam>
   <methodparam><type>mixed</type><parameter>asunto</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>limite</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter role="reference">conteo</parameter></methodparam>
  </methodsynopsis>
  <para>
   Busca en <parameter>asunto</parameter> por coincidencias con
   <parameter>patron</parameter> y las reemplaza con
   <parameter>reemplazo</parameter>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>patron</parameter></term>
     <listitem>
      <para>
       El patrón a buscar. Puede ser una cadena o una matriz con cadenas.
      </para>
      <para>
       El modificador <literal>e</literal> hace que
       <function>preg_replace</function> trate el parámetro
       <parameter>reemplazo</parameter> como código PHP después de que las
       sustituciones de referencias correspondientes son realizadas.
       Consejo: asegúrese de que <parameter>reemplazo</parameter> constituya
       una cadena de código PHP válido, de otra forma PHP se quejará sobre
       un error de análisis sintáctico en la línea que contiene la llamada a
       <function>preg_replace</function>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>reemplazo</parameter></term>
     <listitem>
      <para>
       La cadena o una matriz con las cadenas de reemplazo. Si este
       parámetro es una cadena y el parámetro <parameter>patron</parameter>
       es una matriz, todos los patrones serán reemplazados por esa cadena.
       Si tanto <parameter>patron</parameter> como
       <parameter>reemplazo</parameter> son matrices, cada
       <parameter>patron</parameter> será reemplazado por su contraparte en
       <parameter>reemplazo</parameter>. Si hay menos claves en la matriz
       <parameter>reemplazo</parameter> que en la matriz
       <parameter>patron</parameter>, los patrones extra serán reemplazados
       con una cadena vacía.
      </para>
      <para>
       <parameter>reemplazo</parameter> puede contener referencias de la
       forma <literal>\\<replaceable>n</replaceable></literal> o (desde PHP
       4.0.4) <literal><replaceable>$n</replaceable></literal>, siendo este
       último estilo el más recomendable. Cada referencia de este tipo será
       reemplazada con el texto capturado por el
       <replaceable>n</replaceable>ésimo patrón entre paréntesis.
       <replaceable>n</replaceable> puede ser un valor de 0 a 99, y
       <literal>\\0</literal> o <literal>$0</literal> hacen referencia al
       texto coincidente con el patrón completo. Los paréntesis de apertura
       son contados de izquierda a derecha (comenzando en 1) para obtener el
       número del sub-patrón de captura.
      </para>
      <para>
       Cuando se trabaja con un patrón de reemplazo en donde una referencia
       hacia atrás está inmediatamente seguida por otro número (es decir, se
       coloca un número literal inmediatamente después de un patrón
       coincidente), no es posible usar la familiar notación
       <literal>\\1</literal> para la referencia hacia atrás.
       <literal>\\11</literal>, por ejemplo, confundiría a
       <function>preg_replace</function> ya que no es claro si se desea la
       referencia hacia atrás <literal>\\1</literal> seguida de un
       <literal>1</literal> literal, o la referencia hacia atrás
       <literal>\\11</literal> seguida por nada. En este caso la solución es
       usar <literal>\${1}1</literal>. Esto crea una referencia hacia atrás
       separada <literal>$1</literal>, dejando el <literal>1</literal> como
       una secuencia literal.
      </para>
      <para>
       Cuando se usa el modificador <literal>e</literal>, esta función
       escapa algunos caracteres (a saber <literal>'</literal>,
       <literal>"</literal>, <literal>\</literal> y NULL) en las cadenas que
       reemplazan las referencias hacia atrás. Esto es hecho para asegurarse
       de que no surjan errores de sintaxis por el uso de referencias hacia
       atrás con comillas simples o dobles (p.ej.
       <literal>'strlen(\'$1\')+strlen("$2")'</literal>). Asegúrese de
       conocer la <link linkend="language.types.string">sintaxis de
       cadenas</link> de PHP para saber exactamente cómo lucirá la cadena
       interpretada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>asunto</parameter></term>
     <listitem>
      <para>
       La cadena o una matriz con cadenas para buscar y reemplazar.
      </para>
      <para>
       Si <parameter>asunto</parameter> es una matriz, entonces la operación
       de búsqueda y reemplazo se realiza sobre cada entrada de
       <parameter>asunto</parameter>, y el valor de retorno es una matriz
       también.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>limite</parameter></term>
     <listitem>
      <para>
       La cantidad máxima posible de reemplazos para cada patrón en cada
       cadena <parameter>asunto</parameter>. Su valor predeterminado es
       <literal>-1</literal> (sin límite).
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>conteo</parameter></term>
     <listitem>
      <para>
       Si se especifica, esta variables será llenada con el número de
       reemplazos realizados.
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   <function>preg_replace</function> devuelve una matriz si el parámetro
   <parameter>asunto</parameter> es una matriz, o una cadena de lo
   contrario.
  </para>
  <para>
   Si se encuentran coincidencias, el nuevo <parameter>asunto</parameter>
   será devuelto, de otra forma <parameter>asunto</parameter> será devuelto
   intacto.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>5.1.0</entry>
       <entry>
        Se agregó el parámetro <parameter>conteo</parameter>
       </entry>
      </row>
      <row>
       <entry>4.0.4</entry>
       <entry>
        Se agregó la forma '$n' para el parámetro
        <parameter>reemplazo</parameter>
       </entry>
      </row>
      <row>
       <entry>4.0.2</entry>
       <entry>
        Se agregó el parámetro <parameter>limite</parameter>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Uso de referencias hacia atrás seguidas de literales
    numéricos</title>
    <programlisting role="php">
<![CDATA[
<?php
$cadena = 'April 15, 2003';
$patron = '/(\w+) (\d+), (\d+)/i';
$reemplazo = '${1}1,$3';
echo preg_replace($patron, $reemplazo, $cadena);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
April1,2003
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Uso de matrices indexadas con
    <function>preg_replace</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$cadena = 'The quick brown fox jumped over the lazy dog.';
$patrones[0] = '/quick/';
$patrones[1] = '/brown/';
$patrones[2] = '/fox/';
$reemplazos[2] = 'bear';
$reemplazos[1] = 'black';
$reemplazos[0] = 'slow';
echo preg_replace($patrones, $reemplazos, $cadena);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
The bear black slow jumped over the lazy dog.
]]>
    </screen>
    <para>
     Ordenando por clave los patrones y reemplazos, podemos obtener lo que
     queríamos.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
ksort($patrones);
ksort($reemplazos);
echo preg_replace($patrones, $reemplazos, $cadena);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
The slow black bear jumped over the lazy dog.
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Reemplazo de varios valores</title>
    <programlisting role="php">
<![CDATA[
<?php
$patrones = array ('/(19|20)(\d{2})-(\d{1,2})-(\d{1,2})/',
                   '/^\s*{(\w+)}\s*=/');
$reemplazar = array ('\3/\4/\1\2', '$\1 =');
echo preg_replace($patrones, $reemplazar, '{fechaInicio} = 1999-5-27');
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
$fechaInicio = 5/27/1999
]]>
    </screen>
   </example>
  </para>
  <para>
   <example>
    <title>Uso del modificador 'e'</title>
    <programlisting role="php">
<![CDATA[
<?php
preg_replace("/(<\/?)(\w+)([^>]*>)/e",
             "'\\1'.strtoupper('\\2').'\\3'",
             $cuerpo_html);
?>
]]>
    </programlisting>
    <para>
     Esto pasaría a mayúsculas todas las etiquetas HTML en el texto de
     entrada.
    </para>
   </example>
  </para>
  <para>
   <example>
    <title>Eliminar espacios en blanco</title>
    <para>
     Este ejemplo remueve espacios de más de una cadena.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
$cadena = 'foo   o';
$cadena = preg_replace('/\s\s+/', ' ', $cadena);
// Ahora sera 'foo o'
echo $cadena;
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Uso del parámetro <parameter>conteo</parameter></title>
    <programlisting role="php">
<![CDATA[
<?php
$conteo = 0;

echo preg_replace(array('/\d/', '/\s/'), '*', 'xp 4 to', -1 , $conteo);
echo $conteo; //3
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
xp***to
3
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="notes">
  &reftitle.notes;
  <note>
   <para>
    Cuando se usan matrices con <parameter>patron</parameter> y
    <parameter>reemplazo</parameter>, las claves son procesadas en el orden
    en que aparecen en la matriz. Esto <emphasis>no es
    necesariamente</emphasis> lo mismo que el orden de índices numéricos. Si
    usan índices para identificar cuál <parameter>patron</parameter> debería
    ser reemplazado por cuál <parameter>reemplazo</parameter>, debería usar
    <function>ksort</function> sobre cada matriz antes de llamar
    <function>preg_replace</function>.
   </para>
  </note>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>preg_match</function></member>
    <member><function>preg_replace_callback</function></member>
    <member><function>preg_split</function></member>
   </simplelist>
  </para>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
