<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./es/functions/pcre.xml, last change in rev 1.1 -->
<!-- last change to 'preg-match-all' in en/ tree in rev 1.2 -->
  <refentry id="function.preg-match-all">
   <refnamediv>
    <refname>preg_match_all</refname>
    <refpurpose>Realiza un completo emparejamiento de expresiones</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis>
     <type>int</type><methodname>preg_match_all</methodname>
     <methodparam><type>string</type><parameter>pattern</parameter></methodparam>
     <methodparam><type>string</type><parameter>subject</parameter></methodparam>
     <methodparam><type>array</type><parameter>matches</parameter></methodparam>
     <methodparam choice="opt"><type>int</type><parameter>order</parameter></methodparam>
     </methodsynopsis>
    <para>
     Busca en <parameter>subject</parameter> todos los emparejamientos de la
     expresi&oacute;n <parameter>pattern</parameter> y los pone en <parameter>matches</parameter>
     de la forma indicada por <parameter>order</parameter>.</para>
    <para>
     Despu&eacute;s de encontrar el primer emparejamiento, las subsiguientes b&uacute;squedas
     empiezan desde el punto del &uacute;ltimo casamiento.
    </para>
    <para>
     <parameter>order</parameter> puede tener los siguientes valores:
     <variablelist>
      <varlistentry>
       <term>PREG_PATTERN_ORDER</term>
       <listitem>
        <para>
         Los resultados ser&aacute;n devueltos de manera que $matches[0] es un array con el
         patr&oacute;n de b&uacute;squeda completo, $matches[1] es una array de las cadenas
         casadas por el primer subpatr&oacute;n que est&eacute; entre par&eacute;ntesis y as&iacute; sucesivamente.
         <informalexample>
          <programlisting>
preg_match_all("|&lt;[^>]+>(.*)&lt;/[^>]+>|U", "&lt;b>example: &lt;/b>&lt;div align=left>this is a test&lt;/div>", $out, PREG_PATTERN_ORDER);
print $out[0][0].", ".$out[0][1]."\n";
print $out[1][0].", ".$out[1][1]."\n"
          </programlisting>
         </informalexample>

         Esta ejemplo dar&aacute; como resultado:
         <informalexample>
          <programlisting>
&lt;b>example: &lt;/b>, &lt;div align=left>this is a test&lt;/div>
example: , this is a test
          </programlisting>
         </informalexample>

         As&iacute;, $out[0] contiene el array con las cadena que casan completamente con el patr&oacute;n
         y $out[1] con las cadenas que se encuentran entre los tags.</para>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>PREG_SET_ORDER</term>
       <listitem>
        <para>
         Los resultados son dados de manera que $matches[0] es una array del
         primer conjunto de emparejamientos, $matches[1] es un array de los
         segundos conjuntos de casamientos y as&iacute; sucesivamente.
         <informalexample>
          <programlisting>
preg_match_all("|&lt;[^>]+>(.*)&lt;/[^>]+>|U", "&lt;b>example: &lt;/b>&lt;div align=left>this is a test&lt;/div>", $out, PREG_SET_ORDER);
print $out[0][0].", ".$out[0][1]."\n";
print $out[1][0].", ".$out[1][1]."\n"
          </programlisting>
         </informalexample>

         Este ejemplo dar&aacute; como resultado:
         <informalexample>
          <programlisting>
&lt;b>example: &lt;/b>, example:
&lt;div align=left>this is a test&lt;/div>, this is a test
          </programlisting>
         </informalexample>
         En este caso, $matches[0] es el primer conjunto de emparejamientos y
         $matches[0][0] tiene el casamiento completo, $matches[0][1] el del
         primer subpatr&oacute;n y as&iacute; sucesivamente. Similarmente, $matches[1] es el
         segundo conjunto de emparejamientos, etc.</para>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>

    <para>
     Si <parameter>order</parameter> no es dado, se asume PREG_PATTERN_ORDER.</para>
    <para>
     Devuelve el n&uacute;mero de casamientos completos, &false; si no hubo o se produjo
     error.</para>
    <para>
     <example>
      <title>Obtener los n&uacute;mero de tel&eacute;fonos de un texto.</title>
      <programlisting>
preg_match_all("/\(?  (\d{3})?  \)?  (?(1)  [\-\s] ) \d{3}-\d{4}/x",
               "Call 555-1212 or 1-800-555-1212", $phones);
      </programlisting>
     </example></para>

    <simpara>
     Examina tambi&eacute;n <function>preg_match</function>,
     <function>preg_replace</function> y <function>preg_split</function>.
    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
