<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.9 $ -->
<!-- EN-Revision: 1.23 Maintainer: lboshell Status: ready -->
<refentry xml:id="function.preg-match-all" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>preg_match_all</refname>
  <refpurpose>Realizar una comparación global con una expresión
  regular</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>int</type><methodname>preg_match_all</methodname>
   <methodparam><type>string</type><parameter>patron</parameter></methodparam>
   <methodparam><type>string</type><parameter>asunto</parameter></methodparam>
   <methodparam><type>array</type><parameter role="reference">coincidencias</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>banderas</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>desplazamiento</parameter></methodparam>
  </methodsynopsis>
  <para>
   Busca el <parameter>asunto</parameter> por todas las coincidencias con la
   expresión regular dada en <parameter>patron</parameter>, y las coloca en
   <parameter>coincidencias</parameter> en el orden especificado por
   <parameter>banderas</parameter>.
  </para>
  <para>
   Después de que la primera coincidencia es encontrada, las búsquedas
   subsiguientes continúan desde el final de la última coincidencia.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>patron</parameter></term>
     <listitem>
      <para>
       El patrón a buscar, como una cadena.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>asunto</parameter></term>
     <listitem>
      <para>
       La cadena de entrada.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>coincidencias</parameter></term>
     <listitem>
      <para>
       En este caso, $coincidencias[0] es el primer conjunto de
       coincidencias, y <varname>$coincidencias[0][0]</varname> tiene el
       texto que coincidió con el patrón completo,
       <varname>$coincidencias[0][1]</varname> tiene el texto que coincidió
       con el primer sub-patrón y así sucesivamente. De forma semejante,
       $coincidencias[1] es el segundo conjunto de coincidencias, etc.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>banderas</parameter></term>
     <listitem>
      <para>
       Puede ser una combinación de las siguientes banderas (note que no
       tiene sentido usar <constant>PREG_PATTERN_ORDER</constant> junto con
       <constant>PREG_SET_ORDER</constant>):
       <variablelist>
        <varlistentry>
         <term><constant>PREG_PATTERN_ORDER</constant></term>
         <listitem>
          <para>
           Ordena los resultados de tal forma que $coincidencias[0] es una
           matriz con las coincidencias completas del patrón,
           $coincidencias[1] es una matriz con las cadenas que coinciden con
           el primer sub-patrón entre paréntesis, y así sucesivamente.
          </para>
          <para>
           <informalexample>
            <programlisting role="php">
<![CDATA[
<?php
preg_match_all("|<[^>]+>(.*)</[^>]+>|U",
    "<b>ejemplo: </b><div align=left>esta es una prueba</div>",
    $salida, PREG_PATTERN_ORDER);
echo $salida[0][0] . ", " . $salida[0][1] . "\n";
echo $salida[1][0] . ", " . $salida[1][1] . "\n";
?>
]]>
            </programlisting>
            &example.outputs;
            <screen role="html">
<![CDATA[
<b>ejemplo: </b>, <div align=left>esta es una prueba</div>
ejemplo: , esta es una prueba
]]>
            </screen>
            <para>
             Así que $salida[0] contiene una matriz de cadenas que
             coincidieron con el patrón completo, y $salida[1] contiene una
             matriz de cadenas ubicadas entre etiquetas.
            </para>
           </informalexample>
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>PREG_SET_ORDER</constant></term>
         <listitem>
          <para>
           Ordena los resultados de forma tal que $coincidencias[0] es una
           matriz que contiene el primer conjunto de coincidencias,
           $coincidencias[1] es una matriz con el segundo conjunto de
           coincidencias, y así sucesivamente.
           <informalexample>
            <programlisting role="php">
<![CDATA[
<?php
preg_match_all("|<[^>]+>(.*)</[^>]+>|U",
    "<b>ejemplo: </b><div align=\"left\">esta es una prueba</div>",
    $salida, PREG_SET_ORDER);
echo $salida[0][0] . ", " . $salida[0][1] . "\n";
echo $salida[1][0] . ", " . $salida[1][1] . "\n";
?>
]]>
            </programlisting>
            &example.outputs;
            <screen role="html">
<![CDATA[
<b>ejemplo: </b>, ejemplo:
<div align="left">esta es una prueba</div>, esta es una prueba
]]>
            </screen>
           </informalexample>
          </para>
         </listitem>
        </varlistentry>
        <varlistentry>
         <term><constant>PREG_OFFSET_CAPTURE</constant></term>
         <listitem>
          <para>
           Si es pasada esta bandera, para cada coincidencia que ocurre,
           será devuelto también el desplazamiento de la cadena adjunta.
           Note que esto modifica el valor de
           <parameter>coincidencias</parameter>, convirtiéndolo en una
           matriz en donde cada elemento es una matriz que consiste de la
           cadena que coincidió en la posición <literal>0</literal>, y su
           desplazamiento de cadena al interior del
           <parameter>asunto</parameter> en la posición
           <literal>1</literal>.
          </para>
         </listitem>
        </varlistentry>
       </variablelist>
      </para>
      <para>
       Si no se indica bandera alguna, se asume el uso de
       <constant>PREG_PATTERN_ORDER</constant>.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>desplazamiento</parameter></term>
     <listitem>
      <para>
       Normalmente, la búsqueda comienza desde el inicio de la cadena de
       asunto. El parámetro opcional <parameter>desplazamiento</parameter>
       puede ser usado para especificar el lugar alternativo desde donde
       debe iniciar la búsqueda.
      </para>
      <note>
       <para>
        El uso de <parameter>desplazamiento</parameter> no es equivalente a
        pasar <literal>substr($asunto, $desplazamiento)</literal> a
        <function>preg_match_all</function> en lugar de la cadena de asunto,
        ya que <parameter>patron</parameter> puede contener aserciones como
        <emphasis>^</emphasis>, <emphasis>$</emphasis> o
        <emphasis>(?&lt;=x)</emphasis>. Vea <function>preg_match</function>
        para más ejemplos.
       </para>
      </note>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve el número de coincidencias con el patrón completo (que puede ser
   cero), o &false; si ocurre un error.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>4.3.3</entry>
       <entry>
        Fue agregado el parámetro <parameter>desplazamiento</parameter>
       </entry>
      </row>
      <row>
       <entry>4.3.0</entry>
       <entry>
        Fue agregada la bandera <constant>PREG_OFFSET_CAPTURE</constant>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Obtener todos los números telefónicos de un segmento de
    texto.</title>
    <programlisting role="php">
<![CDATA[
<?php
preg_match_all("/\(?  (\d{3})?  \)?  (?(1)  [\-\s] ) \d{3}-\d{4}/x",
                "Llame al 555-1212  1-800-555-1212", $telefonos);
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Encontrar etiquetas HTML coincidentes (de forma
    ambiciosa)</title>
    <programlisting role="php">
<![CDATA[
<?php

// El \\2 es un ejemplo de referencia hacia atrás. Este le dice a pcre
// que debe buscar el segundo conjunto de paréntesis en la expresión
// regular misma, que sería ([\w]+) en este caso. La barra invertida
// extra es requerida ya que la cadena se encuentra entre comillas
// dobles.
$html = "<b>texto en negrilla</b><a href=hola.html>haga clic aquí</a>";

preg_match_all("/(<([\w]+)[^>]*>)(.*)(<\/\\2>)/", $html, $coincidencias, PREG_SET_ORDER);

foreach ($coincidencias as $val) {
    echo "coincidencia: " . $val[0] . "\n";
    echo "parte 1: " . $val[1] . "\n";
    echo "parte 2: " . $val[3] . "\n";
    echo "parte 3: " . $val[4] . "\n\n";
}
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="html">
<![CDATA[
coincidencia: <b>texto en negrilla</b>
parte 1: <b>
parte 2: texto en negrilla
parte 3: </b>

coincidencia: <a href=hola.html>haga clic aquí</a>
parte 1: <a href=hola.html>
parte 2: haga clic aquí
parte 3: </a>
]]>
    </screen>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>preg_match</function></member>
    <member><function>preg_replace</function></member>
    <member><function>preg_split</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
