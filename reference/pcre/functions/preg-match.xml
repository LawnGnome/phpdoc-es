<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.19 Maintainer: lboshell Status: ready -->
<!-- splitted from ./en/functions/pcre.xml, last change in rev 1.2 -->
  <refentry id="function.preg-match">
   <refnamediv>
    <refname>preg_match</refname>
    <refpurpose>Realizar una comparaci&oacute;n de expresi&oacute;n
    regular</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis>
      <type>int</type><methodname>preg_match</methodname>
      <methodparam><type>string</type><parameter>patron</parameter></methodparam>
      <methodparam><type>string</type><parameter>asunto</parameter></methodparam>
      <methodparam choice="opt"><type>array</type><parameter role="reference">coincidencias</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>banderas</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>desplazamiento</parameter></methodparam>
     </methodsynopsis>
    <para>
     Busca en <parameter>asunto</parameter> por una coincidencia con
     la expresi&oacute;n regular dada en
     <parameter>patron</parameter>.
    </para>
    <para>
     Si se entrega el par&aacute;metro
     <parameter>coincidencias</parameter>, entonces &eacute;ste es
     llenado con los resultados de la
     b&uacute;squeda. <varname>$coincidencias[0]</varname>
     contendr&aacute; el texto que coincidi&oacute; con el
     patr&oacute;n completo, <varname>$coincidencias[1]</varname>
     tendr&aacute; el texto que coincidi&oacute; con el primer
     sub-patr&oacute;n en par&eacute;ntesis capturado, y as&iacute;
     sucesivamente.
    </para>
    <para>
     <parameter>banderas</parameter> puede ser la siguiente bandera:
     <variablelist>
      <varlistentry>
       <term>PREG_OFFSET_CAPTURE</term>
       <listitem>
        <simpara>
         Si es pasada esta bandera, entonces para cada coincidencia
         encontrada tambi&eacute;n ser&aacute; devuelto el
         desplazamiento de la cadena anexa. Note que esto modifica el
         valor de retorno a una matriz en donde cada elemento es una
         matriz que consiste de la cadena coincidente en la
         posici&oacute;n <literal>0</literal> y su desplazamiento de
         cadena al interior de <parameter>asunto</parameter> en la
         posici&oacute;n <literal>1</literal>. Esta bandera
         est&aacute; disponible desde PHP 4.3.0.
        </simpara>
       </listitem>
      </varlistentry>
     </variablelist>
     El par&aacute;metro <parameter>banderas</parameter> est&aacute;
     disponible desde PHP 4.3.0.
    </para>

    <para>
     Normalmente, la b&uacute;squeda comienza desde el principio de la
     cadena de asunto. El par&aacute;metro opcional
     <parameter>desplazamiento</parameter> puede ser usado para
     especificar el lugar alterno desde donde empezar la
     b&uacute;squeda. El par&aacute;metro
     <parameter>desplazamiento</parameter> est&aacute; disponible
     desde PHP 4.3.3.
    </para>
    <note>
     <para>
      El uso de <parameter>desplazamiento</parameter> no es
      equivalente a pasar <literal>substr($asunto,
      $desplazamiento)</literal> a <function>preg_match</function> en
      lugar de la cadena de asunto, ya que
      <parameter>patron</parameter> puede contener aserciones tales
      como <emphasis>^</emphasis>, <emphasis>$</emphasis> o
      <emphasis>(?&lt;=x)</emphasis>. Compare:
     </para>
     <informalexample>
      <programlisting role="php">
<![CDATA[
<?php
$asunto = "abcdef";
$patron = '/^def/';
preg_match($patron, $asunto, $coincidencias, PREG_OFFSET_CAPTURE, 3);
print_r($coincidencias);
?>
]]>
      </programlisting>
      &example.outputs;
      <screen>
<![CDATA[
Array
(
)
]]>
      </screen>
      <para>
       mientras que el siguiente ejemplo
      </para>
      <programlisting role="php">
<![CDATA[
<?php
$asunto = "abcdef";
$patron = '/^def/';
preg_match($patron, substr($asunto,3), $coincidencias, PREG_OFFSET_CAPTURE);
print_r($coincidencias);
?>
]]>
      </programlisting>
      <para>
       producir&aacute;
      </para>
      <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [0] => def
            [1] => 0
        )

)
]]>
      </screen>
     </informalexample>
    </note>

    <para>
     <function>preg_match</function> devuelve el n&uacute;mero de
     veces que <parameter>patron</parameter> coincide. Este
     n&uacute;mero ser&aacute; 0 (no existe coincidencia) o 1, ya que
     <function>preg_match</function> detendr&aacute; la
     b&uacute;squeda despu&eacute;s de la primera coincidencia. Por el
     contrario, <function>preg_match_all</function> continuar&aacute;
     hasta llegar al final de <parameter>asunto</parameter>.
     <function>preg_match</function> devuelve &false; si ocurre un
     error.
    </para>
    <tip>
     <para>
      No use <function>preg_match</function> si s&oacute;lo desea
      verificiar si una cadena est&aacute; contenida en otra. Use
      <function>strpos</function> o <function>strstr</function> en su
      lugar, ya que &eacute;stas son alternativas m&aacute;s
      r&aacute;pidas.
     </para>
    </tip>
    <para>
     <example>
      <title>Buscar la cadena de texto "php"</title>
      <programlisting role="php">
<![CDATA[
<?php
// El caracter "i" despues del delimitador del patron indica una
// busqueda insensible a mayusculas/minusculas
if (preg_match("/php/i", "PHP es el lenguaje de scripting web de moda.")) {
    echo "Se ha encontrado una coincidencia.";
} else {
    echo "No se ha encontrado una coincidencia.";
}
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Buscar la palabra "web"</title>
      <programlisting role="php">
<![CDATA[
<?php
/* La secuencia \b en el patron indica un limite de palabra, asi que solo la
 * palabra unica "web" coincide, y no una palabra parcial como "webbing" o
 * "cobweb" */
if (preg_match("/\bweb\b/i", "PHP es el lenguaje de scripting web de moda.")) {
    echo "Se ha encontrado una coincidencia.";
} else {
    echo "No se ha encontrado una coincidencia.";
}

if (preg_match("/\bweb\b/i", "PHP es el website del lenguaje de scripting de moda.")) {
    echo "Se ha encontrado una coincidencia.";
} else {
    echo "No se ha encontrado una coincidencia.";
}
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     <example>
      <title>Obtener el nombre de dominio de una URL</title>
      <programlisting role="php">
<![CDATA[
<?php
// obtener el nombre de host de una URL
preg_match("/^(http:\/\/)?([^\/]+)/i",
    "http://www.php.net/index.html", $coincidencias);
$host = $coincidencias[2];

// obtener los ultimos dos segmentos del nombre de host
preg_match("/[^\.\/]+\.[^\.\/]+$/", $host, $coincidencias);
echo "el nombre de dominio es: {$coincidencias[0]}\n";
?>
]]>
      </programlisting>
      <para>
       Este ejemplo producir&aacute;:
      </para>
      <screen>
<![CDATA[
el nombre de dominio es: php.net
]]>
      </screen>
     </example>
    </para>
    <para>
     Vea tambi&eacute;n <function>preg_match_all</function>,
     <function>preg_replace</function>, y
     <function>preg_split</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
