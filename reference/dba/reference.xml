<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.9 $ -->
<!-- EN-Revision: 1.26 Maintainer: lboshell Status: ready -->
<!-- Purpose: database.abstract -->
<!-- Membership: bundled -->

 <reference xml:id="ref.dba" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Funciones de la Capa de Abstracción de Bases de Datos
  (tipo-dbm)</title>
  <titleabbrev>dba</titleabbrev>

  <partintro>
   <section xml:id="dba.intro">
    &reftitle.intro;
   <para>
    Estas funciones forman la base para acceder a bases de datos tipo
    Berkeley DB.
   </para>
   <para>
    Esta es una capa general de abstracción para varias bases de datos
    basadas en archivos. Como tal, su funcionalidad está limitada al
    sub-conjunto común de características que soportan bases de datos
    modernas como <link xlink:href="&url.sleepycat;">DB2 de Sleepycat
    Software</link>. (No confundirla con el software DB2 de IBM, el cual es
    soportado por medio de las <link linkend="ref.uodbc">funciones
    ODBC</link>.)
   </para>
  </section>

   <section xml:id="dba.requirements">
    &reftitle.required;
    <para>
     El comportamiento de varios aspectos depende de la implementación de la
     base de datos interna. Funciones como <function>dba_optimize</function>
     y <function>dba_sync</function> harán lo que prometen para una base de
     datos y no tendrán efecto sobre otras. Es necesario descargar e
     instalar los gestores de base de datos soportados.
    <table>
     <title>Lista de gestores de DBA</title>
     <tgroup cols="2">
      <thead>
       <row>
        <entry>Gestor</entry>
        <entry>Notas</entry>
       </row>
      </thead>
      <tbody>
       <row>
        <entry><literal>dbm</literal></entry>
        <entry>
         Dbm es el tipo más antiguo (original) de bases de datos tipo
         Berkeley DB. Es recomendable evitarlo, en lo posible. No soportamos
         las funciones de compatibilidad incorporadas en DB2 y gdbm, ya que
         solo son compatibles en el nivel de código fuente, pero no pueden
         gestionar el formato dbm original.
        </entry>
       </row>

       <row>
        <entry><literal>ndbm</literal></entry>
        <entry>
         Ndbm es un tipo más reciente y flexible que dbm. Aun tiene muchos
         de los límites arbitrarios de dbm (y por lo tanto es obsoleto).
        </entry>
       </row>

       <row>
        <entry><literal>gdbm</literal></entry>
        <entry>
         Gdbm es el <link xlink:href="&url.gdbm;">administrador de bases de
         datos GNU</link>.
        </entry>
       </row>

       <row>
        <entry><literal>db2</literal></entry>
        <entry>
         DB2 es el formato <link xlink:href="&url.sleepycat;">DB2 de
         Sleepycat Software</link>. Es descrito como "un grupo de
         herramientas programáticas que ofrecen soporte incorporado y de
         alto rendimiento de bases de datos tanto para aplicaciones
         independientes como cliente/servidor".
        </entry>
       </row>

       <row>
        <entry><literal>db3</literal></entry>
        <entry>
         DB3 es <link xlink:href="&url.sleepycat;">DB3 de Sleepycat
         Software</link>.
        </entry>
       </row>

       <row>
        <entry><literal>db4</literal></entry>
        <entry>
         DB4 es <link xlink:href="&url.sleepycat;">DB4 de Sleepycat
         Software</link>. Este se encuentra disponible desde PHP 4.3.2.
        </entry>
       </row>

       <row>
        <entry><literal>cdb</literal></entry>
        <entry>
         Cdb es "un paquete rápido, confiable y ligero para crear y leer
         bases de datos constantes." Es del creador de qmail y puede
         encontrarse en <link xlink:href="&url.cdb;">&url.cdb;</link>. Ya
         que es constante, sólo soportamos las operaciones de lectura. Y
         desde PHP 4.3.0 soportamos escritura (no actualización) a través de
         la biblioteca cdb interna.
        </entry>
       </row>

       <row>
        <entry><literal>cdb_make</literal></entry>
        <entry>
         A partir de PHP 4.3.0 soportamos la creación (no actualización) de
         archivos cdb cuando la biblioteca cdb incorporada es usada.
        </entry>
       </row>

       <row>
        <entry><literal>flatfile</literal></entry>
        <entry>
         Este formato está disponible desde PHP 4.3.0 únicamente para
         efectos de compatibilidad con la extensión obsoleta <link
         linkend="ref.dbm">dbm</link> y debería evitarse. Sin embargo es
         posible usarlo cuando los archivos fueron creados en este formato.
         Eso ocurre cuando 'configure' no encuentra alguna biblioteca
         externa.
        </entry>
       </row>

       <row>
        <entry><literal>inifile</literal></entry>
        <entry>
         Este se encuentra disponible desde PHP 4.3.3 y tiene la capacidad
         de modificar archivos php.ini desde scripts PHP. Cuando se trabaja
         con archivos ini es posible pasar matrices de la forma
         array(0=>grupo,1=>nombre_valor) o cadenas de la forma
         "[grupo]nombre_valor" en donde el grupo es opcional. Dado que las
         funciones <function>dba_firstkey</function> y
         <function>dba_nextkey</function> devuelven representaciones tipo
         cadena de la clave, existe una nueva función,
         <function>dba_key_split</function>, disponible desde PHP 5 que
         permite convertir las claves tipo cadena en claves tipo matriz sin
         perder &false;.
        </entry>
       </row>

       <row>
        <entry><literal>qdbm</literal></entry>
        <entry>
         Este se encuentra disponible desde PHP 5.0.0. La biblioteca qdbm
         puede encontrarse en <link
         xlink:href="http://qdbm.sourceforge.net">http://qdbm.sourceforge.net</link>.
        </entry>
       </row>

      </tbody>
     </tgroup>
    </table>
    </para>
    <para>
     Cuando se invocan las funciones <function>dba_open</function> o
     <function>dba_popen</function>, uno de los nombres de gestor debe
     entregarse como argumento. La lista de gestores realmente disponibles
     se muestra al invocarse <function>phpinfo</function> o
     <function>dba_handlers</function>.
    </para>
   </section>

   &reference.dba.configure;

   <section xml:id="dba.runtime">
    &reftitle.runtime;
    &no.config;
   </section>

   <section xml:id="dba.resources">
    &reftitle.resources;
    <para>
    Las funciones <function>dba_open</function> y
    <function>dba_popen</function> devuelven un gestor al archivo de base de
    datos a acceder especificado, el cual es usado por todas las otras
    llamadas a funciones dba.
    </para>
   </section>

   <section xml:id="dba.constants">
    &reftitle.constants;
    &no.constants;
   </section>

   <section xml:id="dba.examples">
    &reftitle.examples;
     <para>
      <example>
       <title>Ejemplo de DBA</title>
       <programlisting role="php">
<![CDATA[
<?php

$id = dba_open("/tmp/prueba.db", "n", "db2");

if (!$id) {
    echo "dba_open ha fallado\n";
    exit;
}

dba_replace("clave", "¡Este es un ejemplo!", $id);

if (dba_exists("clave", $id)) {
    echo dba_fetch("clave", $id);
    dba_delete("clave", $id);
}

dba_close($id);
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     DBA es seguro con material binario y no tiene límites arbitrarios. Sin
     embargo, hereda todos los límites establecidos por la implementación de
     la base de datos interna.
    </para>
    <para>
     Todas las bases de datos basadas en archivo deben ofrecer una forma de
     establecer el modo de archivo de una base de datos recién creada, si es
     posible. Un modo de archivo es pasado por lo general como el cuarto
     argumento a <function>dba_open</function> o
     <function>dba_popen</function>.
    </para>
    <para>
     Es posible acceder a todas las entradas de una base de datos en una
     forma lineal usando las funciones <function>dba_firstkey</function> y
     <function>dba_nextkey</function>. No debe modificar la base de datos
     mientras la recorre.
    </para>
    <para>
     <example>
      <title>Recorrido de una base de datos</title>
      <programlisting role="php">
<![CDATA[
<?php

// ...abrir base de datos...

$clave = dba_firstkey($id);

while ($clave != false) {
    if (true) {   // recordar la clave para realizar alguna acción mas adelante
        $manejar_despues[] = $clave;
    }
    $clave = dba_nextkey($id);
}

foreach ($manejar_despues as $val) {
    dba_delete($val, $id);
}

?>
]]>
      </programlisting>
     </example>
    </para>
   </section>

  </partintro>

&reference.dba.entities.functions;

 </reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

