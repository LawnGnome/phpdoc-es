<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 299003 Maintainer: seros Status: ready -->

<refentry xml:id="datetime.createfromformat" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>DateTime::createFromFormat</refname>
  <refpurpose>Devuelve un nuevo objeto DateTime formateado según el formato especificado</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <para>&style.oop;</para>
  <methodsynopsis>
   <modifier>public</modifier> <modifier>static</modifier> <type>DateTime</type><methodname>DateTime::createFromFormat</methodname>
   <methodparam><type>string</type><parameter>format</parameter></methodparam>
   <methodparam><type>string</type><parameter>time</parameter></methodparam>
   <methodparam choice="opt"><type>DateTimeZone</type><parameter>timezone</parameter></methodparam>
  </methodsynopsis>
  <para>&style.procedural;</para>
  <methodsynopsis>
   <type>DateTime</type><methodname>date_create_from_format</methodname>
   <methodparam><type>string</type><parameter>format</parameter></methodparam>
   <methodparam><type>string</type><parameter>time</parameter></methodparam>
   <methodparam choice="opt"><type>DateTimeZone</type><parameter>timezone</parameter></methodparam>
  </methodsynopsis>
  <para>
   Devuelve un nuevo objeto DateTime formateado según el formato especificado.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>format</parameter></term>
    <listitem>
     <para>
      Formato aceptado por <function>date</function>.
     </para>
     <para>
      Si <parameter>format</parameter> no contiene el carácter
      <literal>!</literal>, las partes del valor de la fecha/hora
      especificadas en <parameter>format</parameter> pero no especificadas
      en <parameter>time</parameter> serán establecidas a la hora actual
      del sistema.
     </para>
     <para>
      Si <parameter>format</parameter> contiene el
      carácter <literal>!</literal>, las partes de la hora generadas
      especificadas a la izquierda de
      <literal>!</literal> en <parameter>format</parameter> serán
      establecidas a los valores correspondientes de la época Unix.
     </para>
     <para>
      Si el primer carácter de <parameter>format</parameter>
      es <literal>!</literal>, todas las partes del valor de la fecha/hora
      generadas que no estén especificadas en
      <parameter>time</parameter> serán inicializadas a los valores
      correspondientes a la época Unix. 
     </para>
     <para>
      La época Unix es 1970-01-01 00:00:00 UTC.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>time</parameter></term>
    <listitem>
     <para>
      Una cadena que representa la hora.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>timezone</parameter></term>
    <listitem>
     <para>
      Un objeto <classname>DateTimeZone</classname> que representa la
      zona horaria deseada.
     </para>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve una nueva instancia de DateTime &return.falseforfailure;.
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo de <function>DateTime::createFromFormat</function></title>
   <para>&style.oop;</para>
   <programlisting role="php">
<![CDATA[
<?php
$fecha = DateTime::createFromFormat('j-M-Y', '15-Feb-2009');
echo $fecha->format('Y-m-d');
?>
]]>
   </programlisting>
   <para>&style.procedural;</para>
   <programlisting role="php">
<![CDATA[
<?php
$fecha = date_create_from_format('j-M-Y', '15-Feb-2009');
echo date_format($fecha, 'Y-m-d');
?>
]]>
   </programlisting>
   &examples.outputs;
   <screen>
<![CDATA[
2009-02-15
]]>
   </screen>
  </example>
  <example>
   <title>Complejidades de <function>DateTime::createFromFormat</function></title>
   <programlisting role="php">
<![CDATA[
<?php
echo 'Momento actual: ' . date('Y-m-d H:i:s') . "\n";

$formato = 'Y-m-d';
$fecha = DateTime::createFromFormat($formato, '2009-02-15');
echo "Formato: $formato; " . $fecha->format('Y-m-d H:i:s') . "\n";

$formato = 'Y-m-d H:i:s';
$fecha = DateTime::createFromFormat($formato, '2009-02-15 15:16:17');
echo "Formato: $formato; " . $fecha->format('Y-m-d H:i:s') . "\n";

$formato = 'Y-m-!d H:i:s';
$fecha = DateTime::createFromFormat($formato, '2009-02-15 15:16:17');
echo "Formato: $formato; " . $fecha->format('Y-m-d H:i:s') . "\n";

$formato = '!d';
$fecha = DateTime::createFromFormat($formato, '15');
echo "Formato: $formato; " . $fecha->format('Y-m-d H:i:s') . "\n";
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
Momento actual: 2010-04-23 10:29:35
Formato: Y-m-d; 2009-02-15 10:29:35
Formato: Y-m-d H:i:s; 2009-02-15 15:16:17
Formato: Y-m-!d H:i:s; 1970-01-15 15:16:17
Formato: !d; 1970-01-15 00:00:00
]]>
   </screen>
  </example>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <simplelist>
   <member><function>DateTime::__construct</function></member>
   <member><function>DateTime::getLastErrors</function></member>
  </simplelist>
 </refsect1>
</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
