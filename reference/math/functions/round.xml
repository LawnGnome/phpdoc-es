<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.9 Maintainer: lboshell Status: ready -->
<!-- splitted from ./en/functions/math.xml, last change in rev 1.2 -->
  <refentry id="function.round">
   <refnamediv>
    <refname>round</refname>
    <refpurpose>Redondea un flotante</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis>
      <type>float</type><methodname>round</methodname>
      <methodparam><type>float</type><parameter>val</parameter></methodparam>
      <methodparam choice="opt"><type>int</type><parameter>precision</parameter></methodparam>
     </methodsynopsis>
    <para>
     Devuelve el valor de <parameter>val</parameter> redondeado a la
     <parameter>precision</parameter> especificada (n&uacute;mero de
     d&iacute;gitos despu&eacute;s del punto
     decimal). <parameter>precision</parameter> puede ser
     tambi&eacute;n un valor negativo o cero (el valor
     predeterminado).
    </para>
    <para>
     <example>
      <title>Ejemplos de <function>round</function></title>
      <programlisting role="php">
<![CDATA[
<?php
echo round(3.4);         // 3
echo round(3.5);         // 4
echo round(3.6);         // 4
echo round(3.6, 0);      // 4
echo round(1.95583, 2);  // 1.96
echo round(1241757, -3); // 1242000
echo round(5.045, 2);    // 5.05
echo round(5.055, 2);    // 5.06
?>
]]>
      </programlisting>
     </example>
    </para>
    <!-- It's not true
    <para>
     <caution>
      <simpara>
       When rounding on exact halves <function>round</function> rounds down on
       evens and up on odds.  If you want to always force it in one direction
       on a .5 (or .05 in your case) add or substract a tiny fuzz factor.  The
       reason behind rounding half the values down and the other half up is to
       avoid the classical banking problem where if you always rounded down
       you would be stealing money from your customers, or if you always
       rounded up you would end up over time losing money.  By averaging it
       out through evens and odds you statistically break even.
      </simpara>
     </caution>
    </para>
    -->
    <para>
     <note>
      <simpara>
       PHP no maneja cadenas como <literal>"12,300.2"</literal>
       correctamente de forma predeterminada. Vea <link
       linkend="language.types.string.conversion" >conversi&oacute;n
       desde cadenas</link>.
      </simpara>
     </note>
    </para>
    <para>
     <note>
      <simpara>
       El par&aacute;metro <parameter>precision</parameter> fue
       introducido en PHP 4.
      </simpara>
     </note>
    </para>
    <simpara>
     Vea tambi&eacute;n: <function>ceil</function>,
     <function>floor</function>, y <function>number_format</function>.
    </simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
