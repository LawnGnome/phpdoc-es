<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./es/functions/misc.xml, last change in rev 1.1 -->
<!-- last change to 'uniqid' in en/ tree in rev 1.2 -->
  <refentry id="function.uniqid">
   <refnamediv>
    <refname>uniqid</refname>
    <refpurpose>Genera un id &uacute;nico.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis>
     <type>int</type><methodname>uniqid</methodname>
     <methodparam><type>string</type><parameter>prefix</parameter></methodparam>
     <methodparam choice="opt"><type>boolean</type><parameter>lcg</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <function>uniqid</function> devuelve un identificador &uacute;nico con un prefijo 
     basado en la hora actual en microsegundos. El prefijo puede ser pr&aacute;ctico
     por ejemplo si se generan identificadores simult&aacute;neamente en varios host
     que pueden haber generado el identificador en el mismo microsegundo.
     <parameter>prefix</parameter> (prefijo) puede ser de hasta 114
     car&aacute;cteres de longitud.
    </simpara>
    <simpara>
     Si el par&aacute;metro opcional <parameter>lcg</parameter> es &true;,
     <function>uniqid</function> a&ntilde;adir&aacute; entrop&iacute;a "LCG combinada" al 
     final del valor devuelto, que har&aacute; el resultado m&aacute;s &uacute;nico.
    </simpara>
    <simpara>
     Con un <parameter>prefix</parameter> (prefijo) vac&iacute;o, la cadena devuelta
     tendr&aacute; una longitud de 13 car&aacute;cteres. Si <parameter>lcg</parameter> es
     &true;, tendr&aacute; 23 car&aacute;cteres.
    </simpara>

	<note>
	 <simpara>
        El par&aacute;metro <parameter>lcg</parameter> est&aacute; disponible s&oacute;lo en PHP 4 y 
        PHP 3.0.13 y posteriores. 
	 </simpara>
	</note>

    <para>
     Si necesita un identificador &uacute;nico o testigo, y tiene la intenci&oacute;n de 
     hacer p&uacute;blico ese testigo al usuario por medio de una red (i.e. cookies
     de sesi&oacute;n) se recomienda que utilice algo parecido a estas l&iacute;neas
     <informalexample><programlisting>
$token = md5(uniqid("")); // no random portion
$better_token = md5(uniqid(rand())); // better, difficult to guess
</programlisting></informalexample></para>
    <simpara>
     Esto crear&aacute; un identificador de 32 car&aacute;cteres (un n&uacute;mero hexadecimal
     de 128 bits) que es extremadamente dif&iacute;cil de predecir.</simpara>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
