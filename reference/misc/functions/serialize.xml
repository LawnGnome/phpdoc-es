<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./es/functions/misc.xml, last change in rev 1.1 -->
<!-- last change to 'serialize' in en/ tree in rev 1.28 -->
  <refentry id="function.serialize">
   <refnamediv>
    <refname>serialize</refname>
    <refpurpose>genera una representaci&oacute;n almacenable de un valor</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis>
     <type>string</type><methodname>serialize</methodname>
     <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
     </methodsynopsis>
    <simpara>
     <function>serialize</function> devuelve una cadena que contiene 
     una representaci&oacute;n byte-stream de <parameter>value</parameter> (valor) 
     que puede ser almacenada en alg&uacute;n lugar.</simpara>
    <simpara>
     Esto es &uacute;til para almacenar o pasar valores PHP sin p&eacute;rdida de su
     tipo y estructura.</simpara>
    <simpara>
     Para convertir de nuevo la cadena serializada en un valor PHP,
     utilice <function>unserialize</function>.  <function>serialize</function>
     gestiona los tipos <type>integer</type>, <type>double</type>,
     <type>string</type>, <type>array</type> (multidimensional) y
     <type>object</type> (las propiedades del objeto pueden ser serializadas,
     pero se pierden los m&eacute;todos).</simpara>
    <para>
     <example>
      <title>ejemplo serialize</title>
      <programlisting role="php">
// $session_data contains a multi-dimensional array with session
// information for the current user.  We use serialize() to store
// it in a database at the end of the request.

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn,
                     "UPDATE sessions SET data = ? WHERE id = ?");
$sqldata = array(serialize($session_data), $PHP_AUTH_USER);
if (!odbc_execute($stmt, &$sqldata)) {
    $stmt = odbc_prepare($conn,
                         "INSERT INTO sessions (id, data) VALUES(?, ?)");
    if (!odbc_execute($stmt, &$sqldata)) {
        /* Something went wrong.  Bitch, whine and moan. */
    }
}
</programlisting>
     </example></para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
