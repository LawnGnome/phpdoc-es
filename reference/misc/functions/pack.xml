<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.4 $ -->
<!-- EN-Revision: 1.10 Maintainer: lboshell Status: ready -->
<refentry xml:id="function.pack" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>pack</refname>
  <refpurpose>Empaquetar datos en una cadena binaria</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <type>string</type><methodname>pack</methodname>
   <methodparam><type>string</type><parameter>formato</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>args</parameter></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
  </methodsynopsis>
  <para>
   Empaquetar los argumentas dados en una cadena binaria de acuerdo a
   <parameter>formato</parameter>.
  </para>
  <para>
   La idea de esta función fue tomada de Perl y todos los códigos de formato
   funcionan igual que en aquél lenguaje, sin embargo, existen algunos
   códigos de formato faltantes, como el código "u" de Perl.
  </para>
  <para>
   Note que la distinción entre valores con signo y sin signo sólo afecta a
   la función <function>unpack</function>, mientras que la función
   <function>pack</function> entrega el mismo resultado para códigos de
   formato con signo y sin signo.
  </para>
  <para>
   También note que PHP almacena valores <type>integer</type> internamente
   como valores con signo de un tamaño dependiente de la máquina. Si le
   entrega un valor entero sin signo demasiado largo para ser almacenado en
   esa forma, es convertido a un valor <type>float</type>, lo cual
   frecuentemente produce un resultado inesperado.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>formato</parameter></term>
     <listitem>
      <para>
       La cadena <parameter>formato</parameter> consiste de códigos de
       formato seguidos por un argumento opcional de repetición. El
       argumento de repetición puede ser un valor entero o * para la
       repetición hasta el final de los datos de entrada. En el caso de a,
       A, h, y H el conteo de repetición especifica cuántos caracteres de un
       argumento de datos son tomados, para @ es la posición absoluta en
       dónde colocar el siguiente dato, para todos los demás el conteo de
       repetición especifica cuántos argumentos de datos son consumidos y
       empaquetados en la cadena binaria resultante.
      </para>
      <para>
       Actualmente los formatos implementados son:
       <table>
        <title>Caracteres de formato de <function>pack</function></title>
        <tgroup cols="2">
         <thead>
          <row>
           <entry>Código</entry>
           <entry>Descripción</entry>
          </row>
         </thead>
         <tbody>
          <row>
           <entry>a</entry>
           <entry>cadena completada con caracteres NUL</entry>
          </row>
          <row>
           <entry>A</entry>
           <entry>cadena completada con espacios</entry>
          </row>
          <row>
           <entry>h</entry>
           <entry>cadena Hex, nibble bajo primero</entry>
          </row>
          <row>
           <entry>H</entry>
           <entry>cadena Hex, nibble alto primero</entry>
          </row>
          <row><entry>c</entry><entry>caracter con signo</entry></row>
          <row>
           <entry>C</entry>
           <entry>caracter sin signo</entry>
          </row>
          <row>
           <entry>s</entry>
           <entry>short con signo (siempre de 16 bits, orden de bytes de
           máquina)</entry>
          </row>
          <row>
           <entry>S</entry>
           <entry>short sin signo (siempre de 16 bits, orden de bytes de
           máquina)</entry>
          </row>
          <row>
           <entry>n</entry>
           <entry>short sin signo (siempre de 16 bits, byte más
           significativo primero)</entry>
          </row>
          <row>
           <entry>v</entry>
           <entry>short sin signo (siempre de 16 bits, byte menos
           significativo primero)</entry>
          </row>
          <row>
           <entry>i</entry>
           <entry>entero con signo (tamaño y orden de bytes dependiente de
           la máquina)</entry>
          </row>
          <row>
           <entry>I</entry>
           <entry>entero sin signo (tamaño y orden de bytes dependiente de
           la máquina)</entry>
          </row>
          <row>
           <entry>l</entry>
           <entry>long con signo (siempre de 32 bits, orden de bytes de
           máquina)</entry>
          </row>
          <row>
           <entry>L</entry>
           <entry>long sin signo (siempre de 32 bits, orden de bytes de
           máquina)</entry>
          </row>
          <row>
           <entry>N</entry>
           <entry>long sin signo (siempre de 32 bits, byte más significativo
           primero)</entry>
          </row>
          <row>
           <entry>V</entry>
           <entry>long sin signo (siempre de 32 bits, byte menos
           significativo primero)</entry>
          </row>
          <row>
           <entry>f</entry>
           <entry>flotante (tamaño y representación dependiente de la
           máquina)</entry>
          </row>
          <row>
           <entry>d</entry>
           <entry>doble (tamaño y representación dependiente de la
           máquina)</entry>
          </row>
          <row>
           <entry>x</entry>
           <entry>byte NUL</entry>
          </row>
          <row>
           <entry>X</entry>
           <entry>Copiar un byte</entry>
          </row>
          <row>
           <entry>@</entry>
           <entry>relleno de NUL hasta una posición absoluta</entry>
          </row>
         </tbody>
        </tgroup>
       </table>
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term><parameter>args</parameter></term>
     <listitem>
      <para>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve la cadena binaria que contiene los datos.
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <para>
   <example>
    <title>Ejemplo de <function>pack</function></title>
    <programlisting role="php">
<![CDATA[
<?php
$datos_binarios = pack("nvc*", 0x1234, 0x5678, 65, 66);
?>
]]>
    </programlisting>
    <para>
     La cadena binaria resultante tendrá 6 bytes de longitud y contendrá la
     secuencia de bytes 0x12, 0x34, 0x78, 0x56, 0x41, 0x42.
    </para>
   </example>
  </para>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><function>unpack</function></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
