<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.6 Maintainer: lboshell Status: ready -->
<!-- splitted from ./en/functions/misc.xml, last change in rev 1.4 -->
  <refentry id="function.pack">
   <refnamediv>
    <refname>pack</refname>
    <refpurpose>Empaquetar datos en una cadena binaria</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis>
      <type>string</type><methodname>pack</methodname>
      <methodparam><type>string</type><parameter>formato</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>args</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>...</parameter></methodparam>
     </methodsynopsis>
    <para>
     Empaquetar los argumentas dados en una cadena binaria de acuerdo
     a <parameter>formato</parameter>. Devuelve la cadena binaria que
     contiene los datos.
    </para>
    <para>
     La idea de esta funci&oacute;n fue tomada de Perl y todos los
     c&oacute;digos de formato funcionan igual que en aqu&eacute;l
     lenguaje, sin embargo, existen algunos c&oacute;digos de formato
     faltantes, como el c&oacute;digo "u" de Perl. La cadena de
     formato consiste de c&oacute;digos de formato seguidos por un
     argumento opcional de repetici&oacute;n. El argumento de
     repetici&oacute;n puede ser un valor entero o * para la
     repetici&oacute;n hasta el final de los datos de entrada. En el
     caso de a, A, h, y H el conteo de repetici&oacute;n especifica
     cu&aacute;ntos caracteres de un argumento de datos son tomados,
     para @ es la posici&oacute;n absoluta en d&oacute;nde colocar el
     siguiente dato, para todos los dem&aacute;s el conteo de
     repetici&oacute;n especifica cu&aacute;ntos argumentos de datos
     son consumidos y empaquetados en la cadena binaria
     resultante. Actualmente se han implementado los siguientes
    </para>
    <para>
     <table>
      <title>Caracteres de formato de <function>pack</function></title>
      <tgroup cols="2">
       <thead>
        <row>
         <entry>C&oacute;digo</entry>
         <entry>Descripci&oacute;n</entry>
        </row>
       </thead>
       <tbody>
        <row><entry>a</entry><entry>cadena completada con caracteres
        NUL</entry></row>
        <row><entry>A</entry><entry>cadena completada con
        espacios</entry></row>
        <row><entry>h</entry><entry>cadena Hex, nibble bajo
        primero</entry></row>
        <row><entry>H</entry><entry>cadena Hex, nibble alto
        primero</entry></row>
        <row><entry>c</entry><entry>caracter con signo</entry></row>
        <row><entry>C</entry><entry>caracter sin signo</entry></row>
        <row><entry>s</entry><entry>short con signo (siempre de 16
        bits, orden de bytes de m&aacute;quina)</entry></row>
        <row><entry>S</entry><entry>short sin signo (siempre de 16
        bits, orden de bytes de m&aacute;quina)</entry></row>
        <row><entry>n</entry><entry>short sin signo (siempre de 16
        bits, byte m&aacute;s significativo primero)</entry></row>
        <row><entry>v</entry><entry>short sin signo (siempre de 16
        bits, byte menos significativo primero)</entry></row>
        <row><entry>i</entry><entry>entero con signo (tama&ntilde;o y
        orden de bytes dependiente de la m&aacute;quina)</entry></row>
        <row><entry>I</entry><entry>entero sin signo (tama&ntilde;o y
        orden de bytes dependiente de la m&aacute;quina)</entry></row>
        <row><entry>l</entry><entry>long con signo (siempre de 32
        bits, orden de bytes de m&aacute;quina)</entry></row>
        <row><entry>L</entry><entry>long sin signo (siempre de 32
        bits, orden de bytes de m&aacute;quina)</entry></row>
        <row><entry>N</entry><entry>long sin signo (siempre de 32
        bits, byte m&aacute;s significativo primero)</entry></row>
        <row><entry>V</entry><entry>long sin signo (siempre de 32
        bits, byte menos significativo primero)</entry></row>
        <row><entry>f</entry><entry>flotante (tama&ntilde;o y
        representaci&oacute;n dependiente de la
        m&aacute;quina)</entry></row>
        <row><entry>d</entry><entry>doble (tama&ntilde;o y
        representaci&oacute;n dependiente de la
        m&aacute;quina)</entry></row>
        <row><entry>x</entry><entry>byte NUL</entry></row>
        <row><entry>X</entry><entry>Copiar un byte</entry></row>
        <row><entry>@</entry><entry>relleno de NUL hasta una
        posici&oacute;n absoluta</entry></row>
       </tbody>
      </tgroup>
     </table>
    </para>
    <para>
     <example>
      <title>Ejemplo de <function>pack</function></title>
      <programlisting role="php">
<![CDATA[
<?php
$datos_binarios = pack("nvc*", 0x1234, 0x5678, 65, 66);
?>
]]>
      </programlisting>
      <para>
       La cadena binaria resultante tendr&aacute; 6 bytes de longitud
       y contendr&aacute; la secuencia de bytes 0x12, 0x34, 0x78,
       0x56, 0x41, 0x42.
      </para>
     </example>
    </para>
    <para>
     Note que la distinci&oacute;n entre valores con signo y sin signo
     s&oacute;lo afecta a la funci&oacute;n
     <function>unpack</function>, mientras que la funci&oacute;n
     <function>pack</function> entrega el mismo resultado para
     c&oacute;digos de formato con signo y sin signo.
    </para>
    <para>
     Tambi&eacute;n note que PHP almacena valores <type>integer</type>
     internamente como valores con signo de un tama&ntilde;o
     dependiente de la m&aacute;quina. Si le entrega un valor entero
     sin signo demasiado largo para ser almacenado en esa forma, es
     convertido a un valor <type>float</type>, lo cual frecuentemente
     produce un resultado inesperado.
    </para>
    <para>
     Vea tambi&eacute;n <function>unpack</function>.
    </para>
   </refsect1>
  </refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
