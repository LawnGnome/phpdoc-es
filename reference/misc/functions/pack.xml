<?xml version="1.0" encoding="iso-8859-1"?>
<!-- splitted from ./es/functions/misc.xml, last change in rev 1.1 -->
<!-- last change to 'pack' in en/ tree in rev 1.4 -->
  <refentry id="function.pack">
   <refnamediv>
    <refname>pack</refname>
    <refpurpose>empaqueta datos en una cadena binaria</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis>
     <type>string</type><methodname>pack</methodname>
     <methodparam><type>string</type><parameter>format</parameter></methodparam>
     <methodparam choice="opt"><type>mixed</type><parameter>args</parameter></methodparam>
     </methodsynopsis>
    <para>
     Empaqueta los argumentos dados en una cadena binaria siguiendo el formato 
     <parameter>format</parameter>. Devuelve la cadena binaria que contiene los datos.
    </para>

    <para>
     El concepto de esta funci&oacute;n fue tomado de Perl y todos los c&oacute;digos de formateo
     realizan la misma funci&oacute;n. La cadena de formato consiste en c&oacute;digos
     de formato seguidos por un argumento opcional de repetici&oacute;n. El argumento
     de repetici&oacute;n puede ser un valor entero o * para repetir hasta el fin de la
     entrada de datos. Para a, A, h, H la cuenta de repetici&oacute;n representa
     cu&aacute;ntos caracteres se toman de un argumento de datos, para @ es la posici&oacute;n 
     absoluta donde poner los datos siguientes, para todo lo dem&aacute;s la cuenta de 
     repetici&oacute;n especifica cu&aacute;ntos argumentos de datos se toman y empaquetan
     en la cadena binaria resultante. Actualmente est&aacute;n implementados:
     <itemizedlist>
      <listitem><simpara>a cadena rellena de NUL</simpara></listitem>
      <listitem><simpara>A cadena rellena de ESPACIOS</simpara></listitem>
      <listitem><simpara>h cadena Hex, primero el medio byte inferior</simpara></listitem>
      <listitem><simpara>H cadena Hex, primero el medio byte superior</simpara></listitem>
      <listitem><simpara>c signed (con signo) char</simpara></listitem>
      <listitem><simpara>C unsigned (sin signo) char</simpara></listitem>
      <listitem><simpara>s signed short (siempre 16 bits, distribuci&oacute;n de bytes de la m&aacute;quina)</simpara></listitem>
      <listitem><simpara>S unsigned short (siempre 16 bits, distribuci&oacute;n de bytes de la m&aacute;quina)</simpara></listitem>
      <listitem><simpara>n unsigned short (siempre 16 bits, distribuci&oacute;n de bytes gran endian)</simpara></listitem>
      <listitem><simpara>v unsigned short (siempre 16 bits, distribuci&oacute;n de bytes peque&ntilde;o endian)</simpara></listitem>
      <listitem><simpara>i signed integer (distribuci&oacute;n de bytes y tama&ntilde;os dependientes de la m&aacute;quina)</simpara></listitem>
      <listitem><simpara>I unsigned integer (distribuci&oacute;n de bytes y tama&ntilde;os dependientes de la m&aacute;quina)</simpara></listitem>
      <listitem><simpara>l signed long (siempre 32 bits, distribuci&oacute;n de bytes de la m&aacute;quina)</simpara></listitem>
      <listitem><simpara>L unsigned long (siempre 32 bits, distribuci&oacute;n de bytes de la m&aacute;quina)</simpara></listitem>
      <listitem><simpara>N unsigned long (siempre 32 bits, distribuci&oacute;n de bytes gran endian)</simpara></listitem>
      <listitem><simpara>V unsigned long (siempre 32 bits, distribuci&oacute;n de bytes peque&ntilde;o endian)</simpara></listitem>
      <listitem><simpara>f float (representaci&oacute;n y tama&ntilde;o dependientes de la m&aacute;quina)</simpara></listitem>
      <listitem><simpara>d double (representaci&oacute;n y tama&ntilde;o dependientes de la m&aacute;quina)</simpara></listitem>
      <listitem><simpara>x byte NUL</simpara></listitem>
      <listitem><simpara>X Un byte hacia atr&aacute;s</simpara></listitem>
      <listitem><simpara>@ relleno con NUL en la posici&oacute;n absoluta</simpara></listitem>
     </itemizedlist>

     <example>
      <title>cadena de formato para pack</title>
      <programlisting role="php">
$binarydata = pack("nvc*", 0x1234, 0x5678, 65, 66);
</programlisting>
      <para>
       La cadena binaria resultante tendr&aacute; 6 bytes de longitud y contendr&aacute;
       la secuencia de bytes 0x12, 0x34, 0x78, 0x56, 0x41, 0x42.</para>
     </example></para>

    <para>
     Advi&eacute;rtase que la distinci&oacute;n entre valores signed (con signo) y unsigned 
     (sin signo) s&oacute;lo afecta a la funci&oacute;n <function>unpack</function>, 
     ya que la funci&oacute;n <function>pack</function> da el mismo resultado
     para c&oacute;digos de formato con signo y sin signo.</para>

    <para>
     N&oacute;tese tambi&eacute;n que internamente PHP almacena valores enteros como valores
     con signo de un tama&ntilde;o dependiente de la m&aacute;quina. Si le da un valor entero
     sin signo demasiado grande para ser almacenado, ser&aacute; convertido a un double
     (doble), lo que a menudo produce resultados no deseados.</para>

   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
