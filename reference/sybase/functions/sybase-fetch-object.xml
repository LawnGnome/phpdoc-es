<?xml version="1.0" encoding="iso-8859-1"?>
<!-- EN-Revision: n/a Maintainer: baoengb Status: ready -->
<!-- splitted from ./es/functions/sybase.xml, last change in rev 1.1 -->
  <refentry xml:id="function.sybase-fetch-object" xmlns="http://docbook.org/ns/docbook">
   <refnamediv>
    <refname>sybase_fetch_object</refname>
    <refpurpose>carga una fila como un objeto</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
     <methodsynopsis>
      <type>int</type><methodname>sybase_fetch_object</methodname>
      <methodparam><type>int</type><parameter>result</parameter></methodparam>
      <methodparam choice="opt"><type>mixed</type><parameter>object</parameter></methodparam>
     </methodsynopsis>
    <para> 
     Devuelve un objeto con las propiedades que corresponden a la
     fila tomada, o &false; si no hay m&aacute;s filas.
    </para>
    <para> 
     <function>sybase_fetch_object</function> es similar a
     <function>sybase_fetch_assoc</function>, con una diferencia - se
     devuelve un objeto.
    </para>  
    <para>
     Use el segundo <parameter>object</parameter> para espec&iacute;ficar el 
     tipo del objeto que quiere de regreso. Si este par&aacute;metro es omitido,
     el objeto ser&aacute; de tipo stdClass.
    </para>
    <note>
     <para>
      A partir de PHP 4.3.0, esta funci&oacute; no regresar&aacute; miembros 
      de objetos num&eacute;ricos.
     </para>
     <para>
      Comportamiento anterior:
      <screen>
<![CDATA[
object(stdclass)(3) {
  [0]=>
  string(3) "foo"
  ["foo"]=>
  string(3) "foo"
  [1]=>
  string(3) "bar"
  ["bar"]=>
  string(3) "bar"
}
]]>
      </screen>
      Nuevo comportamiento:
      <screen>
<![CDATA[
object(stdclass)(3) {
  ["foo"]=>
  string(3) "foo"
  ["bar"]=>
  string(3) "bar"
}
]]>
      </screen>
     </para>
    </note>
    <para>
     <example>
      <title><function>sybase_fetch_object</function> regresa Foo</title>
      <programlisting role="php">
<![CDATA[
<?php
    class Foo {
        var $foo, $bar, $baz;
    }
    
    // {...]
    $qrh= sybase_query('SELECT foo, bar, baz FROM example');
    $foo= sybase_fetch_object($qrh, 'Foo');
    $bar= sybase_fetch_object($qrh, new Foo());
    // {...]
?>
]]>
      </programlisting>
     </example>
    </para>
    <para>
     En t&eacute;rminos de velocidad, esta funci&oacute;n es identica a 
     <function>sybase_fetch_array</function>, y casi tan r&aacute;pida como 
     <function>sybase_fetch_row</function> (la diferencia es insignificante).
    </para>
    <para> 
     Vea tambi&eacute;n 
     <function>sybase_fetch_array</function>,
     <function>sybase_fetch_row</function>.
    </para>
   </refsect1>
  </refentry>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
