<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.2 Maintainer: lboshell Status: ready -->
<section id="errorfunc.examples">
 &reftitle.examples;
  <para>
  A continuaci&oacute;n podemos apreciar un ejemplo del uso de las
  capacidades de gesti&oacute;n de errores que vienen con
  PHP. Definimos una funci&oacute;n de manipulaci&oacute;n de errores
  que registra la informaci&oacute;n en un archivo (usando un formato
  XML), y env&iacute;a un correo electr&oacute;nico al desarrollador
  en caso de que un error cr&iacute;tico en la l&oacute;gica del
  software ocurra.
   <example>
    <title>Uso de gesti&oacute;n de errores en un script</title>
    <programlisting role="php">
<![CDATA[
<?php
// haremos nuestra propia manipulaci&oacute;n de errores
error_reporting(0);

// funci&oacute;n de gesti&oacute;n de errores definida por el usuario
function gestorDeErroresDeUsuario ($num_err, $mens_err, $nombre_archivo,
                                   $num_linea, $vars) {

    // marca de fecha/hora para el registro de error
    $dt = date("Y-m-d H:i:s (T)");

    // definir una matriz asociativa de cadenas de error
    // en realidad las &uacute;nicas entradas que deber&iacute;amos
    // considerar son 2, 8, 256, 512 y 1024
    $tipo_error = array (
                1   =>  "Error",
                2   =>  "Advertencia",
                4   =>  "Error de Int&eacute;rprete",
                8   =>  "Anotaci&oacute;n",
                16  =>  "Error de N&uacute;cleo",
                32  =>  "Advertencia de N&uacute;cleo",
                64  =>  "Error de Compilaci&oacute;n",
                128 =>  "Advertencia de Compilaci&oacute;n",
                256 =>  "Error de Usuario",
                512 =>  "Advertencia de Usuario",
                1024=>  "Anotaci&oacute;n de Usuario"
                );
    // conjunto de errores de los cuales se almacenar&aacute; un rastreo
    $errores_de_usuario = array(E_USER_ERROR, E_USER_WARNING, E_USER_NOTICE);
    
    $err = "<errorentry>\n";
    $err .= "\t<datetime>".$dt."</datetime>\n";
    $err .= "\t<errornum>".$num_err."</errornum>\n";
    $err .= "\t<errortype>".$tipo_error[$num_err]."</errortype>\n";
    $err .= "\t<errormsg>".$mens_err."</errormsg>\n";
    $err .= "\t<scriptname>".$nombre_archivo."</scriptname>\n";
    $err .= "\t<scriptlinenum>".$num_linea."</scriptlinenum>\n";

    if (in_array($num_err, $errores_de_usuario))
        $err .= "\t<vartrace>".wddx_serialize_value($vars,"Variables")."</vartrace>\n";
    $err .= "</errorentry>\n\n";
    
    // para efectos de debug
    // echo $err;

    // guardar en el registro de errores, y enviar un correo
    // electr&oacute;nico si hay un error cr&iacute;tico de usuario
    error_log($err, 3, "/usr/local/php4/error.log");
    if ($num_err == E_USER_ERROR)
        mail("phpdev@ejemplo.com","Error Cr&iacute;tico de Usuario",$err);
}


function distancia ($vect1, $vect2) {
    if (!is_array($vect1) || !is_array($vect2)) {
        trigger_error("Par&aacute;metros incorrectos, se esperan matrices", E_USER_ERROR);
        return NULL;
    }

    if (count($vect1) != count($vect2)) {
        trigger_error("Los vectores deben ser del mismo tama&ntilde;o", E_USER_ERROR);
        return NULL;
    }

    for ($i=0; $i<count($vect1); $i++) {
        $c1 = $vect1[$i]; $c2 = $vect2[$i];
        $d = 0.0;
        if (!is_numeric($c1)) {
            trigger_error("La coordenada $i en el vector 1 no es un ".
                          "n&uacute;mero, se usar&aacute; cero", 
                            E_USER_WARNING);
            $c1 = 0.0;
        }
        if (!is_numeric($c2)) {
            trigger_error("La coordenada $i en el vector 2 no es un".
                          "n&uacute;mero, se usar&aacute; cero", 
                            E_USER_WARNING);
            $c2 = 0.0;
        }
        $d += $c2*$c2 - $c1*$c1;
    }
    return sqrt($d);
}

$gestor_de_errores_anterior = set_error_handler("gestorDeErroresDeUsuario");

// constante indefinida, se genera una advertencia
$t = NO_ESTOY_DEFINIDA;

// definir algunos "vectores"
$a = array(2,3,"foo");
$b = array(5.5, 4.3, -1.6);
$c = array (1,-3);

// generar un error de usuario
$t1 = distance($c,$b)."\n";

// generar otro error de usuario
$t2 = distance($b,"no soy una matriz")."\n";

// generar una advertencia
$t3 = distance($a,$b)."\n";

?>
]]>
    </programlisting>
   </example>
  </para>
</section>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
