<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 336263 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<chapter xml:id="mongodb.tutorial.library" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Empleo de la biblioteca</title>
 
 <para>
  Después de la configuración inicial, continuaremos explicando cómo empezar con el
  controlador de MongoDB y la biblioteca para HHVM para escribir nuestro primer proyecto.
 </para>
 
 <section>
  <title>Biblioteca de PHP (PHPLIB)</title>
  
  <para>
   Lo último que necesitamos instalar para empezar con la apliación
   en sí, es la biblioteca de PHP.
  </para>
  
  <para>
   La bibilioteca necesita ser instalada con Composer. En el directorio del proyecto
   (<code>/var/www/html/mi-primer-proyecto</code>) escriba:
   
   <programlisting role="shell">
    curl -sS https://getcomposer.org/installer -o installer.php
    hhvm installer.php
    rm installer.php
   </programlisting>
  </para>
  
  <para>
   Con esto se descarga e instala Composer. Siempre que diga "Use it: php
   composer.phar", porsupuesto sifnifica <literal>hhvm composer.phar</literal>.
  </para>
  
  <para>
   Una vez instalado Composer, podemos instalar la biblioteca:
   
   <programlisting role="shell">
    hhvm composer.phar require mongodb/mongodb
   </programlisting>
  </para>
  
  <para>
   Muestra algo parecido a esto:
   
   <programlisting role="shell">
Using version ^0.2.0 for mongodb/mongodb
./composer.json has been created
Loading composer repositories with package information
Updating dependencies (including require-dev)
  - Installing mongodb/mongodb (0.2.0)
 Downloading: 100%         

Writing lock file
Generating autoload files
   </programlisting>
  </para>
  
  <para>
   Se han creado varios ficheros (<code>composer.json</code>,
   <code>composer.lock</code>) así como el directorio <code>vendor</code>
   que contiene la biblioteca.
  </para>
 </section>
 
 <section>
  <title>Utilizar la biblioteca</title>
  
  <para>
   Composer administra las dependencias y proporciona un cargador que
   se debe incluir en el inicio de un script con lo siguiente:
   
   <programlisting role="php">
<![CDATA[
    <?php
    require 'vendor/autoload.php';
]]>
   </programlisting>
  </para>
  
  <para>
   Ahora podemos utilizar cualqiuer funcionalidad de la descrita en
   la <link xlink:href="&url.mongodb.library.apidocs;">documentación</link>.
  </para>
  
  <para>
   Si está famirializado con el controlador antiguo, debería paracer demasiado fuera
   de lugar. La única gran diferencia es que la clase
   <link xlink:href="&url.mongodb.library.apidocs;/class-MongoDB.Database.html">Database</link>
   solo se utiliza para operaciones específicas de base de datos. Las
   operaciones <link xlink:href="&url.wiki.crud;">CRUD</link> de la clase
   <link xlink:href="&url.mongodb.library.apidocs;/class-MongoDB.Collection.html">Collection</link>
   también han sido renombradas para mayor claridad y para estar en conformidad con una nueva
   <link xlink:href="&url.mongodb.crud;">especificación</link>
   independiente del lenguaje.
  </para>
  
  <para>
   Como ejemplo, así es como se inserta un documento en la
   colección <emphasis>beers</emphasis> de la base de datos
   <emphasis>demo</emphasis>:
   
   <programlisting role="php">
<![CDATA[
    <?php
    require 'vendor/autoload.php'; // include Composer goodies

    $manager = new MongoDB\Driver\Manager("mongodb://localhost:27017");
    $collection = new MongoDB\Collection($manager, "demo.beers");

    $result = $collection->insertOne( [ 'name' => 'Hinterland', 'brewery' => 'BrewDog' ] );

    echo "Inserted with Object ID '{$result->getInsertedId()}'";
    ?>
]]>
    </programlisting>
   </para>
   
   <para>
    En lugar de modificar el documento original para añadir el recién generado
    campo <code>_id</code>, este ahora es parte del resultado que viene
    del método <code>insertOne</code>.
   </para>
   
   <para>
    Después de la inserción, por supuesto también se puede consultar los datos que se
    acaban de insertar. Para ello, se utiliza el método <code>find</code> el cual devuelve un
    cursor que se puede recorrer:
    
    <programlisting role="php">
<![CDATA[
    <?php
    require 'vendor/autoload.php'; // include Composer goodies

    $manager = new MongoDB\Driver\Manager("mongodb://localhost:27017");
    $collection = new MongoDB\Collection($manager, "demo.beers");

    $result = $collection->find( [ 'name' => 'Hinterland', 'brewery' => 'BrewDog' ] );

    foreach ($result as $entry)
    {
        echo $entry->_id, ': ', $entry->name, "\n";
    }
    ?>
]]>
    </programlisting>
   </para>
   
   <para>
    Podría haber observado que el acceso a los campos <code>_id</code> y
    <code>name</code> ya no se realiza mediante un operador de acceso
    de array. En su lugar, ahora son propiedades de un objeto
    <code>stdClass</code>. Se puede encontrar más información sobre la serialización
    y deserialización entre variables de PHP y el BSON almacenado en MongoDB en
    la especificación de <xref linkend="mongodb.persistence"/>. 
   </para>
 </section>
</chapter>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
