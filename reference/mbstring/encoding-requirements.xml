<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: yago Status: ready -->
<!-- Reviewed: no -->

<chapter xml:id="mbstring.php4.req" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Requerimientos para la codificación de caracteres en PHP</title>
 <para>
  La codificación de los siguientes tipos pueden ser utilizados con PHP de forma segura
  <itemizedlist>
   <listitem>
    <para>
     Codificación de un solo byte,
     <itemizedlist>
      <listitem>
       <simpara>
        compatible con ASCII (ISO646) con mapeo de caracteres
        en el rango de <literal>00h</literal> a
        <literal>7fh</literal>.
       </simpara>
      </listitem>
     </itemizedlist>
    </para>
   </listitem>
   <listitem>
    <para>
     Codificación multibyte,
     <itemizedlist>
      <listitem>
       <simpara>
        compatible con ASCII con mapeo de caracteres en el rango de
        <literal>00h</literal> a <literal>7fh</literal>.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        sin el uso de secuencias de escape ISO2022.
       </simpara>
      </listitem>
      <listitem>
       <simpara>
        sin el uso de un valor en el rango de <literal>00h</literal> a
        <literal>7fh</literal> en cualquiera de los bytes compuestos
        que representan un caracter sencillo.
       </simpara>
      </listitem>
     </itemizedlist>  
    </para>
   </listitem>
  </itemizedlist>
 </para>
 <para>
  Estos son ejemplos que codificación de caracteres que no funcionan bien 
  con PHP.
  <informalexample>
   <programlisting>
<![CDATA[
JIS, SJIS, ISO-2022-JP, BIG-5
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Aunque algunos scripts PHP escritos en estas codificaciones pueden no funcionar,
  especialmente en el caso de que aparezcan literales como identificadores 
  o en el propio script, se puede permitir utilizar estas codificaciones 
  configurando el filtro de codificación transparente de <literal>mbstring</literal>
  para las consultas HTTP.
 </para>
 <note>
  <para>
   Se desaconseja energicamente el uso de SJIS, BIG5, CP936, CP949 y GB18030 para
   la codificación interna, a menos que esté familiarizado con el parser,
   el escaner y la codificación de caracteres.
  </para>
 </note>
 <note>
  <para>
   Si se va a conectar con una base de datos con PHP, se recomienda
   utilizar la misma codificación de caracteres para ambos, la base de datos y la
   <literal>codificación interna</literal> para un uso más sencillo y mejor funcionamiento.
  </para>
  <para>
   Si se utiliza PostgreSQL, la codificación utilizada en la 
   base de datos y la utilizada en PHP pueden ser distintos debido
   a que esta soporta conversión automática del conjunto de caracteres entre
   la parte interna y la parte externa.
  </para>
 </note>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

