<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 307744 Maintainer: chuso Status: ready -->
<!-- Reviewed: no -->
<!-- $Revision$ -->
<refentry xml:id="mongocollection.insert" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoCollection::insert</refname>
  <refpurpose>Inserta un array en la colección</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>mixed</type><methodname>MongoCollection::insert</methodname>
   <methodparam><type>array</type><parameter>a</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
  <para>
   Todas las cadenas de texto que se envíen a la base de datos deben estar en UTF-8. Si un string no estuviera
   en UTF-8, se lanzaría una excepción <classname>MongoException</classname>. Para insertar
   (o para consultar) un texto que no sea UTF-8, utilice <classname>MongoBinData</classname>.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>a</parameter>
     </term>
     <listitem>
      <para>
       Un array.
      </para>
     </listitem>
    </varlistentry>   
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       Opciones de inserción.
       <itemizedlist>
        <listitem>
         <para>
          <literal>"safe"</literal>
         </para>
         <para>
          Puede ser un booleano o un entero, por omisión &false;. Si &false;, el programa
          continua su ejecución sin esperar respuesta por parte de la base de datos.
          Si &true;, el programa esperará la respuesta de la base de datos, y en caso
          de que la inserción no tenga éxito, emitirá una excepción de tipo
          <classname>MongoCursorException</classname>.
         </para>
         <para>
          Si se estuvieran utilizando réplicas, y el maestro cambiara, al usar "safe"
          se provocaría que el driver desconectaría del maestro, emitiría una excepción,
          y en la siguiente operación se tratría de encontrar un nuevo maestro (su aplicación
          debe decidir si reintentará realizar de nuevo la operación sobre un nuevo
          maestro).
         </para>
         <para>
          Si <emphasis>no</emphasis> utiliza "safe" con conjuntos de réplicas y el maestro
          cambia, no habrá forma de que el driver conozca el cambio. En este caso, continuará
          la ejecución y la escritura, silenciosamente, fallará.
         </para>
         <para>
          Si <literal>safe</literal> fuera un entero, replicará la inserción a ese
          número de máquinas antes de notificar un éxito (o lanzaría una excepción
          si al replicar se excediera el tiempo de espera; consulte wtimeout). Sobreescribe
          la variable w asignada a la colección.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"fsync"</literal>
         </para>
         <para>
          Booleano, por omisión &false;. Obliga a que la inserción se sincronice en disco
          antes de notificar éxito. Si &true;, se realiza de manera implícita una inserción segura (safe)
          y sobrescribirá el ajuste <literal>safe</literal> a &false;.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"timeout"</literal>
         </para>
         <para>
          Entero, por omisión <literal>MongoCursor::$timeout</literal>. Si
          "safe" está habilitado, este valor indica por cuánto tiempo (en milisegundos)
          esperará el cliente la respuesta de la base de datos. Si la base de datos no respondiera
          en ese periodo de tiempo, se lanzaría una excepción de tipo
          <classname>MongoCursorTimeoutException</classname>.
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Si <parameter>safe</parameter> está habilitado, devuelve un array con el estado de la inserción.
   En cualquier otro caso, devuelve un booleano indicando si el array no estaba vacío (un array vacío
   no se insertará).
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Lanza <classname>MongoCursorException</classname> si la opción "safe" estuviera
   habilitada y fallara la inserción. (Versión 1.0.1+)
  </para>
  <para>
   Lanza <classname>MongoCursorTimeoutException</classname> si la opción "safe" estuviera
   habilitada y la operación llevara más de
   <varname>MongoCursor::$timeout</varname> milisegundos para completarse. No detiene el
   proceso en el servidor; es sólo un tiempo de espera en el lado del cliente.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1.0.5</entry>
       <entry>
        Cambiado el segundo parámetro a un array de opciones. Antes de 1.0.5, el segundo
        parámetro era un booleano indicando la opción "safe".
       </entry>
      </row>
      <row>
       <entry>1.0.9</entry>
       <entry>
        Añadido soporte para pasar enteros a la opción "safe" (antes sólo aceptaba
        booleanos) y añadida la opción "fsync".
       </entry>
      </row>
      <row>
       <entry>1.0.11</entry>
       <entry>
        Si "safe" está habilitado y hay un error que no sea en el maestro, se desconecta.
       </entry>
      </row>
      <row>
       <entry>1.2.0</entry>
       <entry>
        Añadida la opción "timeout".
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo de <function>MongoCollection::insert</function> con _id</title>
   <para>
    Al insertar un objeto se le añadirá un campo _id, a no ser que se pase por referencia.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$a = array('x' => 1);
$collection->insert($a);
var_dump($a);

$b = array('x' => 1);
$ref = &$b;
$collection->insert($ref);
var_dump($ref);

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
array(2) {
  ["x"]=>
  int(1)
  ["_id"]=>
  object(MongoId)#4 (0) {
  }
}
array(1) {
  ["x"]=>
  int(1)
}
]]>
   </screen>
  </example>

  <example>
   <title>Ejemplo de <function>MongoCollection::insert</function> safe</title>
   <para>
    Este ejemplo muestra cómo al insertar dos elementos con el mismo _id, se provoca
    que se lance una excepción <classname>MongoCursorException</classname>, ya que
    <parameter>safe</parameter> está habilitado.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$persona = array("nombre" => "Joe", "edad" => 20);
$coleccion->insert($persona, true);

// ahora $person tiene un campo _id, así que si intentamos guardarlo
// de nuevo, obtendremos una excepción
try {
    $colecction->insert($persona, true);
}
catch(MongoCursorException $e) {
    echo "No se puede guardar dos veces la misma persona!\n";
}

?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   Documentación de MongoDB sobre <link xlink:href="&url.mongodb.dochub.insert;">insert</link>.
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
