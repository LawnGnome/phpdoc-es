<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 328543 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<refentry xml:id="mongodb.command" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>MongoDB::command</refname>
  <refpurpose>Ejecuta un comando de base de datos</refpurpose>
 </refnamediv>
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <type>array</type><methodname>MongoDB::command</methodname>
   <methodparam><type>array</type><parameter>command</parameter></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array()</initializer></methodparam>
  </methodsynopsis>
  <para>
   Prácticamente todo lo que no son operaciones CRUD se puede realizar con un comando de base de datos.
   ¿Necesita conocer la versión de la base de datos? Hay un comando para ello. ¿Necesita hacer una
   agregación? Hay un comando para ello. ¿Necesia habilitar registros de mensajes? Se puede hacer una idea.
  </para>
  <para>
   Este método es equivalente a:
   <programlisting role="php">
<![CDATA[
<?php

public function command($data) {
    return $this->selectCollection('$cmd')->findOne($data);
}

?>
]]>
   </programlisting>
  </para>
 </refsect1>
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>command</parameter>
     </term>
     <listitem>
      <para>
       Consulta que se enviará.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       Este parámetro es un array asociativo de la forma
       <literal>array("nombre_opción" => &lt;boolean&gt;, ...)</literal>. Actualmente
       las opciones soportadas son:
       <itemizedlist>
        &mongo.writes.parameters.timeout;
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1.2.0</entry>
       <entry>
        Añadido el parámetro <literal>options</literal> con una única opción: 
        <literal>timeout</literal>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;  
  <para>
   Devuelve la respuesta de la base de datos.
  </para>
 </refsect1>
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo de <function>MongoDB::command</function> con "distinct"</title>
   <para>
    Localizando todos los valores distintos de una clave.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$personas = $db->personas;

$personas->insert(array("nombre" => "Joe", "edad" => 4));
$personas->insert(array("nombre" => "Sally", "edad" => 22));
$personas->insert(array("nombre" => "Dave", "edad" => 22));
$personas->insert(array("nombre" => "Molly", "edad" => 87));

$edades = $db->command(array("distinct" => "personas", "key" => "edad"));

foreach ($edades['values'] as $edad) {
    echo "$edad\n";
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
    4
    22
    87
   </screen>
  </example>
  <example>
   <title>Ejemplo de <function>MongoDB::command</function> con "distinct"</title>
   <para>
    Buscar todos los valores distintos de una clave, donde el valor es mayor
    o igual a 18.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$personas= $db->personas;

$personas->insert(array("nombre" => "Joe", "edad" => 4));
$personas->insert(array("nombre" => "Sally", "edad" => 22));
$personas->insert(array("nombre" => "Dave", "edad" => 22));
$personas->insert(array("nombre" => "Molly", "edad" => 87));

$edades = $db->command(
    array(
        "distinct" => "personas",
        "key" => "edad",
        "query" => array("edad" => array('$gte' => 18))
    )
);  

foreach ($edades['values'] as $edad) {
    echo "$edad\n";
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
    22
    87
   </screen>
  </example>
  <example>
   <title>Ejemplo de <function>MongoDB::command</function> con MapReduce</title>
   <para>
    Obtener todos los usuarios con al menos un evento "sale" (venta), y cuántas veces
    han tenido ventas cada uno de esos usuarios.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

// documento de eventos de ejemplo
$events->insert(array("user_id" => $id, 
    "type" => $type, 
    "time" => new MongoDate(), 
    "desc" => $description));

// construcción del mapa y función reductora
$map = new MongoCode("function() { emit(this.user_id,1); }");
$reduce = new MongoCode("function(k, vals) { ".
    "var sum = 0;".
    "for (var i in vals) {".
        "sum += vals[i];". 
    "}".
    "return sum; }");

$sales = $db->command(array(
    "mapreduce" => "events", 
    "map" => $map,
    "reduce" => $reduce,
    "query" => array("type" => "sale"),
    "out" => array("merge" => "eventCounts")));

$users = $db->selectCollection($sales['result'])->find();

foreach ($users as $user) {
    echo "Usuario {$user['_id']} tuvo {$user['value']} venta(s).\n";
}

?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
    Usuario 47cc67093475061e3d9536d2 tuvo 3 venta(s).
    Usuario 49902cde5162504500b45c2c tuvo 14 venta(s).
    Usuario 4af467e4fd543cce7b0ea8e2 tuvo 1 venta(s).
   </screen>
   <note>
    <title>Usando <classname>MongoCode</classname></title>
    <para>
     Este ejemplo utiliza <classname>MongoCode</classname>, que puede utilizar también un
     argumento de ámbito. Sin embargo, por el momento, MongoDB no soporta el uso de
     ámbitos en MapReduce. Si deseara utilizar variables en el lado de cliente con las 
     funciones MapReduce, puede añairlas al ámbito global usando el campo opcional de
     ámbito con el comando de la base de datos. Consulte la
     <link xlink:href="&url.mongodb.dochub.mapreduce;">documentación de MapReduce</link> 
     para más información.
    </para>
   </note>
   <note>
    <title>El argumento <literal>out</literal></title>
    <para>
     Antes de 1.8.0, el argumento <literal>out</literal> era opcional. Si no se iba a usar,
     los resultados de MapReduce se escribían a una colección temporal,
     que se eliminaba cuando se cerrara la conexión. A partir de la versión 1.8.0, el 
     argumento <literal>out</literal> es obligatorio. Consulte la
     <link xlink:href="&url.mongodb.dochub.mapreduce;">documentación de MapReduce</link> 
     para más información.
    </para>
   </note>
   <para>
    Si va a usar MapReduce, Prajwal Tuldhar ha creado una API para usuarios de
    Mongo PHP que ofrece una interfaz más elegante que el comando 'al desnudo'. Puede
    descarlo desde
    <link xlink:href="&url.mongodb.mapreduceapi;">Github</link>
    y hay un  
    <link xlink:href="&url.mongodb.mapreduceapi.blog;">artículo de blog</link> 
    sobre cómo usarlo.
   </para>
  </example>
 </refsect1>
 
 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   Documentación de MongoDB sobre
   <link xlink:href="&url.mongodb.dochub.commands;">comandos de base de datos</link>
   y comando individuales: 
   <link xlink:href="&url.mongodb.dochub.findandmodify;">findAndModify</link>, 
   <link xlink:href="&url.mongodb.dochub.getlasterror;">getLastError</link>, y 
   <link xlink:href="&url.mongodb.dochub.repair;">repair</link> (existen muchos más,
   éstos son sólo unos pocos ejemplos).
  </para>
 </refsect1>
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
--> 
