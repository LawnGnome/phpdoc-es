<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 307180 Maintainer: yago Status: ready -->
<section xml:id="mongo.connecting" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Conexión</title>

 <para>
  La Conexión a MongoDB es tan fácil como usar <literal>new Mongo</literal>, pero 
  hay muchas más opciones y configuraciones adicionales. La 
  página <function>Mongo::__construct</function> cubre todas las opciones del API,
  pero está página ofrece más detalles y consejos para casos de uso prácticos.
 </para>

 <section>
  <title>Acceso a la conexión</title>
  <para>
   Si MongoDB se inicia con la opción <literal>--auth</literal> , las conexiones
   deben ser autenticadas antes de ser usadas.  Se puede hacer 
   a nivel de cada base de datos con <function>MongoDB::authenticate</function>:
  </para>
  <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo();
$db = $m->admin;

$db->authenticate($username, $password);

?>
]]>
  </programlisting>
  <para>
   Hay una gran desventaja al usar este método: si la conexión a la base de datos se
   cae y luego se reconecta, la conexión ya no estará autentificada.
  </para>
  <para>
   Si se utiliza la forma de conexión mediante cadena, como se describe en 
   <function>Mongo::__construct</function>, la base de datos se autentificará al
   conectarse y se autentificará de nuevo si la conexión se cae y se restablece. 
  </para>
  <para>
   Hace lo mismo que el código anterior, a excepción que las reconexiones a la 
   base de datos serán automáticamente autentificadas:
  </para>
  <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo("mongodb://${username}:${password}@localhost");

?>
]]>
  </programlisting>
  <para>
   Por omisión, el controlador autentificará al usuario en la base de datos. 
   Para autentificarse con diferentes base de datos, se especifica el nombre de la base de datos después 
   del host. Este ejemplo iniciará la sesión al usuario en la base de datos "blog":
  </para>
  <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo("mongodb://${username}:${password}@localhost/blog");

?>
]]>
  </programlisting>
 </section>

 <section>
  <title>Grupos replica</title>
  <para>
   Para conectarse a un grupo réplica, se debe especificar uno o más miembros del grupo usando
   la opción <literal>replicaSet</literal>.
  </para>
  <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo("mongodb://localhost:27017", array("replicaSet" => true));

?>
]]>
  </programlisting>
  <para>
   Se require la versión 1.0.9+ del driver para conectar a un grupo réplica 
   (versiones anteriores del driver no auto-detectarán el master o no se reconectarán 
   correctamente).
  </para>
  <para>
   El driver de PHP hará una petición a los servidor(es) de base de datos listados para descubrir cual es el
   master.  Mientras se pueda conectar almenos a uno de los servidores listados y pueda encontrar el 
   master, la conexión se establecerá con éxito. Si no se puede realizar una conexión a ninguno de los servidores
   listados o no puede encontrar el master, 
   <classname>MongoConnectionException</classname> devolverá una excepción.
  </para>  
  <para>
   Si el master no se encuentra disponible, los slaves no promocionarán un nuevo master por algunos
   segundos.  Durante ese tiempo, el controlador no podrá realizar ninguna operación en 
   la base de datos (excepto las conexiones a los slaves que seguirán disponibles para
   operaciones de lectura) Por lo tanto, si se intenta hacer cualquier tipo de consulta de lectura o escritura mientras
   esto suceda, se devolverá una excepción. 
  </para>
  <para>   
   Una vez el master es elegido, al realizar una lectura o escritura
   el driver detectará cual es el nuevo master. Establecerá la conexión como
   como primaria y continuará operando normalmente.
  </para>
  <para>
   Para obtener más información acerca de grupos replica, consulte la 
   <link xlink:href="&url.mongodb.replica;">documentación del núcleo</link>.
  </para>
 </section>

 <section>
  <title>Connexiones persistentes</title>
  <para>
   Crear una nueva conexión cada vez a la base de datos es muy lento.  Para minimizar el número
   de conexiones que se necesite, se pueden usar las conexiones persistentes.  Una 
   conexión persistente es guardada por PHP, para que pueda usarse la misma conexión en
   múltiples peticiones.
  </para>

  <para>
   Por ejemplo, este simple programa para conectarse 1000 veces a la base de datos:
  </para>

  <programlisting role="php">
<![CDATA[
<?php

for ($i=0; $i<1000; $i++) {
  $m = new Mongo();
}

?>
]]>
  </programlisting>

  <para>
   Esto tarda apróximadamente 18 segundos en ejecutarse. Pero si lo cambiamos para que utilice 
   una conexión persistente:
  </para>

  <programlisting role="php">
<![CDATA[
<?php

for ($i=0; $i<1000; $i++) {
  $m = new Mongo("localhost:27017", array("persist" => "x"));
}

?>
]]>
  </programlisting>

  <para>
   ...tardará menos de 0.02 segundos en ejecutarse, ya que solo se realiza una sola conexión
   a la base de datos.
  </para>

  <para>
   Las conexiones persistentes necesitan indicarse usando la variable de identificación (tal y como se muestra "x" 
   en el ejemplo anterior).  Para que la conexión persistente pueda usarse,
   el hostname, puerto, variable persist y el usuario y contraseña (si es necesario) debe
   coincidir con una conexión persistente ya existente.  De lo contrario, se creará una nueva conexión
   los datos proporcionados.
  </para>
  <para>
   Las conexiones persistentes son <emphasis>altamente recomendables</emphasis> y se deberían
   usar siempre en producción a no ser que exista una razón con fundamento para hacer lo contrario.  
   La mayoría de razones por las cuales no son recomendadas para bases de datos relacionales
   son totalmente irrelevantes para MongoDB.
  </para>
  <para>
   Las conexiones persistentes serán el tipo de conexión por omisión en 1.0.12. Para
   crear conexiones no persistentes, se deberá pasar 
   <literal>"persist" =&gt; false</literal> a
   <function>Mongo::__construct</function>.
  </para>  
 </section>

 <section>
  <title>Soporte de Domain Socket</title>

  <para>
   Si se está ejecutando MongoDB en local con la versión 1.0.9 o superior del
   driver, se puede conectar a la base de datos vía fichero. MongoDB automáticamente
   abre un fichero socket al iniciarse: /tmp/mongodb-&lt;port&gt;.sock.
  </para>

  <para>
   Para conectarse al fichero socket, especifique la ruta de la conexión 
   MongoDB:
  </para>

  <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo("mongodb:///tmp/mongo-27017.sock");

?>
]]>
  </programlisting>

  <para>
   Si se quiere utilizar autenticación en la conexión (tal y como se indica más arriba)
   usando un fichero socket, se debe especificar el puerto 0 para que el analizador
   de la cadena de conexión sepa donde acaba la cadena de conexión.
  </para>

  <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo("mongodb://username:password@/tmp/mongo-27017.sock:0/foo");

?>
]]>
  </programlisting>

 </section>

</section>
