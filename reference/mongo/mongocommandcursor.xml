<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 334955 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<phpdoc:classref xml:id="class.mongocommandcursor" xmlns:phpdoc="http://php.net/ns/phpdoc" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude">
 
 <title>La clase MongoCommandCursor</title>
 <titleabbrev>MongoCommandCursor</titleabbrev>
 
 <partintro>
  
  <!-- {{{ MongocommandCursor intro -->
  <section xml:id="mongocommandcursor.intro">
   &reftitle.intro;
   <para>
    Un cursor de comandos se usa para recorrer los resultados de un comando de base
    de datos. Un cursor de comando es similar a un
    <classname>MongoCursor</classname> normal excepto que se usa para recorrer
    el resultado de un comando del servidor en lugar de un resultado de una consulta.
   </para>
   <para>
    Normalmente no se crean cursores usando el constructor de
    <classname>MongoCommandCursor</classname>, se obtiene un nuevo cursor
    llamando a <function>MongoCollection::commandCursor</function>.
   </para>
   <para>
    Usar un cursor de comandos en lugar de
    <methodname>MongoDB::command</methodname> significa que se puede recorrer
    un conjunto de resultados mucho más grande que el devuelto por
    <methodname>MongoDB::command</methodname>, que está limitado al tamaño
    máximo de un documento (actualmente 16MB).
   </para>
   <para>
    Observe que el cursor no "contiene" los resultados del comando de la base de datos,
    solamente los gestiona. Por lo tanto, si se imprime un cursor (con, digamos,
    <function>var_dump</function> o <function>print_r</function>), se obtendrá
    el objeto cursor, no los documentos.
   </para>
  </section>
  
  <section>
   <title>Escenarios de un cursor</title>
   <para>
    Un <classname>MongoCommandCursor</classname> tiene dos "escenarios de vida": pre
    y post consulta. Cuando un cursor se crea, aún no ha contactado con la base
    de datos, por lo que esta en un estado de pre consulta. En este escenario, el cliente puede
    además especificar la consulta que quiere realizar, incluyendo la configuración del tamaño
    del lote.
   </para>
   <para>
    Cuando el cliente intenta obtener un resultado (llamando a
    <function>MongoCommandCursor::next</function>, directa o indirectamente),
    el cursor se traslada al escenario de post consulta. En este punto, el comando
    ha sido ejecutado por la base de datos y solamente se puede configurar el tamaño
    del lote.
   </para>
   <para>
    <example xml:id="mongocommandcursor.stages.adding-options">
     <title>Añadir opciones a <classname>MongoCommandCursor</classname></title>
     <programlisting role="php">
<![CDATA[
<?php

$cursor = new MongoCommandCursor(...);

// la base de datos aún no ha sido consultada, por lo que se pueden añadir más opciones
$cursor = $cursor->batchSize( 4 );

var_dump($cursor->getNext());
// ahora la base de datos ha sido consultada y no se pueden añadir más opciones
?>
]]>
     </programlisting>
    </example>
   </para>
  </section>
  <!-- }}} -->
  
  <section xml:id="mongocommandcursor.synopsis">
   &reftitle.classsynopsis;
   
   <!-- {{{ Synopsis -->
   <classsynopsis>
    <ooclass><classname>MongoCommandCursor</classname></ooclass>
    
    <!-- {{{ Class synopsis -->
    <classsynopsisinfo>
     <ooclass>
      <classname>MongoCommandCursor</classname>
     </ooclass>
     <oointerface>
      <interfacename>Iterator</interfacename>
     </oointerface>
     <oointerface>
      <interfacename>MongoCursorInterface</interfacename>
     </oointerface>
    </classsynopsisinfo>
    <!-- }}} -->
    
    <classsynopsisinfo role="comment">&Methods;</classsynopsisinfo>
    <xi:include xpointer="xmlns(db=http://docbook.org/ns/docbook) xpointer(id('class.mongocommandcursor')/db:refentry/db:refsect1[@role='description']/descendant::db:methodsynopsis[1])" />
   </classsynopsis>
   <!-- }}} -->
   
  </section>
  
  <section role="seealso">
   &reftitle.seealso;
   <simplelist>
    <member><methodname>MongoDb::command</methodname></member>
    <member><methodname>MongoCollection::commandCursor</methodname></member>
   </simplelist>
  </section>
  
 </partintro>
 
 &reference.mongo.entities.mongocommandcursor;
 
</phpdoc:classref>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
