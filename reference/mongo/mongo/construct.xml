<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 327468 Maintainer: andresdzphp Status: ready -->
<!-- Reviewed: no Maintainer: andresdzphp -->

<refentry xml:id="mongo.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>Mongo::__construct</refname>
  <refpurpose>Crear un nuevo objeto de conexión a base de datos</refpurpose>
 </refnamediv>
 
 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis>
   <modifier>public</modifier> <methodname>Mongo::__construct</methodname>
   <methodparam choice="opt"><type>string</type><parameter>server</parameter><initializer>"mongodb://localhost:27017"</initializer></methodparam>
   <methodparam choice="opt"><type>array</type><parameter>options</parameter><initializer>array("connect" => &true;)</initializer></methodparam>
  </methodsynopsis>
  <para>
   Si no se pasa ningún parámetro, conecta a "localhost:27017" (o lo que se
   indicara en php.ini en
   <link linkend="ini.mongo.default-host">mongo.default_host</link> y en
   <link linkend="ini.mongo.default-port">mongo.default_port</link>).
  </para>
  <para>
   <parameter>server</parameter> debe tener la forma:
   <programlisting>
<![CDATA[
mongodb://[username:password@]host1[:port1][,host2[:port2:],...]/db
]]>
   </programlisting>
  </para>
  <para>
   La cadena de conexión siempre comienza con <literal>mongodb://</literal>, para
   indicar que es una cadena de conexión de esta forma.
  </para>
  <para>Si se especifica <literal>username</literal> y <literal>password</literal>,
   el constructor autenticará la conexión con la base de datos antes de devolver el control.
   Son parámetros opcionales, y si se especifican, deben estar seguidos
   por una <literal>@</literal>.
  </para>
  <para>
   Al menos debe proporcionarse un host (el puerto es opcional, por omisión es 27017)
   y se puede conectar a tantos como se desee. Los nombres de host se
   separan por comas, y el constructor notificará éxito si al menos se conecta a
   uno de ellos. Si no se pudo conectar a ninguno, emitirá una excepción
   <classname>MongoConnectionException</classname>.
  </para>
  <para>
   Si se especificó un usuario y una contraseña, se puede especificar también la base de datos
   contra la que se autentica. Si <literal>db</literal> no se especifica, se utilizará
   "admin".
  </para>
  <para>
   Se podría usar una cadena de consulta opcional para especificar las
   <link linkend="mongo.readpreferences">preferencias de lectura</link> de la
   conexión.
  </para>
 </refsect1>
 
 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term>
      <parameter>server</parameter>
     </term>
     <listitem>
      <para>
       Nombre del servidor.
      </para>
     </listitem>
    </varlistentry>
    <varlistentry>
     <term>
      <parameter>options</parameter>
     </term>
     <listitem>
      <para>
       Array con las opciones de conexión. Las opciones disponibles actualmente
       son:
       <itemizedlist>
        <listitem>
         <para>
          <literal>"connect"</literal>
         </para>
         <para>
          Si el constructor debe o no conectar antes de devolver el control. Por omisión,
          &true;.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"timeout"</literal>
         </para>
         <para>
          Tiempo máximo que esperará el driver para conectar a la base de datos (en
          milisegundos).
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"replicaSet"</literal>
         </para>
         <para>
          Nombre del conjunto de réplicas al que conectar. Si se indicara,
          se averiguará al maestro usando el comando de base de datos <literal>ismaster</literal>
          en cada semilla, de manera que el driver pudiera finalizar conectando a un servidor
          que ni siquiera estaba en la lista. Para más detalles, revise el ejemplo
          de abajo sobre réplicas.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"username"</literal>
         </para>
         <para>
          En lugar de incluirlo en la lista de host, se puede especificar aquí el
          nombre de usuario. Es útil en caso de que un nombre de usuario incluya un ":".
          Esto reemplaza un nombre de usuario situado en la lista de host.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"password"</literal>
         </para>
         <para>
          En lugar de incluirlo en la lista de host, se puede especificar aquí la
          contraseña. Es útil en caso de que una contraseña incluya una "@".
          Esto reemplaza una contraseña establecida en la lista de hosts.
         </para>
        </listitem>
        <listitem>
         <para>
          <literal>"db"</literal>
         </para>
         <para>
          La base de datos para autenticarse se puede especificar aquí, 
          en lugar de incluirlo en la lista de hosts.  Esto reemplaza una base de datos dada 
          en la lista de hosts.
         </para>
        </listitem>
       </itemizedlist>
      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>
 
 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Devuelve un nuevo objeto de conexión a base de datos.
  </para>
 </refsect1>
 
 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Emite <classname>MongoConnectionException</classname> si intentara conectar a la base de datos
   en todos hosts proporcionados, y fallara. También emitirá
   <classname>MongoConnnectionException</classname> si el nombre de usuario o contraseña
   fueran inválidos. Revise la documentación de <classname>MongoConnectionException</classname>
   para conocer las excepciones y sus causas.
  </para>
 </refsect1>
 
 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>1.2.0</entry>
       <entry>
        <para>
         Eliminada la opción de persistencia, ya que ahora todas las conexiones lo son. Se puede
         seguir usando, pero no tendrá ningún efecto.
         <variablelist>
          <varlistentry>
           <term>
            <parameter>"persist"</parameter>
           </term>
           <listitem>
            <para>
             Si la conexión debe o no ser presistente. Si se habilita, la conexión
             lo será. Su representación en forma de string se usa como
             id de la conexión, de modo que dos instancias de 
             <classname>Mongo</classname> que se inicialicen con
             <literal>array("persist" => "foobar")</literal> compartirán la misma
             conexión, mientras que una instancia inicializada con
             <literal>array("persist" => "barbaz")</literal> usará una conexión a
             base de datos diferente.
            </para>
           </listitem>
          </varlistentry>
         </variablelist>
        </para>
        <para>
         Ahora el parámetro "replicaSet" espera un strings, y no un booleano (aunque
         todavía se aceptaría un booleano).
        </para>
       </entry>
      </row>
      <row>
       <entry>1.0.2</entry>
       <entry>
        Cambiado el constructor para que acepte un array de opciones. Antes de 1.0.2,
        el constructor tenía los siguientes parámetros:
        <variablelist>
         <varlistentry>
          <term>
           <parameter>server</parameter>
          </term>
          <listitem>
           <para>
            Nombre de servidor.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>
           <parameter>connect</parameter>
          </term>
          <listitem>
           <para>
            Parámetro booleano opcional para especificar si el constructor debe o no
            conectar a la base de datos antes de devolver el control. Por omisión, &true;.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>
           <parameter>persistent</parameter>
          </term>
          <listitem>
           <para>
            Si la conexión debe o no ser persistente.
           </para>
          </listitem>
         </varlistentry>
         <varlistentry>
          <term>
           <parameter>paired</parameter>
          </term>
          <listitem>
           <para>
            Si la conexión debe vincularse.
           </para>
          </listitem>
         </varlistentry>
        </variablelist>
       </entry>
      </row>
      <row>
       <entry>1.0.9</entry>
       <entry>
        Añadida la opción <literal>replicaSet</literal>.
       </entry>
      </row>
      <row>
       <entry>1.2.0</entry>
       <entry>
        Añadidas las opciones <literal>username</literal> y
        <literal>password</literal>.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>
 
 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ejemplo de conjunto de réplicas con <function>Mongo::__construct</function></title>
   <para>
    Este ejemplo muestra cómo conectar el driver a un conjunto de réplicas. Asume que
    hay un conjunto de tres servidores: sf1.example.com, sf2.example.com, y
    ny1.example.com. El maestro puede ser cualquiera de ellos.
   </para>
   <programlisting role="php">
<![CDATA[
<?php

// lista de nombes de servidores separadas por comas
$m1 = new Mongo("mongodb://sf2.example.com,ny1.example.com", array("replicaSet" => "myReplSet"));

// sólo es necesaria una semilla, y el driver obtendrá la lista completa y encontrará
// al maestro de esta semilla
$m2 = new Mongo("mongodb://ny1.example.com", array("replicaSet" => "myReplSet"));

?>
]]>
   </programlisting>
   <para>
    Si el maestro falla, el driver averiguará qué servidor secundario se convierte
    en el nuevo maestro y comenzará a usar automáticamente la conexión.
    La recuperación automática no funcionará correctametne si no se
    especificara <literal>replicaSet</literal>.
   </para>
   <para>
    Al menos debe haber una semilla funcionando de la lista de semillas para que el
    driver se conecte al conjunto de réplicas.
   </para>
   <para>
    Si se incluyen semillas de dos juegos de replicas separados, el comporamiento será inesperado.
   </para>
   <para>Para más información, revise la 
    <link xlink:href="&url.mongodb.dochub.rs;">documentation</link> sobre
    conjuntos de réplicas.
   </para>
  </example>
  <example>
   <title>Conectando a un socket de dominio</title>
   <para>
    En la versión 1.0.9 o superior, se puede usar un socket de dominio UNIX para conectar a
    una instancia de MongoDB local. Es ligeramente más rápido que una conexión
    de red.
   </para>
   <para>
    En la versión 1.5.0, el servidor MongoDB abre automáticamente un socket en
    /tmp/mongodb-&lt;port&gt;.sock. Puede coenctarse a él especificando la ruta en
    la cadena de conexión:
   </para>
   <programlisting role="php">
<![CDATA[
<?php

// Servidor MongoDB funcionando en local en el puerto 20000
$m = new Mongo("mongodb:///tmp/mongodb-20000.sock");

?>
]]>
   </programlisting>
   <para>
    Se puede combinar con las opciones que se desee:
   </para>
   <programlisting role="php">
<![CDATA[
<?php

// al conectar al socket de dominio, retrocede a la conexión a localhost
$m = new MongoDB("mongodb:///tmp/mongodb-27017.sock,localhost:27017");

?>
]]>
   </programlisting>
  </example>
  <example>
   <title>Ejemplo de autenticación con <function>Mongo::__construct</function></title>
   <para>
    El usuario debe existir en la base de datos admin antes de intentar
    autenticarlo. Puede crearse uno con la consola de Mongo ejecutando:
   </para>
   <programlisting>
<![CDATA[
> use admin
switched to db admin
> db.addUser("testUser", "testPass");
{
        "_id" : ObjectId("4b21272fd9ab21611d19095c"),
        "user" : "testUser",
        "pwd" : "03b9b27e0abf1865e2f6fcbd9845dd59"
}
>
]]>
   </programlisting>
   <para>
    Tras crear un usuario con, en este caso, el nombre "testUser" y la contraseña
    "testPass", puede crearse una conexión autenticada:
   </para>
   <programlisting role="php">
<![CDATA[
<?php

$m = new Mongo("mongodb://testUser:testPass@localhost");

?>
]]>
   </programlisting>
  </example>
  <example>
   <title>Ejemplo de preferencias de lectura de <function>Mongo::__construct</function></title>
   <programlisting role="php">
<![CDATA[
<?php

// Preferir el servidor más cercano en el centro de datos "east"
$uri  = 'mongodb://rs1.example.com,rs2.example.com/';
$uri .= '?readPreference=nearest';
$uri .= '&readPreferenceTags=dc:east';
$m = new Mongo($uri, array('replicaSet' => 'rs'));
]]>
   </programlisting>
   <para>
    Véase la sección de <link linkend="mongo.readpreferences">preferencias de lectura</link>
    de este manual para más información.
   </para>
  </example>
 </refsect1>
 
</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
