<?xml version="1.0" encoding="iso-8859-1"?>
 <reference id="ref.pgsql">
  <title>Funciones de PostgreSQL</title>
  <titleabbrev>PostgreSQL</titleabbrev>

  <partintro>
   <para>
    Postgres, desarrollado originalmente en el UC Berkeley Computer Science
    Department, ha sido pionero en muchos de los conceptos relacionales/orientados
    a objeto que ahora est&aacute;n empezando a estar disponibles en algunas bases de datos
    comperciales. Tiene soporte de lenguaje SQL92/SQL3, integridad transaccional,
    y extensibilidad de tipos. PostgreSQL es un descendiente de dominio p&uacute;blico, m&aacute;s concretamente
    open source, del c&oacute;digo original de Berkeley.
   </para>
   <para>
    PostgreSQL se encuentra disponible sin coste alguno. La versi&oacute;n actual la tienes a tu
    disposici&oacute;n en <ulink url="&url.pgsql;">www.PostgreSQL.org</ulink>.
   </para>
   <para>
    Desde la versi&oacute;n 6.3 (02/03/1998) PostgreSQL usa sockets tipo Unix. Abajo se da
    una tabla con las diferentes posibilidades. El socket se encuentra en el ficheero
    <filename>/tmp/.s.PGSQL.5432</filename>. Esta opci&oacute;n se controla mediante
    el flag '-i' del <command>postmaster</command> y cuando se incluye significa
    "escuchar sockets TCP/IP adem&aacute;s de los de dominio Unix" ya que si no se le dice
    nada solo escucha sockets tipo Unix.
    <table>
     <title>Postmaster y PHP</title>
     <tgroup cols="3">
      <thead>
       <row>
	<entry>Postmaster</entry>
	<entry>PHP</entry>
	<entry>Estado</entry>
       </row>
      </thead>
      <tbody>
       <row>
	<entry>postmaster &</entry>
	<entry>pg_connect("", "", "", "", "dbname");</entry>
	<entry>OK</entry>
       </row>
       <row>
	<entry>postmaster -i &</entry>
	<entry>pg_connect("", "", "", "", "dbname");</entry>
	<entry>OK</entry>
       </row>
       <row>
	<entry>postmaster &</entry>
	<entry>pg_connect("localhost", "", "", "", "dbname");</entry>
	<entry>
	 Unable to connect to PostgreSQL server: connectDB() failed:
	 Is the postmaster running and accepting TCP/IP (with -i)
	 connection at 'localhost' on port '5432'? in
	 /path/to/file.php3 on line 20.
         (Imposible conectar al servidor PostgreSQL, la llamada connectDB() ha fallado:
         ¿Est&aacute; funcionando el postmaster aceptando conextiones TCP/IP (con -i)
         en 'localhost' en el puerto '5432'? en /path/to/file.php3 en linea 20.
	</entry>
       </row>
       <row>
	<entry>postmaster -i &</entry>
	<entry>pg_connect("localhost", "", "", "", "dbname");</entry>
	<entry>OK</entry>
       </row>
      </tbody>
     </tgroup>
    </table>
   </para>
   <para>
    Uno puede establecer una conexi&oacute;n con el siguiente comando:
   </para>
   <para>
    Para usar el interface de objetos grandes (large object o lo), es necesario
    encapsularlo en un bloque de transacci&oacute;n. Un bloque de transacci&oacute;n
    empieza con un <command>begin</command> y si la transacci&oacute;n fue
    valida termina con <command>commit</command> y <command>end</command>.  Si la
    transacci&oacute;n falla debe ser cerrada con 
    <command>abort</command> y <command>rollback</command>.

    <example>
     <title>Usando Objetos Grandes (lo)</title>
     <programlisting role="php">
&lt;?php
$database = pg_Connect ("", "", "", "", "jacarta");
pg_exec ($database, "begin");
    $oid = pg_locreate ($database);
    echo ("$oid\n");
    $handle = pg_loopen ($database, $oid, "w");
    echo ("$handle\n");
    pg_lowrite ($handle, "gaga");
    pg_loclose ($handle);
pg_exec ($database, "commit")
pg_exec ($database, "end")
?>
     </programlisting>
    </example>
   </para>
  </partintro>

  <refentry id="function.pg-close">
   <refnamediv>
    <refname>pg_Close</refname>
    <refpurpose>Cierra una conexi&oacute;n PostgreSQL</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>bool <function>pg_close</function></funcdef>
     <paramdef>int <parameter>connection</parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve &false; si connection no es un indice de conexi&oacute;n valido y &true; en
     cualquier otro caso. Cierra la conexi&oacute;n a la base de datos PostgreSQL asociada con el
     indice de conexi&oacute;n pasado como par&aacute;metro.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-cmdtuples">
   <refnamediv>
    <refname>pg_cmdTuples</refname>
    <refpurpose>Devuelve el n&uacute;mero de tuplas afectadas</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>pg_cmdtuples</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>pg_cmdTuples</function> devuelve el n&uacute;mero de tuplas
     (instancias o filas) afectadas por consultas INSERT, UPDATE y DELETE.
     Si no hay ninguna tupla afectada la funci&oacute;n devolver&aacute; 0.
     <example>
      <title>pg_cmdtuples</title>
      <programlisting role="php">
&lt;?php
$result = pg_exec($conn, "INSERT INTO verlag VALUES ('Autor')");
$cmdtuples = pg_cmdtuples($result);
echo $cmdtuples . " <- cmdtuples affected.";
?>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-connect">
   <refnamediv>
    <refname>pg_Connect</refname>
    <refpurpose>Abre una conexi&oacute;n</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>pg_connect</function></funcdef>
     <paramdef>string <parameter>host</parameter></paramdef>
     <paramdef>string <parameter>port</parameter></paramdef>
     <paramdef>string <parameter>options</parameter></paramdef>
     <paramdef>string <parameter>tty</parameter></paramdef>
     <paramdef>string <parameter>dbname</parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve un &iacute;ndice de conexi&oacute;n en caso de &eacute;xito, o falso si la conexi&oacute;n
     no se puede realizar. Esta funci&oacute;n abre una conexi&oacute;n a una base de datos
     PostgreSQL. Cada uno de los argumentos debe ser una cadena entrecomillada,
     incluyendo el n&uacute;mero de puerto. Los par&aacute;metros options y tty son opcionales
     y pueden ser omitidos. Esta funci&oacute;n devuelve un &iacute;ndice de conexi&oacute;n que se necesitar&aacute;
     para otras funciones PostgreSQL. Puedes tener multiples conexiones abiertas
     al mismo tiempo.
    </para>
    <para>
     Una conexi&oacute;n tambi&eacute;n se puede establecer con el siguiente comando:
     <command>$conn = pg_connect("dbname=marliese port=5432");</command>
     
     Otros par&aacute;metros aparte de <parameter>dbname</parameter> y
     <parameter>port</parameter> son <parameter>host</parameter>, 
     <parameter>tty</parameter>, <parameter>options</parameter>,
     <parameter>user</parameter> y <parameter>password</parameter>.
    </para>
    <para>
     Ver tambi&eacute;n <function>pg_pConnect</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-dbname">
   <refnamediv>
    <refname>pg_DBname</refname>
    <refpurpose>Nombre de la base de datos</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>string <function>pg_dbname</function></funcdef>
     <paramdef>int <parameter>connection</parameter></paramdef>
    </funcsynopsis>
    <para>
Devuelve el nombre de la base de datos a la cual es el &iacute;ndice de conexi&oacute;n con
PostgreSQL est&aacute; conectado, o &false; si connection no es un &iacute;ndice de conexi&oacute;n v&aacute;lido.
</para>
</refsect1>
  </refentry>

  <refentry id="function.pg-errormessage">
   <refnamediv>
    <refname>pg_ErrorMessage</refname>
    <refpurpose>mensaje de error</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>string <function>pg_errormessage</function></funcdef>
     <paramdef>int <parameter>connection</parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve una cadena que contiene el mensaje de error, o &false; en caso
de fallo. Probablemente no se podr&aacute;n obtener los detalles del error a trav&eacute;s de la
funci&oacute;n
<function>pg_errormessage</function> si ocurre un error en la &uacute;ltima acci&oacute;n de base
de datos para la cual existe una conexi&oacute;n valida, esta funci&oacute;n retornar&aacute; una cadena
conteniendo el mensaje de error generado por el servidor "backend".
</para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-exec">
   <refnamediv>
    <refname>pg_Exec</refname>
    <refpurpose>Ejecuta una consulta (query)</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>pg_exec</function></funcdef>
     <paramdef>int <parameter>connection</parameter></paramdef>
     <paramdef>string <parameter>query</parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve un &iacute;ndice de resultado si se pudo ejecutar la consulta, o &false; en caso
     de fallo o si connection no es un &iacute;ndice de conexi&oacute;n v&aacute;lido. Se pueden obtener
     detalles acerca del error mediante la funci&oacute;n  <function>pg_ErrorMessage</function>
     siempre que  conection sea v&aacute;lido. Envia una sentencia SQL a la base de datos PostgreSQL
     especificada por el &iacute;ndice de conexi&oacute;n. connection debe ser un &iacute;ndice v&aacute;lido
     devuelto por <function>pg_Connect</function>. El valor de devuelto por esta funci&oacute;n es
     un &iacute;ndice para ser usado al acceder a los resultados de la consulta desde otras funciones
     PostgreSQL.
     
     <note>
      <simpara>
       PHP/FI devuelv&iacute;a 1 si no es una consulta que tenga que devolver datos
       (inserts o updates, por ejemplo) y un valor mayor que 1 incluso en el
       caso de selects que no devolvieron nada. En PHP no se puede contar con
       ninguna de esas suposiciones.
      </simpara>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fetch-array">
   <refnamediv>
    <refname>pg_Fetch_Array</refname>
    <refpurpose>obtiene una fila en la forma de un array</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>array <function>pg_fetch_array</function></funcdef>
     <paramdef>int <parameter>result</parameter></paramdef>
     <paramdef>int <parameter>row</parameter></paramdef>
     <paramdef>int 
      <parameter><optional>result_type</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     Devuelve: Un array que se corresponde con la fila obtenida, o &false; si no
     hay m&aacute;s filas.</para>
    <para>
     <function>pg_fetch_array</function> es una versi&oacute;n extendida de <function>pg_fetch_row</function>.
     Adem&aacute;s de almacenar los datos en los &iacute;ndices numericos del array resultante,
     tambi&eacute;n almacena los datos usando &iacute;ndices asociativos, empleando para ello
     el nombre del campo como la llave o &iacute;ndice.
    </para>
    <para>
     El tercer par&aacute;metro opcional <parameter>result_type</parameter> en
     <function>pg_fetch_array</function> es una constante y puede tomar cualquiera
     de los siguientes valores: PGSQL_ASSOC, PGSQL_NUM, y PGSQL_BOTH.
     <note>
      <para>
       <parameter>Result_type</parameter> se a&ntilde;adio en PHP 4.0.
      </para>
     </note>
    </para>
    <para>
     Una cosa importante a tener en cuenta es que usar
     <function>pg_fetch_array</function> NO es significativamente m&aacute;s lento que usar
     <function>pg_fetch_row</function>, y sin embargo el valor a&ntilde;adido que 
     aporta s&iacute; lo es.
    </para>
    <para>
     Para m&aacute;s detalles, ver
     <function>pg_fetch_row</function>
    </para>
    <example>
     <title>PostgreSQL fetch array</title>
     <programlisting role="php">
&lt;?php 
$conn = pg_pconnect("","","","","publisher");
if (!$conn) {
    echo "An error occured.\n";
    exit;
}

$result = pg_Exec ($conn, "SELECT * FROM authors");
if (!$result) {
    echo "An error occured.\n";
    exit;
}

$arr = pg_fetch_array ($result, 0);
echo $arr[0] . " <- array\n";

$arr = pg_fetch_array ($result, 1);
echo $arr["author"] . " <- array\n";
?>
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fetch-object">
   <refnamediv>
    <refname>pg_Fetch_Object</refname>
    <refpurpose>obtener una fila en forma de objeto</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>object <function>pg_fetch_object</function></funcdef>
     <paramdef>int <parameter>result</parameter></paramdef>
     <paramdef>int <parameter>row</parameter></paramdef>
     <paramdef>int 
      <parameter><optional>result_type</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <para> 
     Devuelve: Un objeto cuyas propiedades se corresponden con los campos de la fila obtenida, o &false;
     si no hay m&aacute;s filas.
    </para>
    <para> 
     <function>pg_fetch_object</function> es parecida a 
     <function>pg_fetch_array</function>, con una diferencia - se devuelve un objeto,
     en vez de un array. Indirectamente, eso significa que solo puedes acceder a los
     datos por medio de su nombre de campo, y no a trav&eacute;s de sus posiciones
     (los n&uacute;meros son nombres de propiedad invalidos).
    </para>
    <para>
     El tercer par&aacute;metro opcional <parameter>result_type</parameter> en
     <function>pg_fetch_object</function> es una constante y puede tomar
     cualquiera de los siguientes valores: PGSQL_ASSOC, PGSQL_NUM, y PGSQL_BOTH.
     <note>
      <para>
       <parameter>Result_type</parameter> se a&ntilde;adio en PHP 4.0.
      </para>
     </note>
    </para>
    <para>
     Referente a la velocidad, la funci&oacute;n es identica a 
     <function>pg_fetch_array</function>, y practicamente tan r&aacute;pida como
     <function>pg_fetch_row</function> (la diferencia es insignificante).
    </para>
    <para> 
     Ver tambi&eacute;n: <function>pg_fetch_array</function> y
     <function>pg_fetch_row</function>.
     <example>
      <title>Postgres fetch object</title>
      <programlisting role="php">
&lt;?php 
$database = "verlag";
$db_conn = pg_connect ("localhost", "5432", "", "", $database);
if (!$db_conn): ?>
    &lt;H1>Failed connecting to postgres database &lt;? echo $database ?>&lt;/H1> &lt;?
    exit;
endif;

$qu = pg_exec ($db_conn, "SELECT * FROM verlag ORDER BY autor");
$row = 0; // postgres needs a row counter other dbs might not 

while ($data = pg_fetch_object ($qu, $row)):
    echo $data->autor." (";
    echo $data->jahr ."): ";
    echo $data->titel."&lt;BR>";
    $row++;
endwhile; ?>

&lt;PRE>&lt;?php
$fields[] = Array ("autor", "Author");
$fields[] = Array ("jahr",  "  Year");
$fields[] = Array ("titel", " Title");

$row= 0; // postgres needs a row counter other dbs might not
while ($data = pg_fetch_object ($qu, $row)):
    echo "----------\n";
    reset ($fields);
    while (list (,$item) = each ($fields)):
        echo $item[1].": ".$data->$item[0]."\n";
    endwhile;
    $row++;
endwhile;
echo "----------\n"; ?>
&lt;/PRE> &lt;?php
pg_freeResult ($qu);
pg_close ($db_conn);
?>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fetch-row">
   <refnamediv>
    <refname>pg_Fetch_Row</refname>
    <refpurpose>obtiene la fila como un array enumerado</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>array <function>pg_fetch_row</function></funcdef>
     <paramdef>int <parameter>result</parameter></paramdef>
     <paramdef>int <parameter>row</parameter></paramdef>
    </funcsynopsis>
    <para> 
     Devuelve: Un array que se corresponde con la fila obtenida, o &false; en el
     caso de que no haya m&aacute;s filas.
    </para>
    <para>
     <function>pg_fetch_row</function> obtiene una fila de datos a partir
     del resultado asociado con el identificador de resultado especificado. La fila
     se devuelve en forma de array. Cada columna del resultado se almacena en una
     posici&oacute;n del array, empezando a partir de la posici&oacute;n 0.
    </para>
    <para>
     Las siguientes llamadas a <function>pg_fetch_row</function> devolver&aacute;n la
     fila siguiente en el conjunto resultado, o falso en el caso de que no haya
     m&aacute;s filas que devolver.
    </para>
    <para>
     Ver tambi&eacute;n: <function>pg_fetch_array</function>,
     <function>pg_fetch_object</function>,
     <function>pg_result</function>.
     <example>
      <title>Postgres fetch row</title>
      <programlisting role="php">
&lt;?php 
$conn = pg_pconnect("","","","","publisher");
if (!$conn) {
    echo "An error occured.\n";
    exit;
}

$result = pg_Exec ($conn, "SELECT * FROM authors");
if (!$result) {
    echo "An error occured.\n";
    exit;
}

$row = pg_fetch_row ($result, 0);
echo $row[0] . " <- row\n";

$row = pg_fetch_row ($result, 1);
echo $row[0] . " <- row\n";

$row = pg_fetch_row ($result, 2);
echo $row[1] . " <- row\n";
?>
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fieldisnull">
   <refnamediv>
    <refname>pg_FieldIsNull</refname>
    <refpurpose>Comprueba si un campo es NULO</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>pg_fieldisnull</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>int <parameter>row</parameter></paramdef>
     <paramdef>mixed <parameter>field</parameter></paramdef>
    </funcsynopsis>
    <para>
     Comprueba si un campo vale &null; o no. Devuleve 0 si el campo en la fila
     dada no es NULO y uno en el caso de que lo sea. El campo se puede especificar
     mediante un n&uacute;mero o un nombre de campo. La numeraci&oacute;n de filas empieza
     en 0.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fieldname">
   <refnamediv>
    <refname>pg_FieldName</refname>
    <refpurpose>Devuelve el nombre de un campo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>string <function>pg_fieldname</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>int <parameter>field_number</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>pg_FieldName</function> devolver&aacute; el nombre del campo que ocupa
     el n&uacute;mero de columna dado en el identificador de resultado de PostgreSQL. La
     numeraci&oacute;n de los campos empieza con 0.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fieldnum">
   <refnamediv>
    <refname>pg_FieldNum</refname>
    <refpurpose>Devuelve el n&uacute;mero de una columna</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>pg_fieldnum</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>string <parameter>field_name</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>pg_FieldNum</function> devolver&aacute; el n&uacute;mero de la columna que
     corresponde al campo cuyo nombre le damos, dentro del identificador de
     resultado de PostgreSQL. La numeraci&oacute;n de campos comienza en 0. Esta funci&oacute;n
     devolver&aacute; -1 en caso de error.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fieldprtlen">
   <refnamediv>
    <refname>pg_FieldPrtLen</refname>
    <refpurpose>Devuelve la longitud impresa</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>pg_fieldprtlen</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>int <parameter>row_number</parameter></paramdef>
     <paramdef>string <parameter>field_name</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>pg_FieldPrtLen</function> devolver&aacute; la longitud impresa real
     (n&uacute;mero de caracteres) de un valor espec&iacute;fico dentro del identificador
     de resultado PostgreSQL. La
     numeraci&oacute;n de filas comienza en 0. Esta funci&oacute;n devolver&aacute; -1 en caso de error.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fieldsize">
   <refnamediv>
    <refname>pg_FieldSize</refname> 
    <refpurpose>
     Devuelve el tama&ntilde;o de almacenamiento interno de un campo en concreto
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>pg_fieldsize</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>int <parameter>field_number</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>pg_FieldSize</function> devolver&aacute; el tama&ntilde;o de almacenamiento
     interno (en bytes) de uno de los campos del resultado PostgreSQL que le hemos pasado.
     La numeraci&oacute;n de campos empieza en 0. Un tama&ntilde;o de
     campo de -1 indica que se trata de un campo de longitud variable. La funci&oacute;n
     devolver&aacute; &false; en caso de error.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-fieldtype">
   <refnamediv>
    <refname>pg_FieldType</refname> 
    <refpurpose>
     Devuelve el nombre del tipo de dato correspondiente al campo cuyo n&uacute;mero pasamos como par&aacute;metro
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>pg_fieldtype</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>int <parameter>field_number</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>pg_FieldType</function> devolver&aacute; una cadena con el
     nombre del tipo de datos de un campo dado dentro del identificador de resultado  
     PostgreSQL result_id.
     La numeraci&oacute;n de campos empieza en 0.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-freeresult">
   <refnamediv>
    <refname>pg_FreeResult</refname> 
    <refpurpose>Libera memoria</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>pg_freeresult</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>pg_FreeResult</function> solo necesita ser llamada si estamos
     preocupados por usar demasiada memoria mientras el script se est&aacute; ejecutando.
     La memoria correspondiente a todos los resultados de consulta se libera
     autom&aacute;ticamente cuando termina el script. Pero, si est&aacute;s seguro de que no
     vas a necesitar m&aacute;s los datos del resultado en el script, puedes llamar a
     <function>pg_FreeResult</function> con el identificador del resultado
     como par&aacute;metro y la memoria asociada al resultado ser&aacute; liberada.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-getlastoid">
   <refnamediv>
    <refname>pg_GetLastOid</refname> 
    <refpurpose>Devuelve el identificador del &uacute;ltimo objeto insertado</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>pg_getlastoid</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>pg_GetLastOid</function> se puede usar para conseguir
     el Oid (identificador de objeto) asignado a una tupla insertada
     si el identificador de resultado proviene de una llamada a <function>pg_Exec</function>
     que fuese un INSERT SQL. Esta funci&oacute;n devuelve un entero positivo si
     hay un Oid v&aacute;lido y -1 en caso de que ocurriese un error durante
     el &uacute;ltimo comando enviado a trav&eacute;s de la funci&oacute;n <function>pg_Exec</function>
     o si esta no fuese un INSERT.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-host">
   <refnamediv>
    <refname>pg_Host</refname> 
    <refpurpose>Devuelve el nombre del host</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>string <function>pg_host</function></funcdef>
     <paramdef>int <parameter>connection_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>pg_Host</function> devuelve el nombre del host 
     al que identificador conexi&oacute;n PostgreSQL pasado est&aacute; conectado.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-loclose">
   <refnamediv>
    <refname>pg_loclose</refname>
    <refpurpose>Cierra un objeto grande (large object)</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>void <function>pg_loclose</function></funcdef>
     <paramdef>int <parameter>fd</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>pg_loclose</function> cierra un Large
     Object. <parameter>fd</parameter> es el descriptor de fichero
     del fichero grande obtenido a trav&eacute;s de <function>pg_loopen</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-locreate">
   <refnamediv>
    <refname>pg_locreate</refname>
    <refpurpose>Crea un objeto grande</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>pg_locreate</function></funcdef>
     <paramdef>int <parameter>conn</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>pg_locreate</function> Crea un  Large
     Object y devuelve su oid.
     <parameter>conn</parameter> determina una conexi&oacute;n de base de datos
     v&aacute;lida. Los modos de acceso INV_READ, INV_WRITE, y INV_ARCHIVE de 
     PostgreSQL no est&aacute;n soportados, el objeto se crea siempre con acceso
     tanto de lectura como de escritura. modo El INV_ARCHIVE ha desaparecido 
     incluso de PostgreSQL mismo (a partir de la versi&oacute;n 6.3).

    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-loopen">
   <refnamediv>
    <refname>pg_loopen</refname>
    <refpurpose>Abre un objeto grande</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>pg_loopen</function></funcdef>
     <paramdef>int <parameter>conn</parameter></paramdef>
     <paramdef>int <parameter>objoid</parameter></paramdef>
     <paramdef>string <parameter>mode</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>pg_loopen</function> abre un Large Object (objeto grande)
     y devuelve un descriptor de fichero para el objeto grande. El descriptor
     de fichero encapsula informaci&oacute;n acerca de la conexi&oacute;n. No se debe
     cerrar la conexi&oacute;n antes de cerrar el descriptor de fichero al objeto grande.
     <parameter>objoid</parameter> especifica un oid v&aacute;lido para un objeto
     grande y <parameter>mode</parameter> puede ser "r", "w", o "rw".
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-loread">
   <refnamediv>
    <refname>pg_loread</refname>
    <refpurpose>lee un large object (objeto grande)</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>string <function>pg_loread</function></funcdef>
     <paramdef>int <parameter>fd</parameter></paramdef>
     <paramdef>int <parameter>len</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>pg_loread</function> lee como mucho
     <parameter>len</parameter> bytes a partir de un objeto grande
     y lo devuelve como una cadena.

     <parameter>fd</parameter> especifica un descriptor de fichero
     de objeto grande v&aacute;lido y <parameter>len</parameter> especifica
     m&aacute;ximo n&uacute;mero de bytes que se deben leer del objeto grande.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-loreadall">
   <refnamediv>
    <refname>pg_loreadall</refname>
    <refpurpose>Lee un objeto grande entero</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>void <function>pg_loreadall</function></funcdef>
     <paramdef>int <parameter>fd</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>pg_loreadall</function> lee un objeto grande
     y lo pasa tal cual al browser despu&eacute;s de enviar todas las cabeceras 
     pendientes. Principalmente dirijido a mandar datos binarios como
     imagenes o sonido.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-lounlink">
   <refnamediv>
    <refname>pg_lounlink</refname>
    <refpurpose>borra un large object</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>void <function>pg_lounlink</function></funcdef>
     <paramdef>int <parameter>conn</parameter></paramdef>
     <paramdef>int <parameter>lobjid</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>pg_lounlink</function> borra el objeto grande con 
     identificador
     <parameter>lobjid</parameter>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-lowrite">
   <refnamediv>
    <refname>pg_lowrite</refname>
    <refpurpose>escribe en un objeto grande</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>pg_lowrite</function></funcdef>
     <paramdef>int <parameter>fd</parameter></paramdef>
     <paramdef>string <parameter>buf</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>pg_lowrite</function> escribe todo lo que puede en un 
     objeto grande a partir de la variable <parameter>buf</parameter> 
     y devuelve el n&uacute;mero de bytes realmente escritos, o falso si ocurre
     alg&uacute;n error.
     <parameter>fd</parameter> es un descriptor de fichero para 
     el objeto grande obtenido a trav&eacute;s de  <function>pg_loopen</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-numfields">
   <refnamediv>
    <refname>pg_NumFields</refname> 
    <refpurpose>Devuelve el n&uacute;mero de campos</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>pg_numfields</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>pg_NumFields</function> devuelve el n&uacute;mero de campos
     (columnas) en un resultado PostgreSQL. El par&aacute;metro es un identificador
     de resultado v&aacute;lido devuelto por <function>pg_Exec</function>. La funci&oacute;n
     devuelve -1 en caso de error.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-numrows">
   <refnamediv>
    <refname>pg_NumRows</refname> 
    <refpurpose>Devuelve el n&uacute;mero de filas</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>pg_numrows</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>pg_NumRows</function> devuelve el n&uacute;mero de filas
     en un resultado PostgreSQL. El par&aacute;metro es un identificador de 
     resultado PostgreSQL v&aacute;lido devuelto por <function>pg_Exec</function>. 
     En caso de error se devuelve -1.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-options">
   <refnamediv>
    <refname>pg_Options</refname> 
    <refpurpose>Devuelve opciones</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>string <function>pg_options</function></funcdef>
     <paramdef>int <parameter>connection_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>pg_Options</function> devuelve una cadena
     que contiene las opciones especificadas en el identificador
     de conexi&oacute;n con PostgreSQL dado.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-pconnect">
   <refnamediv>
    <refname>pg_pConnect</refname>
    <refpurpose>
     Crea una conexi&oacute;n persistente con una base de datos
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>pg_pconnect</function></funcdef>
     <paramdef>string <parameter>host</parameter></paramdef>
     <paramdef>string <parameter>port</parameter></paramdef>
     <paramdef>string <parameter>options</parameter></paramdef>
     <paramdef>string <parameter>tty</parameter></paramdef>
     <paramdef>string <parameter>dbname</parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve un &iacute;ndice de conexi&oacute;n en caso de &eacute;xito, o &false; si no es 
     posible realizar la conexi&oacute;n. Abre una conexi&oacute;n persistente hacia
     una base de datos de PostgreSQL. Cada uno de los par&aacute;metros puede ser
     una cadena entrecomillada (quoted), incluyendo el n&uacute;mero de puerto.
     Los par&aacute;metros options y tty son opcionales y pueden omitirse. Esta
     funci&oacute;n devuelve un &iacute;ndice de conexi&oacute;n que luego ser&aacute; empleado al llamar
     a otras funciones PostgreSQL. Puedes tener multiples conexiones 
     persistentes abiertas al mismo tiempo. Ver tambi&eacute;n
     <function>pg_Connect</function>.
    </para>
    <para>
     Una conexi&oacute;n tambi&eacute;n se puede establecer con el comando siguiente:
     <command>$conn = pg_pconnect("dbname=marliese port=5432");</command>
     Otros par&aacute;metros adem&aacute;s de <parameter>dbname</parameter> y
     <parameter>port</parameter> son <parameter>host</parameter>, 
     <parameter>tty</parameter>, <parameter>options</parameter>,
     <parameter>user</parameter> y <parameter>password</parameter>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-port">
   <refnamediv>
    <refname>pg_Port</refname>
    <refpurpose>Devuelve el n&uacute;mero de puerto</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>pg_port</function></funcdef>
     <paramdef>int <parameter>connection_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>pg_Port</function> devuelve el n&uacute;mero del puerto 
     al que el identificador de conexi&oacute;n con PostgreSQL est&aacute; conectado.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pg-result">
   <refnamediv>
    <refname>pg_Result</refname>
    <refpurpose>Devuelve valores a partir de un identificador de resultado</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>mixed <function>pg_result</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>int <parameter>row_number</parameter></paramdef>
     <paramdef>mixed <parameter>fieldname</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>pg_Result</function> devuelve valores a partir
     de un identificador de resultado generado en la funci&oacute;n <function>pg_Exec</function>. 
     Los par&aacute;metros <parameter>row_number</parameter> y
     <parameter>fieldname</parameter> especifican que celda en la
     tabla queremos obtener. La numeraci&oacute;n de filas comienza en 0. En vez
     de usar el nombre del campo tambi&eacute;n puedes usar el &iacute;ndice del campo como 
     un n&uacute;mero sin entrecomillar. Los &iacute;ndices de campo comienzan tambi&eacute;n en 0.
    </para>
    <para>
    
     PostgreSQL tiene muchos tipos y solo los b&aacute;sicos est&aacute;n soportados 
     directamente aqu&iacute;. Todas las formas de enteros, boleanos y oids se devuelven
     como valores enteros. Todas las formas de los tipos float y real se 
     devuelven como valores double. Todos los dem&aacute;s tipos, incluyendo los
     arrays se devuelven como cadenas formateadas de la misma 
     manera en que PostgreSQL usa por defecto. De la misma forma en
     que lo ver&iacute;as en el programa <command>psql</command>.
    </para>  
   </refsect1>
  </refentry>

  <refentry id="function.pg-tty">
   <refnamediv>
    <refname>pg_tty</refname>
    <refpurpose>Devuelve el nombre del tty</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>string <function>pg_tty</function></funcdef>
     <paramdef>int <parameter>connection_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>pg_tty</function> devuelve el nombre
     del tty hacia el que se dirije la salida de depuraci&oacute;n del lado
     del servidor en el identificador de conexi&oacute;n de PostgreSQL dado.
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
