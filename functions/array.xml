 <reference id="ref.array">
  <title>Funciones de matrices</title>
  <titleabbrev>Matrices</titleabbrev>

  <refentry id="function.array">
   <refnamediv>
    <refname>array</refname>
    <refpurpose>
     Crear una matriz
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>array <function>array</function></funcdef>
     <varargs/>
    </funcsynopsis>
    <para>
     Devuelve una matriz con los parámetros que se le pasan. A dichos 
     parámetros se les puede dar un índice usando el operador <literal>=&gt;</literal>.
     <note>
      <para>
       <function>array</function> es una construcción del lenguaje que se 
       utiliza para representar matrices literales, no una función regular.
      </para>
     </note>
    </para>
    <para>
     El siguiente ejemplo demuestra cómo crear una matriz 
     bidimensional, cómo especificar claves para matrices
     asociativas, y cómo especificar índices no consecutivos
     en matrices normales.
     <example>
      <title>Ejemplo de <function>array</function></title>
      <programlisting role="php">
$frutas = array (
    "frutas"  => array("a"=>"naranja", "b"=>"plátano", "c"=>"manzana"),
    "números" => array(1, 2, 3, 4, 5, 6),
    "hoyos"   => array("primero", 5 => "segundo", "tercero")
);
      </programlisting>
     </example>
    </para>
    <para>
     Vea también: <function>list</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-count-values">
   <refnamediv>
    <refname>array_count_values</refname>
    <refpurpose>Cuenta todos los valores de una matriz</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>array <function>array_count_values</function></funcdef>
     <paramdef>array <parameter>entrada</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>array_count_values</function> devuelve una matriz usando 
     los valores de la matriz <parameter>entrada</parameter> como claves y
     su frecuencia de aparición en la <parameter>entrada</parameter> como valores.
    </para>
    <para>
     <example>
      <title>Ejemplo de <function>array_count_values</function></title>
      <programlisting role="php">
$matriz = array(1, "hola", 1, "mundo", "hola");
array_count_values($matriz); // devuelve array(1=>2, "hola"=>2, "mundo"=>1)
      </programlisting>
     </example>     
     <note>
      <para>
       Esta función fue añadida en el PHP 4.0.
      </para> 
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-flip">
   <refnamediv>
    <refname>array_flip</refname>
    <refpurpose>Intercambia los valores de una matriz</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>array <function>array_flip</function></funcdef>
     <paramdef>array <parameter>trans</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>array_flip</function> devuelve una matriz con los valores intercambiados.
    </para>
    <para>
     <example>
      <title>Ejemplo de <function>array_flip</function></title>
      <programlisting role="php">
$trans = array_flip ($trans);
$original = strtr ($str, $trans);
      </programlisting>
     </example>
     <note>
      <para>
       Esta función fue añadida en el PHP 4.0.
      </para> 
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-keys">
   <refnamediv>
    <refname>array_keys</refname>
    <refpurpose>Devuelve todas las claves de una matriz</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>array <function>array_keys</function></funcdef>
     <paramdef>array <parameter>entrada</parameter></paramdef>
     <paramdef>mixed
      <parameter>
       <optional>val_a_buscar</optional>
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     <function>array_keys</function> devuelve las claves, numéricas
     y de cadena, de la matriz <parameter>entrada</parameter>.
    </para>
    <para>
     Si se especifica el parámetro opcional <parameter>val_a_buscar</parameter>,
     sólo se devuelven las claves para dicho valor. De otro modo, se
     devuelven todas las claves de la <parameter>entrada</parameter>.
    </para>
    <para>
     <example>
      <title>Ejemplo de <function>array_keys</function></title>
      <programlisting role="php">
$matriz = array(0 => 100, "color" => "rojo");
array_keys ($matriz);       // devuelve array (0, "color")

$matriz = array(1, 100, 2, 100);
array_keys ($matriz, 100);  // devuelve array (0, 2) 
      </programlisting>
     </example>
    </para>
    <para>
     Vea también: <function>array_values</function>.
     <note>
      <para>
       Esta función fue añadida en el PHP 4.0.
      </para> 
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-merge">
   <refnamediv>
    <refname>array_merge</refname>
    <refpurpose>Combina dos o más matrices</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>array <function>array_merge</function></funcdef>
     <paramdef>array <parameter>matriz1</parameter></paramdef>
     <paramdef>array <parameter>matriz2</parameter></paramdef>
     <paramdef>
      <parameter><optional> ...</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     <function>array_merge</function> combina los elementos de dos o
     más matrices conjuntamente de modo que los valores de una son
     agregados al final de los valores de la anterior. Devuelve la 
     matriz resultante.
    </para>
    <para>
     Si las matrices de entrada tienen las mismas claves de cadena,
     el último valor para cada clave reemplazará el valor previo de 
     la misma. Si, por el contrario, las matrices tienen la misma clave
     numérica, esto no pasa y los valores son simplemente agregados.
    </para>
    <para>
     <example>
      <title>Ejemplo de <function>array_merge</function></title>
      <programlisting role="php">
$matriz1 = array ("color" => "rojo", 2, 4);
$matriz2 = array ("a", "b", "color" => "verde", "forma" => "trapezoide");
array_merge ($matriz1, $matriz2);
      </programlisting>
      <para>
       La matriz resultante sería array("color" => "verde", 2, 4, "a",
       "b", "forma" => "trapezoide").
      </para>
     </example>
     <note>
      <para>
       Esta función fue añadida en el PHP 4.0.
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-pad">
   <refnamediv>
    <refname>array_pad</refname>
    <refpurpose>
     Rellena una matriz con un valor hasta el tamaño especificado
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>array <function>array_pad</function></funcdef>
     <paramdef>array <parameter>entrada</parameter></paramdef>
     <paramdef>int <parameter>tama_relleno</parameter></paramdef>
     <paramdef>mixed <parameter>valor_relleno</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>array_pad</function> Devuelve una copia de la 
     <parameter>entrada</parameter> rellenada hasta el tamaño
     <parameter>tama_relleno</parameter> con el valor
     <parameter>valor_relleno</parameter>. Si
     <parameter>tama_relleno</parameter> es positivo, entonces la matriz es
     rellenada por la derecha, y si es negativo, por la izquierda.
     Si el valor absoluto de <parameter>tama_relleno</parameter> es menor o igual
     que el tamaño de la <parameter>entrada</parameter> no se produce
     relleno alguno.
    </para>
    <para>
     <example>
      <title>Ejemplo de <function>array_pad</function></title>
      <programlisting role="php">
$entrada = array (12, 10, 9);

$resultado = array_pad ($entrada, 5, 0);
// el resultado es array (12, 10, 9, 0, 0)

$resultado = array_pad ($entrada, -7, -1);
// el resultado es array (-1, -1, -1, -1, 12, 10, 9)

$resultado = array_pad ($entrada, 2, "no");
// no rellenado
      </programlisting>
     </example>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-pop">
   <refnamediv>
    <refname>array_pop</refname>
    <refpurpose>Extrae el último elemento de la matriz</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>mixed <function>array_pop</function></funcdef>
     <paramdef>array <parameter>matriz</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>array_pop</function> extrae y devuelve el último valor
     de la <parameter>matriz</parameter>, acortando la 
     <parameter>matriz</parameter> en un elemento.
    </para>
    <para>
     <example>
      <title>Ejemplo de <function>array_pop</function></title>
      <programlisting role="php">
$pila = array ("naranja", "manzana", "frambuesa");
$fruta = array_pop ($pila);
      </programlisting>
      <para>
       Tras esto, $pila contiene sólo 2 elementos: "naranja" y "manzana",
       y $fruta contiene "frambuesa".
      </para>
     </example>
    </para>
    <para>
     Vea también: <function>array_push</function>,
     <function>array_shift</function>, y
     <function>array_unshift</function>.
     <note>
      <para>
       Esta función fue añadida en el PHP 4.0.
      </para> 
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-push">
   <refnamediv>
    <refname>array_push</refname>
    <refpurpose>
     Inserta uno o más elementos al final de la matriz
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>array_push</function></funcdef>
     <paramdef>array <parameter>matriz</parameter></paramdef>
     <paramdef>mixed <parameter>var</parameter></paramdef>
     <paramdef>
      <parameter><optional>...</optional></parameter>
     </paramdef>
    </funcsynopsis>

    <para>
     <function>array_push</function> considera a la 
     <parameter>matriz</parameter> como una pila, e inserta las
     variables que se le pasan al final de la <parameter>matriz</parameter>. 
     La longitud de la <parameter>matriz</parameter> se incrementa en el número
     de variables insertadas. Tiene el mismo efecto que ejecutar:
     <programlisting role="php">
$matriz[] = $var;
     </programlisting>
     para cada <parameter>var</parameter>.
    </para>
    <para>
     Devuelve el nuevo número de elementos de la matriz.
    </para>
    <para>
     <example>
      <title>Ejemplo de <function>array_push</function></title>
      <programlisting role="php">
$pila = array (1, 2);
array_push($pila, "+", 3);
      </programlisting>
     </example>
     Este ejemplo dejará $pila conteniendo 4 elementos: 1, 2, "+",
     y 3.
    </para>
    <para>
     Vea también: <function>array_pop</function>,
     <function>array_shift</function>, y
     <function>array_unshift</function>.
     <note>
      <para>
       Esta función fue añadida en el PHP 4.0.
      </para> 
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-reverse">
   <refnamediv>
    <refname>array_reverse</refname>
    <refpurpose>
     Devuelve una matriz con los elementos en orden inverso
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>array <function>array_reverse</function></funcdef>
     <paramdef>array <parameter>matriz</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>array_reverse</function> toma la 
     <parameter>matriz</parameter> de entrada y devuelve una nueva
     matriz con los elementos en orden inverso.
    </para>
    <para>
     <example>
      <title>Ejemplo de <function>array_reverse</function></title>
      <programlisting role="php">
$entrada = array ("php", 4.0, array ("verde", "rojo"));
$resultado = array_reverse ($entrada);
      </programlisting>
     </example>
     Esto hace que $resultado contenga array (array ("verde", "rojo"), 4.0, "php").
     <note>
      <para>
       Esta función fue añadida en PHP 4.0 Beta 3.
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-shift">
   <refnamediv>
    <refname>array_shift</refname>
    <refpurpose>
     Extrae un elemento del comienzo de la matriz
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>mixed <function>array_shift</function></funcdef>
     <paramdef>array <parameter>matriz</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>array_shift</function> extrae el primer valor de la
     <parameter>matriz</parameter> y lo devuele, acortando la 
     <parameter>matriz</parameter> en un elemnto y moviendo todo
     hacia arriba.
    </para>
    <para>
     <example>
      <title>Ejemplo de <function>array_shift</function></title>
      <programlisting role="php">
$args = array ("-v", "-f");
$opcion = array_shift ($args);
      </programlisting>
     </example>
     Esto da como resultado que $args tenga como elemento restante "-f" y
     que $opcion valga "-v".
    </para>
    <para>
     Vea también: <function>array_unshift</function>,
     <function>array_push</function>, y
     <function>array_pop</function>.
     <note>
      <para>
       Esta función fue añadida en el PHP 4.0.
      </para> 
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-slice">
   <refnamediv>
    <refname>array_slice</refname>
    <refpurpose>Extrae una porción de la matriz</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>array <function>array_slice</function></funcdef>
     <paramdef>array <parameter>matriz</parameter></paramdef>
     <paramdef>int <parameter>desplazamiento</parameter></paramdef>
     <paramdef>int
      <parameter>
       <optional>tamano</optional>
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     <function>array_slice</function> devuelve una secuencia de 
     elementos de la <parameter>matriz</parameter> especificada por 
     los parámetros <parameter>desplazamiento</parameter> y 
     <parameter>tamano</parameter>.
    </para>
    <para>
     Si el <parameter>desplazamiento</parameter> es positivo, la secuencia
     comenzará en dicha posición de la <parameter>matriz</parameter>. Si el
     <parameter>desplazamiento</parameter> es negativo, la secuencia comenzará
     en esa posición desde el final de la <parameter>matriz</parameter>.
    </para>
    <para>
     Si se especifica el <parameter>tamano</parameter> y éste es positivo,
     la secuencia contendrá tantos elementos como se diga en él. Si fuese
     negativo, la secuencia se detendrá a tantos elementos del final de la
     matriz. Si se omite, la secuencia contendrá todos los elementos desde
     el <parameter>desplazamiento</parameter> hasta el final de la <parameter>matriz</parameter>.
    </para>
    <para>
     <example>
      <title>Ejemplo de <function>array_slice</function> examples</title>
      <programlisting role="php">
$entrada = array ("a", "b", "c", "d", "e");

$salida = array_slice ($entrada, 2);      // devuelve "c", "d", y "e"
$salida = array_slice ($entrada, 2, -1);  // devuelve "c", "d"
$salida = array_slice ($entrada, -2, 1);  // devuelve "d"
$salida = array_slice ($entrada, 0, 3);   // devuelve "a", "b", y "c"
      </programlisting>
     </example>
    </para>
    <para>
     Vea también: <function>array_splice</function>.
     <note>
      <para>
       Esta función fue añadida en el PHP 4.0.
      </para> 
     </note>
    </para>     
   </refsect1>
  </refentry>

  <refentry id="function.array-splice">
   <refnamediv>
    <refname>array_splice</refname>
    <refpurpose>
     Suprime una porción de la matriz y la sustituye por otra cosa
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>array <function>array_splice</function></funcdef>
     <paramdef>array <parameter>entrada</parameter></paramdef>
     <paramdef>int <parameter>desplazamiento</parameter></paramdef>
     <paramdef>int
      <parameter><optional>tamano</optional></parameter>
     </paramdef>
     <paramdef>array
      <parameter>
       <optional>sustitucion</optional>
      </parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     <function>array_splice</function> suprime los elementos designados por 
     el <parameter>desplazamiento</parameter> y el
     <parameter>tamano</parameter> de la matriz
     <parameter>entrada</parameter>, y los sustituye con los elementos
     de la matriz de <parameter>sustitucion</parameter> si se especifica.
    </para>
    <para>
     Si el <parameter>desplazamiento</parameter> es positivo, el comienzo de la 
     parte suprimida sería en esa posición desde el comienzo de la matriz de
     <parameter>entrada</parameter>. Si el
     <parameter>desplazamiento</parameter> es negativo, se cuenta la posición
     desde el final de la matriz de <parameter>entrada</parameter>.
    </para>
    <para>
     Si se omite <parameter>tamano</parameter>, se suprime todo desde el
     <parameter>desplazamiento</parameter> hasta el final de la matriz. Si
     se especifica el <parameter>tamano</parameter> y es positivo, se suprimirán
     tantos elementos como se especifica. Si fuera negativo, el final de la 
     porción eliminada estará a tantos elementos del final de la matriz.
     Truco: para eliminar todo desde el <parameter>desplazamiento</parameter> 
     hasta el final de la matriz cuando también se especifica
     <parameter>sustitucion</parameter>, utilice <literal>count($entrada)</literal> 
     como <parameter>tamano</parameter>.
    </para>
    <para>
     Si se especifia la matriz de <parameter>sustitucion</parameter>, entonces
     los elementos suprimidos son reemplazados con los elementos de dicha
     matriz. Si los valores de <parameter>desplazamiento</parameter> y
     <parameter>tamano</parameter> son tales que nada es borrado, 
     los elementos de la matriz <parameter>sustitucion</parameter>
     se insertarán en la posición indicada por el <parameter>desplazamiento</parameter>.
     Truco: si sólo se va a sustituir algo por un elemento nada más, no hace falta
     poner <literal>array()</literal> alrededor del mismo, salvo que dicho elemento
     sea una matriz en sí mismo.
    </para>
    <para>
     Las siguientes funciones son equivalentes:
     <programlisting role="php">
array_push($entrada, $x, $y)     array_splice($entrada, count($entrada), 0, array($x, $y))
array_pop($entrada)              array_splice($entrada, -1)
array_shift($entrada)            array_splice($entrada, 0, 1)
array_unshift($entrada, $x, $y)  array_splice($entrada, 0, 0, array($x, $y))
$a[$x] = $y                    array_splice($entrada, $x, 1, $y)
     </programlisting>
    </para>
    <para>
     Devuelve una matriz que tiene los elementos eliminados
    </para>
    <para>
     <example>
      <title>Ejemplos de <function>array_splice</function></title>
      <programlisting role="php">
$entrada = array("rojo", "verde", "azul", "amarillo");

array_splice($entrada, 2);      // $entrada vale ahora array("rojo", "verde")
array_splice($entrada, 1, -1);  // $entrada vale ahora array("rojo", "amarillo")
array_splice($entrada, 1, count($entrada), "naranja");  
                              // $entrada vale ahora array("rojo", "naranja")
array_splice($entrada, -1, 1, array("negro", "marrón")); 
                              // $entrada vale ahora array("rojo", "verde", 
                              //          "azul", "negro", "marrón")
      </programlisting>
     </example>
    </para>
    <para>
     Vea también: <function>array_slice</function>.
     <note>
      <para>
       Esta función fue añadida en el PHP 4.0.
      </para> 
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-unshift">
   <refnamediv>
    <refname>array_unshift</refname>
    <refpurpose>Introduce uno o más elementos al principio
     de la matriz</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcprototype>
      <funcdef>int <function>array_unshift</function></funcdef>
      <paramdef>array <parameter>matriz</parameter></paramdef>
      <paramdef>mixed <parameter>var</parameter></paramdef>
      <paramdef>
       <parameter>
	<optional>...</optional>
       </parameter>
      </paramdef>
     </funcprototype>
    </funcsynopsis>
    <para>
     <function>array_unshift</function> añade los elementos que se le
     pasan al principio de la <parameter>matriz</parameter>. Nótese que la
     lista de elementos es añadida como un todo, de modo que los
     elementos añadidos mantienen su orden.
    </para>
    <para>
     Devuelve el número de elementos en la <parameter>matriz</parameter>.
    </para>
    <para>
     <example>
      <title>Ejemplo de <function>array_unshift</function></title>
      <programlisting role="php">
$cola = array("p1", "p3");
array_unshift($cola, "p4", "p5", "p6");
      </programlisting>
     </example>
     Esto hará que $cola contenga 5 elementos: "p4", "p5", "p6",
     "p1", y "p3".
    </para>
    <para>
     Vea también: <function>array_shift</function>,
     <function>array_push</function>, y
     <function>array_pop</function>.
     <note>
      <para>
       Esta función fue añadida en el PHP 4.0.
      </para> 
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-values">
   <refnamediv>
    <refname>array_values</refname>
    <refpurpose>Devuelve todos los valores de una matriz</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>array <function>array_values</function></funcdef>
     <paramdef>array <parameter>entrada</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>array_values</function> devuelve todos los valores de la 
     matriz <parameter>entrada</parameter>.
    </para>
    <para>
     <example>
      <title>Ejemplo de <function>array_values</function></title>
      <programlisting role="php">
$matriz = array("talla" => "XL", "color" => "dorado");
array_values($matriz);    // devuelve array("XL", "dorado")
      </programlisting>
     </example>
     <note>
      <para>
       Esta función fue añadida en el PHP 4.0.
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.array-walk">
   <refnamediv>
    <refname>array_walk</refname>
    <refpurpose>
     Aplica una función del usuario a cada elemento de una matriz.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>array_walk</function></funcdef>
     <paramdef>array <parameter>matriz</parameter></paramdef>
     <paramdef>string <parameter>func</parameter></paramdef>
     <paramdef>mixed <parameter>datosvarios</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Aplica la función llamada <parameter>func</parameter> a cada elemento de 
     la <parameter>matriz</parameter>. La función 
     <parameter>func</parameter> recibirá el valor de la matriz como primer
     parámetro y la clave como segundo. Si se proporciona el
     parámetro <parameter>datosvarios</parameter> será pasado como
     tercer parámetro a la función de usuario.
    </simpara>
    <simpara>
     Si <parameter>func</parameter> necesita más de dos o 3 argumentos,
     dependiendo de <parameter>datosvarios</parameter>, se generará un
     aviso cada vez que <function>array_walk</function> llama a
     <parameter>func</parameter>. Estos avisos pueden suprimirse si
     se pone '@' antes de la llamada a <function>array_walk</function>,
     o usando la función <function>error_reporting</function>.
    </simpara>
    <note>
     <para>
      Si <parameter>func</parameter> precisa trabajar con los valores
      reales de la matriz, especifique que el valor del primer parámetro
      de <parameter>func</parameter> debe pasarse por referencia. Desde ese
      instante, los cambios realizados sobre dichos elementos también serán
      realizados en la propia matriz.
     </para>
    </note>
    <note>
     <para>
      El pasar la clave y los datos de usuario a <parameter>func</parameter> 
      fue una característica añadida en PHP 4.0.
     </para>
     <para>
      En PHP 4 se debe llamar <function>reset</function> las veces necesarias,
      pues <function>array_walk</function> no reajusta la matriz por
      defecto.
     </para>
    </note>
    <para>
     <example>
      <title>Ejemplo de <function>array_walk</function></title>
      <programlisting role="php">
$frutas = array ("d"=>"limón", "a"=>"naranja", "b"=>"plátano", "c"=>"manzana");

function test_alterar (&$item1, $clave, $prefix) {
   $item1 = "$prefix: $item1";
}

function test_ver ($item2, $clave) {
   echo "$clave. $item2&lt;br&gt;\n";
}

array_walk ($frutas, 'test_ver');
reset ($frutas);
array_walk ($frutas, 'test_alterar', 'fruta');
reset ($frutas);
array_walk ($frutas, 'test_ver');
      </programlisting>
     </example>
    </para>
    <simpara>
     Vea también: <function>each</function> y <function>list</function>.
    </simpara>
   </refsect1>
  </refentry>
    
  <refentry id="function.arsort">
   <refnamediv>
    <refname>arsort</refname>
    <refpurpose>
     Ordena una matriz en orden inverso y mantiene la asociación de índices
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>void <function>arsort</function></funcdef>
     <paramdef>array <parameter>matriz</parameter></paramdef>
    </funcsynopsis>
    <para>
     Esta función ordena una matriz de modo que los índices mantengan
     su correlación con los elementos de la misma a los que están asociados.
     Esto se utiliza principalmente para ordenar matrices asociativas
     en las que el orden de los elementos es importante.
     <example>
      <title>Ejemplo de <function>arsort</function></title>
      <programlisting role="php">
$frutas = array ("d"=>"limón", "a"=>"naranja", "b"=>"plátano", "c"=>"manzana");
arsort ($frutas);
for (reset ($frutas); $clave = key ($frutas); next ($frutas)) {
    echo "frutas[$clave] = ".$frutas[$clave]."\n";
}
      </programlisting>
     </example>
     Este ejemplo mostraría:
     <computeroutput>
frutas[b] = plátano
frutas[a] = naranja
frutas[c] = manzana
frutas[d] = limón
     </computeroutput>
     Las frutas han sido ordenadas en orden alfabético inverso y los
     índices asociados con cada elemento se han mantenido.
    </para>
    <para>
     Vea también: <function>asort</function>, <function>rsort</function>,
     <function>ksort</function>, y <function>sort</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.asort">
   <refnamediv>
    <refname>asort</refname>
    <refpurpose>Ordena una matriz y mantiene la asociación de índices</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>void <function>asort</function></funcdef>
     <paramdef>array <parameter>matriz</parameter></paramdef>
    </funcsynopsis>
    <para>
     Esta función ordena una matriz de modo que los índices mantengan
     su correlación con los elementos de la misma a los que están asociados.
     Esto se utiliza principalmente para ordenar matrices asociativas
     en las que el orden de los elementos es importante.
     <example>
      <title>Ejemplo de <function>asort</function></title>
      <programlisting role="php">
$frutas = array ("d"=>"limón", "a"=>"naranja", "b"=>"plátano", "c"=>"manzana");
asort ($frutas);
for (reset ($frutas); $clave = key ($frutas); next ($frutas)) {
    echo "frutas[$clave] = ".$frutas[$clave]."\n";
}
      </programlisting>
     </example>
     Este ejemplo mostrará:
     <computeroutput>
frutas[d] = limón
frutas[a] = naranja
frutas[c] = manzana
frutas[d] = plátano
     </computeroutput>
     Las frutas han sido ordenadas en orden alfabético y los índices
     asociados con cada elemento se han mantenido.
    </para>
    <para>
     Vea también: <function>arsort</function>, <function>rsort</function>,
     <function>ksort</function>, y <function>sort</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.compact">
   <refnamediv>
    <refname>compact</refname>
    <refpurpose>
     Crea una matriz que contiene variables y sus valores
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>array <function>compact</function></funcdef>
     <paramdef><parameter>string nombrevar | array
     nombrevars</parameter></paramdef>
     <paramdef>
      <parameter><optional>...</optional></parameter>
     </paramdef>
    </funcsynopsis>

    <para>
     <function>compact</function> toma un número variable de parámetros.
     Cada uno puede ser tanto una cadena que contiene el nombre
     de la variable, como una matriz de nombres de variable. La 
     matriz puede contener otras matrices de nombres de variable
     en su interior; <function>compact</function> los procesa
     recursivamente.
    </para>
    <para>
     Para cada uno de estos, <function>compact</function> busca una 
     variable con dicho nombre en la tabla de símbolos y la añade a
     la matriz de salida de modo que el nombre de la variable es la
     clave y el contenido de ésta es el valor para dicha clave. Para
     resumir, hace lo contrario de <function>extract</function>.
     Devuelve la matriz de salida con las variables añadidas a la misma.
    </para>
    <para>
     <example>
      <title>Ejemplo de <function>compact</function></title>
      <programlisting role="php">
$ciudad = "San Francisco";
$estado = "CA";
$evento = "SIGGRAPH";

$location_vars = array ("ciudad", "estado");

$resultado = compact ("evento", $location_vars);
      </programlisting>
      <para>
       Tras esto, $resultado valdrá array ("evento" => "SIGGRAPH",
       "ciudad" => "San Francisco", "estado" => "CA").
      </para>
     </example>
    </para>
    <para>
     Vea también: <function>extract</function>.
     <note>
      <para>
       Esta función fue añadida en el PHP 4.0.
      </para>
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.count">
   <refnamediv>
    <refname>count</refname>
    <refpurpose>Cuenta los elementos de una variable</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>count</function></funcdef>
     <paramdef>mixed <parameter>var</parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve el número de elementos en <parameter>var</parameter>,
     que típicamente es una matriz (porque cualquier otra cosa tendría
     sólo un elemento).
    </para>
    <para>
     Devuele 1 si la variable no es una matriz.
    </para>
    <para>
     Devuelve 0 si la variable no tiene valor.
     <warning>
      <para>
       <function>count</function> puede devolver 0 para una variable
       sin valor, pero también puede devolver 0 para una variable
       ya inicializada pero con una matriz vacía. Utilice
       <function>isset</function> para comprobar si una variable está
       inicializada.
      </para>
     </warning>
    </para>
    <para>
     Vea también: <function>sizeof</function>,
     <function>isset</function>, y
     <function>is_array</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.current">
   <refnamediv>
    <refname>current</refname>
    <refpurpose>Devuelve el elemento actual de una matriz</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>mixed <function>current</function></funcdef>
     <paramdef>array <parameter>matriz</parameter></paramdef>
    </funcsynopsis>
    <para>
     Cada matriz tiene un puntero interno al elemento "actual", que se
     inicializa al primer elemento insertado en la misma.
    </para>
    <para>
     La función <function>current</function> simplemente devuelve el
     elemento de la tabla al que apunta el puntero interno. No mueve
     el puntero de ninguna manera. Si el puntero interno apunta fuera
     del final de la lista de elementos, <function>current</function>
     devuelve false.
     <warning>
      <para>
       Si la matriz contiene elementos vacíos (0 ó "", la cadena
       vacía) esta función devolverá false también para dichos
       elementos. Esto hace imposible determinar si se está realmente
       al final de la lista en tales matrices usando <function>current</function>.
       Para recorrer adecuadamente una matriz que pueda contener elementos
       vacíos, utilice la función <function>each</function>.
      </para>
     </warning>
    </para>
    <para>
     Vea también: <function>end</function>, <function>next</function>,
     <function>prev</function> y <function>reset</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.each">
   <refnamediv>
    <refname>each</refname> 
    <refpurpose>
     Devuelve el siguiente par clave/valor de una matriz
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>array <function>each</function></funcdef>
     <paramdef>array <parameter>matriz</parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve el par clave/valor actual para la 
     <parameter>matriz</parameter> y avanza el cursor de la
     misma. Esta pareja se devuele en una matriz de 4 elementos,
     con las claves 
     <emphasis>0</emphasis>, <emphasis>1</emphasis>,
     <emphasis>key</emphasis>, y
     <emphasis>value</emphasis>. Los elementos <emphasis>0</emphasis> y
     <emphasis>key</emphasis> contienen el nombre de clave
     del elemento de la matriz, y <emphasis>1</emphasis> y
     <emphasis>value</emphasis> contienen los datos.
    </para>
    <para>
     Si el puntero interno para la matriz apunta pasado el final del
     contenido de la matriz, <function>each</function> devuelve false.
    </para>
    <para>
     <example>
      <title>Ejemplos de <function>each</function></title>
      <programlisting role="php">
$chorrada = array ("bob", "fred", "jussi", "jouni", "egon", "marliese");
$tonteria = each ($chorrada);
      </programlisting>
      <para>
       <literal>$tonteria</literal> contiene ahora los siguientes pares
       clave/valor:
       <itemizedlist spacing="compact">
        <listitem><simpara>0 => 0</simpara></listitem>
        <listitem><simpara>1 => 'bob'</simpara></listitem>
        <listitem><simpara>key => 0</simpara></listitem>
        <listitem><simpara>value => 'bob'</simpara></listitem>
       </itemizedlist>

       <programlisting role="php">
$chorrada = array ("Robert" => "Bob", "Seppo" => "Sepi");
$tonteria = each ($chorrada);
       </programlisting>
      </para>
      <para>
       <literal>$tonteria</literal> contiene ahora los siguientes pares
       clave/valor:
       <itemizedlist spacing="compact">
        <listitem><simpara>0 => 'Robert'</simpara></listitem>
        <listitem><simpara>1 => 'Bob'</simpara></listitem>
        <listitem><simpara>key => 'Robert'</simpara></listitem>
        <listitem><simpara>value => 'Bob'</simpara></listitem>
       </itemizedlist>
      </para>
     </example>
    </para>
      
    <para>
     <function>each</function> se usa normalmente de forma conjunta a
     <function>list</function> para recorrer una matriz; por ejemplo,
     $HTTP_POST_VARS: 
     <example>
      <title>
       Recorriendo $HTTP_POST_VARS con <function>each</function>
      </title>
      <programlisting role="php">
echo "Valores enviados con el método POST:&lt;br&gt;";
reset ($HTTP_POST_VARS);
while (list ($clave, $val) = each ($HTTP_POST_VARS)) {
    echo "$clave => $val&lt;br&gt;";
}
      </programlisting>
     </example>
    </para>

    <para>
     Cuando se ha ejecutado <function>each</function>, el cursor de la
     matriz quedará en el siguiente elemento de la misma, o en el 
     último si llega al final de ésta.
    </para>
    <para>
     Vea también: <function>key</function>, <function>list</function>,
     <function>current</function>, <function>reset</function>,
     <function>next</function>, y <function>prev</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.end">
   <refnamediv>
    <refname>end</refname>
    <refpurpose>
     Mueve el puntero interno de una tabla al último elemento
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef><function>end</function></funcdef>
     <paramdef>array <parameter>matriz</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>end</function> avanza el puntero interno de la 
     <parameter>matriz</parameter> al último elemento.
    </para>
    <para>
     Vea también: <function>current</function>,
     <function>each</function>, <function>end</function>,
     <function>next</function>, y <function>reset</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.extract">
   <refnamediv>
    <refname>extract</refname>
    <refpurpose>
     Importa variables a la tabla de símbolos desde una matriz
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>void <function>extract</function></funcdef>
     <paramdef>array <parameter>matriz_vars</parameter></paramdef>
     <paramdef>int 
      <parameter><optional>tipo_extraccion</optional></parameter>
     </paramdef>
     <paramdef>string 
      <parameter><optional>prefijo</optional></parameter>
     </paramdef>
    </funcsynopsis>
    <para>
     Esta función se utiliza para importar variables desde una matriz
     a la tabla de símbolos actual. Toma la matriz asoiativa
     <parameter>matriz_vars</parameter> y trata las claves como nombres
     de variable y los valores como los valores de éstas. Para cada
     par clave/valor creará una variable en la tabla de símbolos actual,
     sujeto a los parámetros <parameter>tipo_extraccion</parameter> y
     <parameter>prefijo</parameter>.
    </para>
    <para>
     <function>extract</function> controla las colisiones con las
     variables que ya existen. La forma de tratar éstas se determina
     por el <parameter>tipo_extraccion</parameter>. Puede tener únicamente
     uno de los siguientes valores:
     <variablelist>
      <varlistentry>
       <term>EXTR_OVERWRITE</term>
       <listitem>
	<simpara>
	 Si hay colisión, sobreescribe la variable existente.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_SKIP</term>
       <listitem>
	<simpara>
	 Si hay colisión, no sobreescribas la variable existente.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_PREFIX_SAME</term>
       <listitem>
	<simpara>Si hay una colisión, añade el <parameter>prefijo</parameter>
	a la nueva variable.
	</simpara>
       </listitem>
      </varlistentry>
      <varlistentry>
       <term>EXTR_PREFIX_ALL</term>
       <listitem>
	<simpara>
	 Añade el <parameter>prefijo</parameter> a todas las variables.
	</simpara>
       </listitem>
      </varlistentry>
     </variablelist>
    </para>
    <para>
     Si no se especifica <parameter>tipo_extraccion</parameter>, se asume que
     vale EXTR_OVERWRITE.
    </para>
    <para>
     Nótese que el <parameter>prefijo</parameter> sólo se necisita si
     <parameter>tipo_extraccion</parameter> vale EXTR_PREFIX_SAME o
     EXTR_PREFIX_ALL.
    </para>
    <para>
     <function>extract</function> comprueba si cada clave es un nombre
     válido de variable, y sólo lo importa si lo es.
    </para>
    <note>
     <para>
      N.T.: En el caso español, no valdría "año" como nombre variable
      (pero sí como clave en una matriz cualquiera).
     </para>
    </note>
    <para>
     Un uso posible para extract sería importar en la tabla de símbolos
     las variables contenidas en la matriz asociativa que devuelve
     <function>wddx_deserialize</function>.
    </para>
    <para>
     <example>
      <title>Ejemplo de <function>Extract</function></title>
      <programlisting role="php">
&lt;php?

/* Suponemos que $matriz_var es una matriz devuelta por 
   wddx_deserialize */

$tamano = "grande";
$matriz_var = array ("color" => "azul",
                    "tamano"  => "media",
                    "forma" => "esfera");
extract ($matriz_var, EXTR_PREFIX_SAME, "wddx");

print "$color, $tamano, $forma, $wddx_tamano\n";

?>
      </programlisting>
     </example>
    </para>
    <para>
     El programa anterior producirá:
     <programlisting>
azul, grande, esfera, media
     </programlisting>
    </para>
    <para>
     La variable $tamano no fue sobreescrita porque especificamos
     EXTR_PREFIX_SAME, que provocó la creación de $wddx_tamano.
     Si se hubiera especificado EXTR_SKIP, $wddx_tamano ni siquiera
     habría sido creada. EXTR_OVERWRITE habría provocado que $tamano 
     tuviera el valor "media", y EXTR_PREFIX_ALL habría provocado que
     aparecieran nuevas variables llamadas $wddx_color, $wddx_tamano,
     y $wddx_forma.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.in-array">
   <refnamediv>
    <refname>in_array</refname>
    <refpurpose>Devuelve true si un valor está en una matriz</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>bool in_array</funcdef>
     <paramdef>mixed <parameter>aguja</parameter></paramdef>
     <paramdef>array <parameter>pajar</parameter></paramdef>
    </funcsynopsis>
    <para>
     Busca la <parameter>aguja</parameter> en el <parameter>pajar</parameter>,
     y devuelve true si se encuentra y false en caso contrario.
    </para>
    <para>
     <example>
      <title>Ejemplo de <function>in_array</function></title>
      <programlisting role="php">
$os = array ("Mac", "NT", "Irix", "Linux");
if (in_array ("Irix", $os))
    print "Encontrado Irix";
      </programlisting>
     </example>
     <note>
      <para>
       Esta función fue añadida en el PHP 4.0.
      </para> 
     </note>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.key">
   <refnamediv>
    <refname>key</refname>
    <refpurpose>Obtiene una clave de una matriz asociativa</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>mixed <function>key</function></funcdef>
     <paramdef>array <parameter>matriz</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>key</function> devuelve el elemento índice de la posición
     actual en la matriz.
    </para>
    <para>
     Vea también: <function>current</function>, <function>next</function>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.krsort">
   <refnamediv>
    <refname>krsort</refname>
    <refpurpose>Ordena una matriz por clave en orden inverso</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>krsort</function></funcdef>
     <paramdef>array <parameter>matriz</parameter></paramdef>
    </funcsynopsis>
    <para>
     Ordena una matriz por clave en orden inverso, manteniendo las correlaciones
     clave a dato. Esto es útil principalmente en matrices asociativas.
     <example>
      <title>Ejemplo de <function>krsort</function></title>
      <programlisting role="php">
$frutas = array ("d"=>"limón", "a"=>"naranja", "b"=>"plátano", "c"=>"manzana");
krsort ($frutas);
for (reset ($frutas); $clave = key ($frutas); next ($frutas)) {
    echo "frutas[$clave] = ".$frutas[$clave]."\n";
}
      </programlisting>
     </example>
     Este ejemplo mostrará:
     <computeroutput>
frutas[d] = limón
frutas[c] = manzana
frutas[b] = plátano
frutas[a] = naranja
     </computeroutput>
    </para>
    <simpara>
     Vea también: <function>asort</function>, <function>arsort</function>,
     <function>ksort</function> <function>sort</function>, y
     <function>rsort</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.ksort">
   <refnamediv>
    <refname>ksort</refname>
    <refpurpose>Ordena una matriz por clave</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ksort</function></funcdef>
     <paramdef>array <parameter>matriz</parameter></paramdef>
    </funcsynopsis>
    <para>
     Ordena una matriz por clave, manteniendo las correlaciones clave a
     dato. Esto es útil principalmente en matrices asociativas.
     <example>
      <title>Ejemplo de <function>ksort</function></title>
      <programlisting role="php">
$frutas = array ("d"=>"limón", "a"=>"naranja", "b"=>"plátano", "c"=>"manzana");
ksort ($frutas);
for (reset ($frutas); $clave = key ($frutas); next ($frutas)) {
    echo "frutas[$clave] = ".$frutas[$clave]."\n";
}
      </programlisting>
     </example>
     Este ejemplo mostrará:
     <computeroutput>
frutas[a] = naranja
frutas[b] = plátano
frutas[c] = manzana
frutas[d] = limón
     </computeroutput>
    </para>
    <simpara>
     Vea también: <function>asort</function>, <function>arsort</function>, 
     <function>sort</function>, y <function>rsort</function>.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.list">
   <refnamediv>
    <refname>list</refname>
    <refpurpose>
     Asigna variables como si fueran una matriz
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>void <function>list</function></funcdef>
     <varargs/>
    </funcsynopsis>
    <para>
     Como <function>array</function>, esta no es realmente una función,
     sino una construcción del lenguaje. <function>list</function> se 
     usa para asignar una lista de variables en una sola operación.
     <example>
      <title>Ejemplo de <function>list</function></title>
      <programlisting role="php">
&lt;table>
 &lt;tr>
  &lt;th>Nombre empleado&lt;/th>
  &lt;th>Sueldo&lt;/th>
 &lt;/tr>

&lt;?php

$resultado = mysql($conn, "SELECT id, nombre, salario FROM empleados");
while (list($id, $nombre, $salario) = mysql_fetch_row($resultado)) {
    print(" &lt;tr>\n".
          "  &lt;td>&lt;a href=\"info.php3?id=$id\">$nombre&lt;/a>&lt;/td>\n".
          "  &lt;td>$salario&lt;/td>\n".
          " &lt;/tr>\n");
}

?>

&lt;/table>
      </programlisting>
     </example>
    </para>
    <para>
     Vea también: <function>each</function>, <function>array</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.next">
   <refnamediv>
    <refname>next</refname>
    <refpurpose>
     Avanza el puntero interno de una matriz
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>mixed <function>next</function></funcdef>
     <paramdef>array <parameter>matriz</parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve el elemento de la matriz que ocupa el lugar siguiente
     al apuntado por el puntero interno, o false si no hay más elementos.
    </para>
    <para>
     <function>next</function> se comporta como
     <function>current</function>, con una diferencia. Avanza el puntero
     interno de la matriz en una posición antes de devolver el elemento.
     Eso significa que devuelve el siguiente elemento de la matriz y 
     que avanza el puntero interno en uno. Si al avanzar se pasa del
     final de la lista de elementos, <function>next</function> devuelve false.
     <warning>
      <para>
       Si la matriz contiene elementos vacíos, esta función también
       devolverá false para dichos elementos. Para recorrer adecuadamente
       una matriz que pueda contener elementos vacíos, vea la función
       <function>each</function>.
      </para>
     </warning>
    </para>
    <para>
     Vea también:
     <function>current</function>, <function>end</function>
     <function>prev</function> y <function>reset</function>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.pos">
   <refnamediv>
    <refname>pos</refname>
    <refpurpose>Obtiene el elemento actual de una matriz</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>mixed <function>pos</function></funcdef>
     <paramdef>array <parameter>matriz</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Este es un alias para <function>current</function>.
    </simpara>
    <para>
     Vea también:
     <function>end</function>, <function>next</function>,
     <function>prev</function> y <function>reset</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.prev">
   <refnamediv>
    <refname>prev</refname>
    <refpurpose>Rebobina el puntero interno de una matriz</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>mixed <function>prev</function></funcdef>
     <paramdef>array <parameter>matriz</parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve el elemento de la matriz que está en la posición anterior a 
     la que apuntaba previamente el puntero interno, o false si no hay más 
     elementos.
     <warning>
      <para>
       Si la matriz contiene elementos vacíos, esta función también
       devolverá false para dichos elementos. Para recorrer adecuadamente
       una matriz que puede contener elementos vacíos, vea la función
       <function>each</function>.
      </para>
     </warning>
    </para>
    <para>  
     <function>prev</function> se comporta igual que 
     <function>next</function>, excepto que rebobina el puntero
     interno una posición en lugar de avanzarlo.
    </para>
    <para>
     Vea también: <function>current</function>, <function>end</function>
     <function>next</function> y <function>reset</function>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.range">
   <refnamediv>
    <refname>rango</refname>
    <refpurpose>
     Crea una matriz que contiene un rango de enteros
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>array <function>rango</function></funcdef>
     <paramdef>int <parameter>bajo</parameter></paramdef>
     <paramdef>int <parameter>alto</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>rango</function> devuelve una matriz de enteros
     desde <parameter>bajo</parameter> hasta <parameter>alto</parameter>,
     ambos inclusive.
    </para>
    <para>
     Vea un ejemplo de su uso en la función <function>shuffle</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.reset">
   <refnamediv>
    <refname>reset</refname>
    <refpurpose>
     Fija el puntero interno de una matriz a su primer elemento
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>mixed <function>reset</function></funcdef>
     <paramdef>array <parameter>matriz</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>reset</function> rebobina el puntero interno de la
     <parameter>matriz</parameter> a su primer elemento.
    </para>
    <para>
     <function>reset</function> devuelve el valor del primer elemento
     de la matriz.
    </para>
    <para>
     Vea también: <function>current</function>,
     <function>each</function>, <function>next</function>,
     <function>prev</function>, y <function>reset</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.rsort">
   <refnamediv>
    <refname>rsort</refname>
    <refpurpose>Ordena una matriz en orden inverso</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>void <function>rsort</function></funcdef>
     <paramdef>array <parameter>matriz</parameter></paramdef>
    </funcsynopsis>
    <para>
     Esta función ordena una matriz en orden inverso (mayor a menor).
     <example>
      <title>Ejemplo de <function>rsort</function></title>
	<programlisting role="php">
$frutas = array ("limón", "naranja", "plátano", "manzana");
rsort ($frutas);
for (reset ($frutas); list ($clave, $valor) = each ($frutas); ) {
    echo "frutas[$clave] = ", $valor, "\n";
}
      </programlisting>
     </example>
     Este ejemplo mostrará:
     <computeroutput>
frutas[0] = plátano
frutas[1] = naranja
frutas[2] = manzana
frutas[3] = limón
     </computeroutput>
     Las frutas han sido ordenadas en orden alfabético inverso.
    </para>
    <para>
     Vea también: <function>arsort</function>,
     <function>asort</function>, <function>ksort</function>,
     <function>sort</function>, y <function>usort</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.shuffle">
   <refnamediv>
    <refname>shuffle</refname>
    <refpurpose>Mezcla una matriz</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>void <function>shuffle</function></funcdef>
     <paramdef>array <parameter>matriz</parameter></paramdef>
    </funcsynopsis>
    <para>
     Esta función mezcla (cambia aleatoriamente el orden de los elementos
     de) una matriz.
     <example>
      <title>Ejemplo de <function>shuffle</function></title>
      <programlisting role="php">
$numeros = range (1,20);
srand (time());
shuffle ($numeros);
while (list(, $numero) = each ($numeros)) {
    echo "$numero ";
}
      </programlisting>
     </example>
    </para>
    <para>
     Vea también: <function>arsort</function>, <function>asort</function>,
     <function>ksort</function>, <function>rsort</function>,
     <function>sort</function> y <function>usort</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sizeof">
   <refnamediv>
    <refname>sizeof</refname>
    <refpurpose>Obtiene el número de elementos de una matriz</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>sizeof</function></funcdef>
     <paramdef>array <parameter>matriz</parameter></paramdef>
    </funcsynopsis>
    <para>
     Devueve el número de elementos de la matriz.
    </para>
    <para>
     Vea también: <function>count</function>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.sort">
   <refnamediv>
    <refname>sort</refname>
    <refpurpose>Ordena una matriz</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>void <function>sort</function></funcdef>
     <paramdef>array <parameter>matriz</parameter></paramdef>
    </funcsynopsis>
    <para>
     Esta función ordena una matriz. Los elementos estarán ordenados
     de menor a mayor cuando la función termine.
     <example>
      <title>Ejemplo de <function>sort</function></title>
	<programlisting role="php">
$frutas = array ("limón", "naranja", "plátano", "manzana");
sort ($frutas);
for (reset ($frutas); $clave = key ($frutas); next ($frutas)) {
    echo "frutas[$clave] = ".$frutas[$clave]."\n";
}
      </programlisting>
     </example>
     Este ejemplo mostrará:
     <computeroutput>
frutas[0] = limón
frutas[1] = manzana
frutas[2] = naranja
frutas[3] = plátano
     </computeroutput>
     Las frutas han sido ordenadas en orden alfabético.
    </para>
    <para>
     Vea también: <function>arsort</function>,
     <function>asort</function>, <function>ksort</function>,
     <function>rsort</function>, y <function>usort</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.uasort">
   <refnamediv>
    <refname>uasort</refname>
    <refpurpose>
     Ordena una matriz mediante una función de comparación 
     definida por el usuario y mantiene la asociación de índices
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>void <function>uasort</function></funcdef>
     <paramdef>array <parameter>matriz</parameter></paramdef>
     <paramdef>function <parameter>func_comparar</parameter></paramdef>
    </funcsynopsis>
    <para>
     Esta función ordena una matriz de modo que los índices de la misma
     mantengan su correlación con los elementos a los que están asociados.
     Esto se utiliza principalmente para ordenar matrices asociativas
     en las que el orden de los elementos es importante. La función
     de comparación viene definida por el usuario.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.uksort">
   <refnamediv>
    <refname>uksort</refname>
    <refpurpose>
     Ordena una matriz por claves mediante una función definida por el usuario
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>void <function>uksort</function></funcdef>
     <paramdef>array <parameter>matriz</parameter></paramdef>
     <paramdef>function <parameter>func_comparar</parameter></paramdef>
    </funcsynopsis>
    <para>
     Esta función ordenará las claves de una matriz utilizando una función
     de comparación suministrada por el usuario. Si la matriz a ordenar 
     necesita utilizar un criterio poco trivial, esta es la función que
     deberá usar.

     <example>
      <title>Ejemplo de <function>uksort</function></title>
      <programlisting role="php">
function micomparar ($a, $b) {   
    if ($a == $b) return 0;
    return ($a > $b) ? -1 : 1;
}
$a = array (4 => "cuatro", 3 => "tres", 20 => "veinte", 10 => "diez");
uksort ($a, micomparar);
while (list ($clave, $valor) = each ($a)) {
    echo "$clave: $valor\n";
}
      </programlisting>
     </example>
     Este ejemplo mostrará:
     <computeroutput>
20: veinte
10: diez
4: cuatro
3: tres
     </computeroutput>
    </para>
    <para>
     Vea también: <function>arsort</function>,
     <function>asort</function>, <function>uasort</function>,
     <function>ksort</function>, <function>rsort</function>, y
     <function>sort</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.usort">
   <refnamediv>
    <refname>usort</refname>
    <refpurpose>
     Ordena una matriz por valores mediante una funcion definida por el usuario
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>void <function>usort</function></funcdef>
     <paramdef>array <parameter>matriz</parameter></paramdef>
     <paramdef>function <parameter>func_comparar</parameter></paramdef>
    </funcsynopsis>
    <para>
     Esta función ordenará una matriz por sus valores utilizando una
     función suministrada por el usuario. Si la matriz que desea ordenar
     necesita utilizar un criterio poco trivial, esta es la función que
     deberá usar.
    </para>
    <para>
     La función de comparación deberá devolver un entero menor, igual,
     o mayor que cero, si el primer argumento se considera respectivamente
     menor que, igual que, o mayor que el segundo. Si dos miembros 
     resultan ser iguales, su orden en la matriz ordenada será cualquiera.
     <example>
      <title>Ejemplo de <function>usort</function></title>
      <programlisting>
function cmp ($a, $b) {   
    if ($a == $b) return 0;
    return ($a > $b) ? -1 : 1;
}
$a = array (3, 2, 5, 6, 1);
usort ($a, cmp);
while (list ($clave, $valor) = each ($a)) {
    echo "$clave: $valor\n";
}
      </programlisting>
     </example>
     Este ejemplo mostrará:
     <computeroutput>
0: 6
1: 5
2: 3
3: 2
4: 1
     </computeroutput>
     <note>
      <para>
       Obviamente en este caso trivial la función <function>rsort</function>
       habría sido más apropiada.
      </para>
     </note>
     <warning>
      <para>
       La función quicksort subyacente en ciertas librerías de C (tales
       como las de Solaris) pueden hacer que el PHP falle si la función de
       comparación no devuelve valores consistentes.
      </para>
     </warning>
    </para>
    <para>
     Vea también: <function>arsort</function>,
     <function>asort</function>, <function>ksort</function>,
     <function>rsort</function> y <function>sort</function>.
    </para>
   </refsect1>
  </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
