 <reference id="ref.sem">
  <title>Funciones Sem&aacute;foro y de memoria compartida</title>
  <titleabbrev>Semaphore</titleabbrev>
  <partintro>
  <para>
   Este m&oacute;dulo provee funciones sem&aacute;foro utilizando los semaforos de System V.
   Los sem&aacute;foros pueden usarse para obtener acceso exclusivo a algun recurso del
   ordenador en cuesti&oacute;n, o para limitar el n&uacute;mero de procesos que pueden usar
   un recurso simultaneamente.</para>
  <para>
   Este m&oacute;dulo provee tambien funciones de memoria compartida, usando el
   compartimiento de memoria de System V. La memoria compartida puede usarse para proveer
   acceso a variables globales. Los diferentes demonios http e incluso otros programas,
   (como Perl, C, ...) son capaces de utilizar estos datos, para intercambiarlos de
   modo global. Recuerde que, la memoria compartida NO es segura para los
   accesos simult&aacute;neos. Use los sem&aacute;foros para obtener sincronismo.

    <table>
     <title>Limites de la memoria compartida del SO Unix</title>
     <tgroup cols="2">
      <tbody>
       <row>
	<entry>SHMMAX</entry> 
	<entry>m&aacute;ximo tama&ntilde;o de memoria compartida, normalmente 131072
	bytes</entry>
       </row>
       <row>
	<entry>SHMMIN</entry>
	<entry>minimo tama&ntilde;o de memoria compartida, por lo general 1 byte</entry>
       </row>
       <row>
	<entry>SHMMNI</entry> 
	<entry>m&aacute;xima cantidad de segmentos de memoria compartida, normalmente
	100</entry>
       </row>
       <row>
	<entry>SHMSEG</entry>
	<entry>m&aacute;ximo de memoria compartida por proceso, normalmente
	6</entry>
       </row>
      </tbody>
     </tgroup>
    </table></para>

  </partintro>

  <refentry id="function.sem-get">
   <refnamediv>
    <refname>sem_get</refname>
    <refpurpose>obtiene la identificacion de un sem&aacute;foro (semaphore id)</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>sem_get</function></funcdef>
     <paramdef>int <parameter>key</parameter></paramdef>
     <paramdef>int <parameter><optional>max_acquire</optional>
      </parameter></paramdef>
     <paramdef>int <parameter><optional>perm</optional>
      </parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve: Un identificador positivo de sem&aacute;foro en caso de &eacute;xito, o falso en caso de
     error.</para>
    <para>
     <function>sem_get</function> Devuelve un id que puede usarse para acceder
     al sem&aacute;foro de System V con la llave dada.  El sem&aacute;foro se usa si es necesario
     usando los bits de permisos especificados en perm (por defecto 0666). El n&uacute;mero
     de procesos que pueden adquirir el sem&aacute;foro simult&aacute;neamente, se define en max_acquire
     (por defecto es 1).  Actualmente este valor se fija s&oacute;lo si el proceso determina que
     es el &uacute;nico relacionado actualmente al sem&aacute;foro.</para>
    <para>
     Una segunda llamada a <function>sem_get</function> para la misma llave, devolver&aacute;
     un id de sem&aacute;foro diferente, pero con ambos identificadoes, se acceder&aacute; al mismo
     sem&aacute;foro.</para>
    <para> 
     V&eacute;ase tambi&eacute;n: <function>sem_acquire</function> y
     <function>sem_release</function>.</para>
   </refsect1>
  </refentry>

  <refentry id="function.sem-acquire">
   <refnamediv>
    <refname>sem_acquire</refname>
    <refpurpose>adquiere un sem&aacute;foro, lo toma para s&iacute;</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>sem_acquire</function></funcdef>
     <paramdef>int <parameter>sem_identifier</parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve: Verdadero si hay &eacute;xito, falso si hay errores</para>
    <para>
     <function>sem_acquire</function> Produce un bloqueo (de ser necesario) hasta que el sem&aacute;foro puede
     adquirirse.  Un proceso intentando adquirir un sem&aacute;foro ya adquirido, se bloquear&aacute; permanentemente si
     adquiriendo el sem&aacute;foro, excede su valor de max_acquire.</para>
    <para>
     Despues de procesar una petici&oacute;n, cualquier sem&aacute;foro adquirido por un proceso, que no sea expl&iacute;citamente
     liberado, ser&aacute; liberado autom&ntilde;aticamente, generando un mensaje de alerta.</para>
    <para> 
     V&eacute;ase tambien: <function>sem_get</function> and
               <function>sem_release</function>.</para>
   </refsect1>
  </refentry>

  <refentry id="function.sem-release">
   <refnamediv>
    <refname>sem_release</refname>
    <refpurpose>release a semaphore</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>sem_release</function></funcdef>
     <paramdef>int <parameter>sem_identifier</parameter></paramdef>
    </funcsynopsis>
    <para>
     Returns: true on success, false on error</para>
    <para>
     <function>sem_release</function> releases the semaphore if it
     is currently acquired by the calling process, otherwise
     a warning is generated.</para>
    <para>
      After releasing the semaphore, <function>sem_acquire</function>
      may be called to re-acquire it.</para>
    <para>
     V&eacute;ase tambien: <function>sem_get</function> y
               <function>sem_acquire</function>.</para>
   </refsect1>
  </refentry>

  <refentry id="function.shm-attach">
   <refnamediv>
    <refname>shm_attach</refname>
    <refpurpose>Crea o abre un segmento de memoria compartida</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>shm_attach</function></funcdef>
     <paramdef>int <parameter>key</parameter></paramdef> 
     <paramdef>int
     <parameter><optional>memsize</optional></parameter></paramdef>
     <paramdef>int
     <parameter><optional>perm</optional></parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>shm_attach</function> devuelve un identificador que
     puede usarse para acceder a la memoria compartida de SystemV, con
     la llave dada, la primera llamada crear&aacute; el segmento de memoria compartida
     con mem_size de tama&ntilde;o (por defecto: sysvshm.init_mem en el <link linkend="configuration.file">archivo de configuraci&oacute;n</link>, o bien de
     10000 bytes) y los bits de permiso mas apropiados (por defecto: 0666).</para>
    <para>
     Una segunda llamada a <function>shm_attach</function> con la misma
     <parameter>llave</parameter> devolvera un id diferente de memoria compartida,
     pero ambos identificadores acceden a la misma porci&oacute;n de memoria compartida.
     <parameter>memsize</parameter> y
     <parameter>perm</parameter> ser&aacute;n ignorados.</para>
   </refsect1>
  </refentry>

  <refentry id="function.shm-detach">
   <refnamediv>
    <refname>shm_detach</refname>
    <refpurpose>Finaliza conexi&oacute;n con un segmento de memoria compartida</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>shm_detach</function></funcdef>
     <paramdef>int <parameter>shm_identifier</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>shm_detach</function> finaliza la conexi&oacute;n con la memoria compartida,
     especificada por el identificador <parameter>shm_identifier</parameter> creado con
     <function>shm_attach</function>. Hay que recordar que la memoria compartida a&uacute;n existe en el sistema Unix, y
     los datos a&uacute;n est&aacute;n presentes.</para>
   </refsect1>
  </refentry>

  <refentry id="function.shm-remove">
   <refnamediv>
    <refname>shm_remove</refname> 
    <refpurpose>Elimina memoria compartida del sistma Unix</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>shm_remove</function></funcdef>
     <paramdef>int <parameter>shm_identifier</parameter></paramdef>
    </funcsynopsis>
    <para>
     Elimina la memoria compartida de un sistema Unix, Todos los datos ser&aacute;n destru&iacute;dos.</para>
   </refsect1>
  </refentry>

  <refentry id="function.shm-put-var">
   <refnamediv>
    <refname>shm_put_var</refname> 
    <refpurpose>Inserta o actualiza una variable en la memoria compartida</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>shm_put_var</function></funcdef>
     <paramdef>int <parameter>shm_identifier</parameter></paramdef>
     <paramdef>int <parameter>variable_key</parameter></paramdef>
     <paramdef>mixed <parameter>variable</parameter></paramdef>
    </funcsynopsis>
    <para>
     Inserta o actualiza una <parameter>variable</parameter> con una llave
     <parameter>variable_key</parameter>. Son v&aacute;lidos todos los tipos de variable (doble,
     entera, cadena, arreglo).</para>
   </refsect1>
  </refentry>

  <refentry id="function.shm-get-var">
   <refnamediv>
    <refname>shm_get_var</refname> 
    <refpurpose>Devuelve una variable de la memoria compartida
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>mixed <function>shm_get_var</function></funcdef>
     <paramdef>int <parameter>id</parameter></paramdef>
     <paramdef>int <parameter>variable_key</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>shm_get_var</function> devuelve la variable con la llave
     <parameter>variable_key</parameter> dada. La variable, queda presente en la memoria compartida.</para>
   </refsect1>
  </refentry>

  <refentry id="function.shm-remove-var">
   <refnamediv>
    <refname>shm_remove_var</refname> 
    <refpurpose>Elimina una variable de la memoria compartida
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>shm_remove_var</function></funcdef>
     <paramdef>int <parameter>id</parameter></paramdef>
     <paramdef>int <parameter>variable_key</parameter></paramdef>
    </funcsynopsis>
    <para>
     Elimina la varible que se corresponde con la llave <parameter>variable_key</parameter> dada,
     liberando la memoria que ocupaba aquella.</para>
   </refsect1>
  </refentry>

</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
