 <reference id="ref.sem">
  <title>Funciones Semáforo y de memoria compartida</title>
  <titleabbrev>Semaphore</titleabbrev>
  <partintro>
  <para>
   Este módulo provee funciones semáforo utilizando los semaforos de System V.
   Los semáforos pueden usarse para obtener acceso exclusivo a algun recurso del
   ordenador en cuestión, o para limitar el número de procesos que pueden usar
   un recurso simultaneamente.</para>
  <para>
   Este módulo provee tambien funciones de memoria compartida, usando el
   compartimiento de memoria de System V. La memoria compartida puede usarse para proveer
   acceso a variables globales. Los diferentes demonios http e incluso otros programas,
   (como Perl, C, ...) son capaces de utilizar estos datos, para intercambiarlos de
   modo global. Recuerde que, la memoria compartida NO es segura para los
   accesos simultáneos. Use los semáforos para obtener sincronismo.

    <table>
     <title>Limites de la memoria compartida del SO Unix</title>
     <tgroup cols="2">
      <tbody>
       <row>
	<entry>SHMMAX</entry> 
	<entry>máximo tamaño de memoria compartida, normalmente 131072
	bytes</entry>
       </row>
       <row>
	<entry>SHMMIN</entry>
	<entry>minimo tamaño de memoria compartida, por lo general 1 byte</entry>
       </row>
       <row>
	<entry>SHMMNI</entry> 
	<entry>máxima cantidad de segmentos de memoria compartida, normalmente
	100</entry>
       </row>
       <row>
	<entry>SHMSEG</entry>
	<entry>máximo de memoria compartida por proceso, normalmente
	6</entry>
       </row>
      </tbody>
     </tgroup>
    </table></para>

  </partintro>

  <refentry id="function.sem-get">
   <refnamediv>
    <refname>sem_get</refname>
    <refpurpose>obtiene la identificacion de un semáforo (semaphore id)</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>sem_get</function></funcdef>
     <paramdef>int <parameter>key</parameter></paramdef>
     <paramdef>int <parameter><optional>max_acquire</optional>
      </parameter></paramdef>
     <paramdef>int <parameter><optional>perm</optional>
      </parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve: Un identificador positivo de semáforo en caso de éxito, o falso en caso de
     error.</para>
    <para>
     <function>sem_get</function> Devuelve un id que puede usarse para acceder
     al semáforo de System V con la llave dada.  El semáforo se usa si es necesario
     usando los bits de permisos especificados en perm (por defecto 0666). El número
     de procesos que pueden adquirir el semáforo simultáneamente, se define en max_acquire
     (por defecto es 1).  Actualmente este valor se fija sólo si el proceso determina que
     es el único relacionado actualmente al semáforo.</para>
    <para>
     Una segunda llamada a <function>sem_get</function> para la misma llave, devolverá
     un id de semáforo diferente, pero con ambos identificadoes, se accederá al mismo
     semáforo.</para>
    <para> 
     Véase también: <function>sem_acquire</function> y
     <function>sem_release</function>.</para>
   </refsect1>
  </refentry>

  <refentry id="function.sem-acquire">
   <refnamediv>
    <refname>sem_acquire</refname>
    <refpurpose>adquiere un semáforo, lo toma para sí</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>sem_acquire</function></funcdef>
     <paramdef>int <parameter>sem_identifier</parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve: Verdadero si hay éxito, falso si hay errores</para>
    <para>
     <function>sem_acquire</function> Produce un bloqueo (de ser necesario) hasta que el semáforo puede
     adquirirse.  Un proceso intentando adquirir un semáforo ya adquirido, se bloqueará permanentemente si
     adquiriendo el semáforo, excede su valor de max_acquire.</para>
    <para>
     Despues de procesar una petición, cualquier semáforo adquirido por un proceso, que no sea explícitamente
     liberado, será liberado automñaticamente, generando un mensaje de alerta.</para>
    <para> 
     Véase tambien: <function>sem_get</function> and
               <function>sem_release</function>.</para>
   </refsect1>
  </refentry>

  <refentry id="function.sem-release">
   <refnamediv>
    <refname>sem_release</refname>
    <refpurpose>release a semaphore</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>sem_release</function></funcdef>
     <paramdef>int <parameter>sem_identifier</parameter></paramdef>
    </funcsynopsis>
    <para>
     Returns: true on success, false on error</para>
    <para>
     <function>sem_release</function> releases the semaphore if it
     is currently acquired by the calling process, otherwise
     a warning is generated.</para>
    <para>
      After releasing the semaphore, <function>sem_acquire</function>
      may be called to re-acquire it.</para>
    <para>
     Véase tambien: <function>sem_get</function> y
               <function>sem_acquire</function>.</para>
   </refsect1>
  </refentry>

  <refentry id="function.shm-attach">
   <refnamediv>
    <refname>shm_attach</refname>
    <refpurpose>Crea o abre un segmento de memoria compartida</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>shm_attach</function></funcdef>
     <paramdef>int <parameter>key</parameter></paramdef> 
     <paramdef>int
     <parameter><optional>memsize</optional></parameter></paramdef>
     <paramdef>int
     <parameter><optional>perm</optional></parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>shm_attach</function> devuelve un identificador que
     puede usarse para acceder a la memoria compartida de SystemV, con
     la llave dada, la primera llamada creará el segmento de memoria compartida
     con mem_size de tamaño (por defecto: sysvshm.init_mem en el <link linkend="configuration.file">archivo de configuración</link>, o bien de
     10000 bytes) y los bits de permiso mas apropiados (por defecto: 0666).</para>
    <para>
     Una segunda llamada a <function>shm_attach</function> con la misma
     <parameter>llave</parameter> devolvera un id diferente de memoria compartida,
     pero ambos identificadores acceden a la misma porción de memoria compartida.
     <parameter>memsize</parameter> y
     <parameter>perm</parameter> serán ignorados.</para>
   </refsect1>
  </refentry>

  <refentry id="function.shm-detach">
   <refnamediv>
    <refname>shm_detach</refname>
    <refpurpose>Finaliza conexión con un segmento de memoria compartida</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>shm_detach</function></funcdef>
     <paramdef>int <parameter>shm_identifier</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>shm_detach</function> finaliza la conexión con la memoria compartida,
     especificada por el identificador <parameter>shm_identifier</parameter> creado con
     <function>shm_attach</function>. Hay que recordar que la memoria compartida aún existe en el sistema Unix, y
     los datos aún están presentes.</para>
   </refsect1>
  </refentry>

  <refentry id="function.shm-remove">
   <refnamediv>
    <refname>shm_remove</refname> 
    <refpurpose>Elimina memoria compartida del sistma Unix</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>shm_remove</function></funcdef>
     <paramdef>int <parameter>shm_identifier</parameter></paramdef>
    </funcsynopsis>
    <para>
     Elimina la memoria compartida de un sistema Unix, Todos los datos serán destruídos.</para>
   </refsect1>
  </refentry>

  <refentry id="function.shm-put-var">
   <refnamediv>
    <refname>shm_put_var</refname> 
    <refpurpose>Inserta o actualiza una variable en la memoria compartida</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>shm_put_var</function></funcdef>
     <paramdef>int <parameter>shm_identifier</parameter></paramdef>
     <paramdef>int <parameter>variable_key</parameter></paramdef>
     <paramdef>mixed <parameter>variable</parameter></paramdef>
    </funcsynopsis>
    <para>
     Inserta o actualiza una <parameter>variable</parameter> con una llave
     <parameter>variable_key</parameter>. Son válidos todos los tipos de variable (doble,
     entera, cadena, arreglo).</para>
   </refsect1>
  </refentry>

  <refentry id="function.shm-get-var">
   <refnamediv>
    <refname>shm_get_var</refname> 
    <refpurpose>Devuelve una variable de la memoria compartida
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>mixed <function>shm_get_var</function></funcdef>
     <paramdef>int <parameter>id</parameter></paramdef>
     <paramdef>int <parameter>variable_key</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>shm_get_var</function> devuelve la variable con la llave
     <parameter>variable_key</parameter> dada. La variable, queda presente en la memoria compartida.</para>
   </refsect1>
  </refentry>

  <refentry id="function.shm-remove-var">
   <refnamediv>
    <refname>shm_remove_var</refname> 
    <refpurpose>Elimina una variable de la memoria compartida
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>shm_remove_var</function></funcdef>
     <paramdef>int <parameter>id</parameter></paramdef>
     <paramdef>int <parameter>variable_key</parameter></paramdef>
    </funcsynopsis>
    <para>
     Elimina la varible que se corresponde con la llave <parameter>variable_key</parameter> dada,
     liberando la memoria que ocupaba aquella.</para>
   </refsect1>
  </refentry>

</reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
