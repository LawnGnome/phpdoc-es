 <reference id="ref.ifx">
  <title>Funciones para Informix</title>
  <titleabbrev>Informix</titleabbrev>

  <partintro>
   <para>
    El conector para Informix Online (ODS) 7.x, SE 7.x y Universal
    Server (IUS) 9.x se encuentra implementado en "functions/ifx.ec" y
    "functions/php3_ifx.h". Para ODS 7.x está completado, con total
    soporte para columnas de tipo BYTE y TEXT. Para IUS 9.x está
    parcialmente finalizado: los tipos de datos nuevos están allí (en el IUS 9.x),
    pero la funcionalidad para SLOB y CLOB se encuentra bajo construcción todavía.
   </para>
   <note>
   <title>Notas de configuración</title>
   <para></para><para>
    Antes de ejecutar el guión (script) "configure", asegúrate que la variable
    "INFORMIXDIR" ha sido definida.
   </para><para>
    Si ejecutas "configure --with_informix=yes" entonces el guión de
    configuración detectará automáticamente las librerías y los directorios
    include. Puedes obviar esta detección definiendo las variables de entorno
    "IFX_LIBDIR", "IFX_LIBS" y "IFX_INCDIR". Definirás la variable de
    compilación condicional "HAVE_IFX_IUS" si la versión de Informix es 9.00 o
    superior.
   </para>
   </note>
   <note>
  <title>Algunas notas sobre el uso de BLOBs (columnas de tipo TEXT y BYTE)</title>
   <para></para><para>
    BLOBs son normalmente manipulados por enteros, los cuales representan
    identificadores de BLOB.
    Las consultas de selección devuelven un "blob id" para columnas de tipo BYTE y TEXT.
    Si eliges trabajar con los BLOBs en memoria (con: "ifx_blobinfile(0);") entonces
    puedes obtener el contenido con "string_var = ifx_get_blob($blob_id);".
    Si prefieres manipularlos en ficheros usa "ifx_blobinfile(1);" y
    "ifx_get_blob($blob_id);" devolverá el nombre del archivo. En este caso, utiliza
    las funciones habituales de entrada y salida de ficheros para obtener el
    contenido de los blob.
  </para><para>
    Para consultas de inserción y actualización debes crear estos identificadores de blob
    con "ifx_create_blob(..);". Entonces pondrás los identificadores de blob en un
    array y sustituirás en la cadena de la consulta las columnas de tipo blob por
    una interrogación (?).
    Para inserciones y actualizaciones eres responsable de definir el contenido
    de los blob con ifx_update_blob(...).
  </para><para>
    La conducta de columnas BLOB puede ser modificada mediante variables de
    configuración, las cuales pueden ser definidas en tiempo de ejecución
    mediante funciones.
  </para><para>
  </para><para>
       variable de configuración: ifx.textasvarchar
  </para><para>
       variable de configuración: ifx.byteasvarchar
  </para><para>
  </para><para>
    funciones en tiempo de ejecución:
  </para><para>
      ifx_textasvarchar(0): usa identificadores de blob para columnas de tipo TEXT
                            en las consultas de selección
  </para><para>
      ifx_byteasvarchar(0): usa identificadores de blob para columnas de tipo BYTE
                            en las consultas de selección
  </para><para>
      ifx_textasvarchar(1): devuelve columnas de tipo TEXT como si fueran de tipo
                            VARCHAR, sin tener que usar identificadores de blob en
                            las consultas de selección
  </para><para>
      ifx_byteasvarchar(1): devuelve columnas de tipo BYTE como si fueran de tipo
                            VARCHAR, sin tener que usar identificadores de blob en
                            las consultas de selección.
  </para><para>
  </para><para>
    variable de configuración: ifx.blobinfile
  </para><para>
    función en tiempo de ejecución:
  </para><para>
     ifx_blobinfile_mode(0): devuelve columnas de tipo BYTE en memoria, el
                             identificador de blob te permite obtener el contenido.
  </para><para>
     ifx_blobinfile_mode(1): devuelve columnas de tipo BYTE en un fichero, el
                             identificador te permite saber el nombre de dicho archivo.
  </para><para>
    Si defines ifx_text/byteasvarchar a 1 entonces puedes usar columnas de tipo
    TEXT y BYTE en las consultas de selección como campos de tipo VARCHAR, pero
    teniendo en cuenta que tendrán un mayor tamaño que el habitual.
    Ya que en PHP todas las cadenas son posibles, esto permite datos
    binarios. De esta forma, se pueden manejar correctamente. La información devuelta
    puede contener cualquier cosa, tú eres responsable del contenido.
  </para><para>
    Si defines ifx_blobinfile a 1, utiliza el nombre del archivo devuelto por
    ifx_get_blob(..) para acceder a los contenidos del blobs.
    En este caso, ERES REPONSABLE DE ELIMINAR EL ARCHIVO TEMPORAL GENERADO POR
    INFORMIX cuando accedas a los registros.
    Cada nueva fila obtenida creará un nuevo archivo temporal para cada columna
    de tipo BYTE.
  </para><para>
    El directorio donde se guardan los archivos temporales puede ser definido por
    la variable de entorno blobdir, por defecto es ".", es decir, el directorio actual.
    Así, putenv(blobdir=tmpblob"); definirá un directorio donde se localizarán todos
    los ficheros temporales y facilitará su borrado. Todos los nombres de
    los archivos comienzan por "blb".
   </para>
  </note>
  <note>
   <title>Recortado (trimming) automático de datos de tipo "char" (SQLCHAR y SQLNCHAR)</title>
    <para></para><para>
    Puede ser definido con la variable de configuración
    </para><para>
    ifx.charasvarchar: si se define a 1 eliminará automáticamente los espacios
                       en blanco al final de la cadena.
    </para>
   </note>
    <para></para>
   <note>
   <title>Valores NULL</title>
    <para></para><para>
     La variable de configuración ifx.nullformat (y en tiempo de ejecución
     <function>ifx_nullformat</function>) cuando sea definida a true devolverá
     columnas NULL como la cadena "NULL", si es definida a false entonces la
     cadena vacía. Esto permite distinguir entre columnas NULL y vacías.
    </para>
   </note>
  </partintro>

  <refentry id="function.ifx-connect">
   <refnamediv>
    <refname>ifx_connect</refname>
    <refpurpose>Abre una conexión con un servidor Informix</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_connect</function></funcdef>
     <paramdef>string <parameter><optional>database</optional>
                      </parameter></paramdef>
     <paramdef>string <parameter><optional>userid</optional>
                      </parameter></paramdef>
     <paramdef>string <parameter><optional>password</optional>
                      </parameter></paramdef>
    </funcsynopsis>
    <para>
     Si tuvo éxito, devuelve un identificador de conexión en otro caso FALSE.
    </para><para>
     <function>ifx_connect</function> establece una conexión con un servidor
     INFORMIX. Todos los argumentos son opcionales, y si no se pasan, se toman los
     valores del <link linkend="configuration.file">fichero de configuración</link>
     (ifx.default_host para el ordenador donde se encuentra el servidor (si no
     es definida, las librerías de Infomix usarán la variable de entorno
     <envar>INFORMIXSERVER</envar>), ifx.default_user para el usuario (userid),
     ifx.default_password para la contraseña (password) (ninguna, si no es definida).
    </para><para>
     Para una segunda llamada a <function>ifx_connect</function> con los mismos
     argumentos, no se establecerá una nueva conexión, en vez de eso, el identificador
     de enlace de la conexión abierta será devuelto.
    </para><para>
     La conexión con el servidor será cerrada tan pronto como la ejecución del guión (script)
     finalice, a menos que anteriormente se haya llamando a <function>ifx_close</function>.
    </para><para>
     Examina también <function>ifx_pconnect</function>, y
                      <function>ifx_close</function>.
     <example>
      <title>Conexión a una base de datos Informix</title>
      <programlisting role="php3">
$conn_id = ifx_pconnect (mydb@ol_srv1, "imyself", "mypassword");
      </programlisting>
     </example></para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-pconnect">
   <refnamediv>
    <refname>ifx_pconnect</refname>
    <refpurpose>Abre una conexión permanente con Informix</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_pconnect</function></funcdef>
     <paramdef>string <parameter><optional>database</optional>
                      </parameter></paramdef>
     <paramdef>string <parameter><optional>userid</optional>
                      </parameter></paramdef>
     <paramdef>string <parameter><optional>password</optional>
                      </parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve un identificador positivo de enlace persistente si hubo conexión,
     o false si se produjo un error.
	</para>
    <para>
     <function>ifx_pconnect</function> actúa muy parecido a
     <function>ifx_connect</function> con dos principales diferencias.</para>
    <para>
     Esta función se comporta exactamente igual que <function>ifx_connect</function>
     cuando PHP no es ejecutado como un módulo de Apache.
     La primera diferencia es cuando se conecta, la función intentará encontrar un
     enlace (persistente) que exista con el mismo servidor, usuario y contraseña. Si es hallado,
     el identificador del enlace será devuelto en vez de abrir una nueva conexión.</para>
    <para>
     Segundo, la conexión al servidor no se cerrará cuando la ejecución del guión (script)
     finalice. En vez de esto, la conexión permanecerá abierta para usos futuros
     (<function>ifx_close</function> no cerrará el enlace creado por
     <function>ifx_pconnect</function>).</para>
    <para>
     Este tipo de enlace es, por tanto, llamado 'persistente'</para>
    <para>
     Examina también:
     <function>ifx_connect</function>.</para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-close">
   <refnamediv>
    <refname>ifx_close</refname>
    <refpurpose>Cierra una conexión con Informix</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_close</function></funcdef>
     <paramdef>int <parameter><optional>link_identifier</optional>
                   </parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve: true siempre.</para>
    <para>
     <function>ifx_close</function> cierra un enlace a una base de datos Informix
     que esté asociado con el identificador de enlace (link_identifier). Si el
     identificador de enlace no es especificado, el último enlace abierto es
     asumido.</para>
    <para>
     Observa que esto no es necesario habitualmente ya que las conexiones no
     permanentes son cerradas automáticamente al finalizar el guión (script).</para>
    <para>
     <function>ifx_close</function> no cerrará enlaces persistentes generados por
     <function>ifx_pconnect</function>.</para>
    <para>
     Examina también: <function>ifx_connect</function>, y
                       <function>ifx_pconnect</function>.
     <example>
      <title>Cierre de una conexión a Informix</title>
      <programlisting role="php3">
$conn_id = ifx_connect (mydb@ol_srv, "itsme", "mypassword");
... algunas consultas y código ...
ifx_close($conn_id);
      </programlisting>
     </example></para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-query">
   <refnamediv>
    <refname>ifx_query</refname>
    <refpurpose>Envía una consulta a Informix</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_query</function></funcdef>
     <paramdef>string <parameter>query</parameter></paramdef>
     <paramdef>int <parameter><optional>link_identifier</optional>
                   </parameter></paramdef>
     <paramdef>int <parameter><optional>cursor_type</optional>
                   </parameter></paramdef>
     <paramdef>mixed <parameter><optional>blobidarray</optional>
                   </parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve un identificador positivo de resultado si tuvo éxito, false en
     otro caso.
    </para><para>
     Un entero (integer) "result_id" usado por otras funciones para obtener el resultado
     de la consulta. Es definido "affected_rows" (registros procesados) y se puede obtener
     mediante la función <function>ifx_affected_rows</function>.
    </para><para>
     <function>ifx_query</function> envía una consulta a la base de datos activa
     actualmente en el servidor, la cual está representada por el identificador de
     enlace especificado (link_identifier). Si el identificador no es definido, el último
     enlace abierto es asumido. Si el enlace no se encuentra abierto,
     <function>ifx_connect</function> es llamado y utilizado.
    </para><para>
     Ejecuta una consulta (<parameter>query</parameter>) sobre una conexión
     (<parameter>link_identifier</parameter>). Un cursor es definido y abierto
     para las consultas de selección. El parámetro opcional tipo de cursor
     (<parameter>cursor_type</parameter>) te permite que sea un cursor de tipo
     "scroll" y/o "hold". Es una máscara y puede ser IFX_SCROLL, IFX_HOLD o ambos.
     Las consultas que no son de selección son ejecutadas inmediatamente.
    </para><para>
     Para cualquier tipo de consulta el número (estimado o real) de registros procesados
     es guardo y se puede obtener mediante <function>ifx_affected_rows</function>.
    </para><para>
     Si tienes columnas BLOB (BYTE o TEXT) en una consulta de actualización, puedes
     añadir un parámetro <parameter>blobidarray</parameter> conteniendo los
     identificadores de blob y sustituir los valores de esas columnas por una "?"
     en el texto de la consulta.
    </para><para>
     Si el contenido de la columna de tipo TEXT (o BYTE) lo permite, también puedes
     usar "ifx_textasvarchar(1)" y "ifx_byteasvarchar(1)". Esto supone manejar
     columnas de tipo TEXT (o BYTE) como si fueran columnas normales de tipo VARCHAR
     (pero teniendo en cuenta que tendrán un mayor tamaño que el habitual), para
     consultas de selección y no necesitas preocuparte por los identificadores de blob.
    </para><para>
     La opción por defecto ifx_textasvarchar(0) o ifx_byteasvarchar(0) devuelve
     identificadores de blob (valores enteros) para las consultas de selección. Puedes
     obtener el contenido del blob como una cadena o un fichero con las funciones para
     blob (ver más adelante).
    </para><para>
     Examina también:
     <function>ifx_connect</function>.
     <example>
      <title>Mostrar todos los registros de la tabla "orders" como una tabla html</title>
      <programlisting role="php3">
ifx_textasvarchar(1);      // usa "modo texto" para blobs
$res_id = ifx_query("select * from orders", $conn_id);
if (! $res_id) {
    printf("Can't select orders : %s\n&lt;br>%s&lt;br>\n", ifx_error());
    ifx_errormsg();
    die;
}
ifx_htmltbl_result($res_id, "border=\"1\"");
ifx_free_result($res_id);
      </programlisting>
     </example>
     <example>
      <title>Inserta valores en la tabla "catalog"</title>
      <programlisting role="php3">
                      // crea identificadores de blob para una columna de tipo byte y otra text
$textid = ifx_create_blob(0, 0, "Text column in memory");
$byteid = ifx_create_blob(1, 0, "Byte column in memory");
                      // almacena los identificadores de blob en un array llamado blobid
$blobidarray[] = $textid;
$blobidarray[] = $byteid;
                      // lanza la consulta
$query = "insert into catalog (stock_num, manu_code, " .
         "cat_descr,cat_picture) values(1,'HRO',?,?)";
$res_id = ifx_query($query, $conn_id, $blobidarray);
if (! $res_id) {
  ... error ...
}
                     // libera el resultado
ifx_free_result($res_id);
      </programlisting>
     </example></para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-prepare">
   <refnamediv>
    <refname>ifx_prepare</refname>
    <refpurpose>Prepara una sentencia SQL para su ejecución</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_prepare</function></funcdef>
     <paramdef>string <parameter>query</parameter></paramdef>
     <paramdef>int <parameter>conn_id</parameter></paramdef>
     <paramdef>int <parameter><optional>cursor_def</optional></parameter></paramdef>
     <paramdef>mixed <parameter>blobidarray</parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve un entero (integer) <parameter>result_id</parameter> para usarlo con
     <function>ifx_do</function>. Es definido "affected_rows" (registros procesados) y
     se puede obtener mediante la función <function>ifx_affected_rows</function>.
    </para><para>
     Prepara una consulta (<parameter>query</parameter>) sobre una conexión
     (<parameter>link_identifier</parameter>). Un cursor es definido y abierto
     para las consultas de selección. El parámetro opcional tipo de cursor
     (<parameter>cursor_type</parameter>) te permite que sea un cursor de tipo
     "scroll" y/o "hold". Es una máscara y puede ser IFX_SCROLL, IFX_HOLD o ambos.
    </para><para>
     Para cualquier tipo de consulta el número estimado de registros afectados (procesados) es
     guardado y puede ser obtenido mediante <function>ifx_affected_rows</function>.
    </para><para>
     Si tienes columnas BLOB (BYTE o TEXT) en una consulta, puedes
     añadir un parámetro <parameter>blobidarray</parameter> conteniendo los
     identificadores de blob y sustituir los valores de esas columnas por una "?" en
     el texto de la consulta.
    </para><para>
     Si el contenido de la columna de tipo TEXT (o BYTE) lo permite, puedes también
     usar "ifx_textasvarchar(1)" y "ifx_byteasvarchar(1)". Esto supone manejar
     columnas de tipo TEXT (o BYTE) como si fueran columnas normales de tipo VARCHAR
     (pero teniendo en cuenta que tendrán un mayor tamaño que el habitual), para
     consultas de selección y no necesitas preocuparte por los identificadores de blob.
    </para><para>
     La opción por defecto ifx_textasvarchar(0) o ifx_byteasvarchar(0) devuelve
     identificadores de blob (valores enteros) para las consultas de selección. Puedes
     obtener el contenido del blob como una cadena o un fichero con las funciones para
     blob (ver más adelante).
    </para><para>
     Examina también: <function>ifx_do</function>.</para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-do">
   <refnamediv>
    <refname>ifx_do</refname>
    <refpurpose>Ejecuta una sentencia SQL preparada previamente</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_do</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve TRUE si se realizó, FALSE si hubo algún error.
    </para><para>
     Ejecuta una consulta preparada anteriormente o abre un cursor para ella.
    </para><para>
     No libera <parameter>result_id</parameter> si hubo un error.
    </para><para>
     También define el número real de registros procesados para consultas que no sean
     de selección y se puede obtener mediante <function>ifx_affected_rows</function>.
    </para><para>
     Examina también: <function>ifx_prepare</function> (hay un ejemplo).</para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-error">
   <refnamediv>
    <refname>ifx_error</refname>
    <refpurpose>Devuelve el código de error de la última llamada a Informix</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>string <function>ifx_error</function></funcdef>
     <void/>
    </funcsynopsis>
    <para>
     Los códigos de error de Informix (SQLSTATE & SQLCODE) son representados
     como se especifica a continuación:
    </para><para>
     x [SQLSTATE = aa bbb SQLCODE=cccc]
    </para><para>
     donde x = un espacio : no hubo error
    </para><para>        E     : hubo error
    </para><para>        N     : no hay más datos
    </para><para>        W     : aviso
    </para><para>        ?     : no definido
    </para><para>
     Si el carácter "x" es cualquier otra cosa diferente a un espacio, SQLSTATE y
     SQLCODE describen el error con mayor detalle.
    </para><para>
     Examina el manual de Informix para el significado de SQLSTATE y SQLCODE.
    </para><para>
     Devuelve en una cadena un caracter describiendo el resultado de una sentencia
     y los valores SQLSTATE y SQLCODE asociados con la última sentencia SQL ejecutada. El
     formato de la cadena es "(char) [SQLSTATE=(dos dígitos) (tres dígitos)
     SQLCODE=(un dígitos)]". El primer carácter puede ser '<literal> </literal>'
     (un espacio) (no hubo error), '<literal>W</literal>' (la sentencia provocó un
     aviso), '<literal>E</literal>' (la consulta produjo un error) o
      '<literal>N</literal>' (la sentencia no devolvió ningún dato).
    </para><para> Examina también:
     <function>ifx_errormsg</function>
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-errormsg">
   <refnamediv>
    <refname>ifx_errormsg</refname>
    <refpurpose>Devuelve el mensaje de error de la última llamada a Informix</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>string <function>ifx_errormsg</function></funcdef>
     <paramdef>int <parameter><optional>errorcode</optional></parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve el mensaje de error asociado con el error más reciente de Informix.
     Si definismos el parámetro opcional "<parameter>errorcode</parameter>"
     (código de error), nos dará el mensaje de error correspondiente a ese código.
    </para><para>
     Examina también: <function>ifx_error</function>
    </para>
     <informalexample>
      <programlisting>
printf("%s\n&lt;br>", ifx_errormsg(-201));
      </programlisting>
     </informalexample>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-affected-rows">
   <refnamediv>
    <refname>ifx_affected_rows</refname>
    <refpurpose>Obtiene el número de registros procesados por una consulta</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_affected_rows</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     <parameter>result_id</parameter> es un identificador válido del resultado de
     <function>ifx_query</function> o <function>ifx_prepare</function>.
    </para><para>
     Devuelve el número de filas procesadas por una consulta
     representada por un <parameter>result_id</parameter> (identificador de resultado).
    </para><para>
     Para inserciones, actualizaciones y borrados el número es exactamente los registros
     procesados (sqlerrd[2]). Para las consultas de selección es una estimación
     (sqlerrd[0]). No confíes en él.
    </para><para>
     Es útil llamarla después de ejecutar <function>ifx_prepare</function> pues
     así podemos limitar las consultas a número razonable de registros.
    </para><para>
     Examina también: <function>ifx_num_rows</function>
    </para>
     <example>
      <title>Número de registros procesados por una consulta</title>
      <programlisting role="php3">
$rid = ifx_prepare ("select * from emp where name like " . $name, $connid);
if (! $rid) {
    ... error ...
}
$rowcount = ifx_affected_rows ($rid);
if ($rowcount > 1000) {
    printf ("Too many rows in result set (%d)\n&lt;br>", $rowcount);  // Demasiados registros en el resultado
    die ("Please restrict your query&lt;br>\n");                      // Por favor, restringe tu consulta
}
      </programlisting>
     </example>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-getsqlca">
   <refnamediv>
    <refname>ifx_getsqlca</refname>
    <refpurpose>Después de una consulta, obtiene el contenido de sqlca.sqlerrd[0..5]</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>array <function>ifx_getsqlca</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     <parameter>result_id</parameter> es un identificador válido del resultado de
     <function>ifx_query</function> o <function>ifx_prepare</function>.
    </para><para>
     Devuelve una seudo fila (array asociativo) con los valores de sqlca.sqlerrd[0]
     a sqlca.sqlerrd[5] de una consulta ejecutada, representada ésta con un identificador
     de resultado <parameter>result_id</parameter>.
    </para><para>
     Para inserciones, actualizaciones y borrados los valores devueltos son aquellos
     definidos por el servidor después de que la consulta sea ejecutada. Esto da
     acceso al número de registros procesados y al valor de una columna de tipo serial
     en una consulta de inserción. Para consultas de selección, los valores son
     guardados cuando se prepara la sentencia. También permite conocer el número
     estimado de registros procesados. El uso de esta función evita el sobrecoste de
     ejecutar la consulta "select dbinfo('sqlca.sqlerrdx')", como obtener los valores
     guardados por el conector para Informix en el momento apropiado.
    </para>
     <example>
      <title>Obtener los valores sqlca.sqlerrd[x]</title>
      <programlisting role="php3">
/* suponiendo que la primera columna de la tabla 'sometable' es de tipo serial */
$qid = ifx_query("insert into sometable values(0, '2nd column', 'another column' ", $connid);
if (! $qid) {
    ... error ...
}
$sqlca = ifx_getsqlca ($qid);
$serial_value = $sqlca["sqlerrd1"];
echo "The serial value of the inserted row is : " . $serial_value&lt;br>\n"; // El valor de tipo serial del registro insertado es:
      </programlisting>
     </example>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-fetch-row">
   <refnamediv>
    <refname>ifx_fetch_row</refname>
    <refpurpose>Obtiene registros como un array (vector) enumerado</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>array <function>ifx_fetch_row</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>mixed <parameter><optional>position</optional>
                      </parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve un array (vector) correspondiente a la fila leída o false si no hay más
     registros.
    </para><para>
     Las columnas blob son devueltas como identificadores de blob enteros (integer)
     para usarlos con <function>ifx_get_blob</function> a menos que hayas usado
     ifx_textasvarchar(1) o ifx_byteasvarchar(1), en cuyo caso los blobs son
     devueltos como cadenas de texto. Devuelve FALSE si hubo error.
    </para><para>
     <parameter>result_id</parameter> es un identificador válido del resultado de
     <function>ifx_query</function> o <function>ifx_prepare</function> (sólo para
     consultas de selección).
    </para><para>
     <parameter><optional>position</optional></parameter> es un parámetro opcional
     para una operación de lectura sobre un cursor de tipo "scroll":
     "NEXT" (siguiente), "PREVIOUS" (anterior), "CURRENT" (actual), "FIRST" (primero),
     "LAST" (último) o un  número. Si se especifica un número, un registro concreto
     es leído. Este parámetro opcional es sólo válido para cursores de tipo scroll.
    </para><para>
     <function>ifx_fetch_row</function> lee el contenido de un registro de la consulta
     representada por el identificador de resultado indicado. La fila (registro) es devuelta en
     un array. Cada columna es guarda en un array, empezando éste desde cero.
    </para><para>
     Las llamadas posteriores a <function>ifx_fetch_row</function> devolverán el registro
     siguiente en el resultado de la consulta, o false si no hay más filas.
    </para>
    <example>
     <title>Leer registros</title>
     <programlisting role="php3">
$rid = ifx_prepare ("select * from emp where name like " . $name,
                     $connid, IFX_SCROLL);
if (! $rid) {
    ... error ...
}
$rowcount = ifx_affected_rows($rid);
if ($rowcount > 1000) {
    printf ("Too many rows in result set (%d)\n&lt;br>", $rowcount);  // Demasiados registros en el resultado
    die ("Please restrict your query&lt;br>\n");                      // Por favor, restringe tu consulta
}
if (! ifx_do ($rid)) {
   ... error ...
}
$row = ifx_fetch_row ($rid, "NEXT");
while (is_array($row)) {
    for(reset($row); $fieldname=key($row); next($row)) {
        $fieldvalue = $row[$fieldname];
        printf ("%s = %s,", $fieldname, $fieldvalue);
    }
    printf("\n&lt;br>");
    $row = ifx_fetch_row ($rid, "NEXT");
}
ifx_free_result ($rid);
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-htmltbl-result">
   <refnamediv>
    <refname>ifx_htmltbl_result</refname>
    <refpurpose>Muestra todos los registros de una consulta en una tabla HTML</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_htmltbl_result</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>string <parameter><optional>html_table_options</optional></parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve el número de registros leídos o FALSE si hubo error.
    </para><para>
     Muestra todas las filas de la consulta <parameter>result_id</parameter> dentro
     de una tabla html. El argumento segundo, opcional, es una cadena de parámetros
     del tag &lt;table&gt;
    </para>
     <example>
      <title>Mostrar resultado como una tabla HTML</title>
      <programlisting role="php3">
$rid = ifx_prepare ("select * from emp where name like " . $name,
                     $connid, IFX_SCROLL);
if (! $rid) {
   ... error ...
}
$rowcount = ifx_affected_rows ($rid);
if ($rowcount > 1000) {
    printf ("Too many rows in result set (%d)\n&lt;br>", $rowcount);  // Demasiados registros en el resultado
    die ("Please restrict your query&lt;br>\n");                      // Por favor, restringe tu consulta
}
if (! ifx_do($rid) {
  ... error ...
}

ifx_htmltbl_result ($rid, "border=\"2\"");

ifx_free_result($rid);
      </programlisting>
     </example>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-fieldtypes">
   <refnamediv>
    <refname>ifx_fieldtypes</refname>
    <refpurpose>Obtiene los campos de una consulta SQL</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>array <function>ifx_fieldtypes</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     Dada una consulta representada por <parameter>result_id</parameter> devuelve un
     array con los nombres de campo como llaves y los tipos como datos.
     Si no tuvo éxito da FALSE.
    </para>
    <example>
     <title>Nombres y tipos de campos de una consulta SQL</title>
     <programlisting role="php3">
$types = ifx_fieldtypes ($resultid);
if (! isset ($types)) {
  ... error ...
}
for ($i = 0; $i < count($types); $i++) {
    $fname = key($types);
    printf("%s :\t type =  %s\n", $fname, $types[$fname]);
    next($types);
}
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-fieldproperties">
   <refnamediv>
    <refname>ifx_fieldproperties</refname>
    <refpurpose>Indica las propiedades de los campos de una consulta SQL</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>array <function>ifx_fieldproperties</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     Dada una consulta representada por <parameter>result_id</parameter> devuelve un
     array con los nombres de campo como llaves y las propiedades como datos.
     FALSE es devuelto si hubo error.
    </para><para>
     Devuelve las propiedades SQL de cada campo como un array. Las propiedades son
     codificadas así: "SQLTYPE;longitud;precisión;escala;ISNULLABLE" siendo
     SQLTYPE el tipo de dato definido en Informix como puede ser "SQLVCHAR" etc. e
     ISNULLABLE (puede ser nulo) igual a "Y" sí o "N" no.
    </para>
    <example>
     <title>Propiedades de los campos de una consulta SQL</title>
     <programlisting role="php3">
$properties = ifx_fieldtypes ($resultid);
if (! isset($properties)) {
  ... error ...
}
for ($i = 0; $i < count($properties); $i++) {
    $fname = key ($properties);
    printf ("%s:\t type =  %s\n", $fname, $properties[$fname]);
    next ($properties);
}
     </programlisting>
    </example>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-num-fields">
   <refnamediv>
    <refname>ifx_num_fields</refname>
    <refpurpose>Devuelve el número de columnas en una consulta</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_num_fields</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     Dada una consulta representada por <parameter>result_id</parameter> devuelve
     el número de columnas o FALSE si se produjo un error.
    </para><para>
     Después de preparar o ejecutar una consulta, una llamada a esta función te
     da el número de columnas en la consulta.
    </para>
   </refsect1>
  </refentry>

 <refentry id="function.ifx-num-rows">
   <refnamediv>
    <refname>ifx_num_rows</refname>
    <refpurpose>Cuenta los registros ya leídos de una consulta</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_num_rows</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     Da el número de registros ya leídos de una consulta representada por un
     <parameter>result_id</parameter> después de llamar a
     <function>ifx_query</function> o <function>ifx_do</function>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-free-result">
   <refnamediv>
    <refname>ifx_free_result</refname>
    <refpurpose>Libera los recursos de una consulta</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_free_result</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     Libera los recursos representados por el identificador <parameter>result_id</parameter>
     de una consulta. Devuelve FALSE si hubo error.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-create-char">
   <refnamediv>
    <refname>ifx_create_char</refname>
    <refpurpose>Crea un objeto char</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_create_char</function></funcdef>
     <paramdef>string <parameter>param</parameter></paramdef>
    </funcsynopsis>
    <para>
     Crea un objeto char. <parameter>param</parameter> será el contenido del char.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-free-char">
   <refnamediv>
    <refname>ifx_free_char</refname>
    <refpurpose>Elimina un objeto char</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_free_char</function></funcdef>
     <paramdef>int <parameter>bid</parameter></paramdef>
    </funcsynopsis>
    <para>
     Borra el objeto char representado por el identificador del char
     <parameter>bid</parameter>.
     Devuelve FALSE si se produjo un error, en otro caso TRUE.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-update-char">
   <refnamediv>
    <refname>ifx_update_char</refname>
    <refpurpose>Actualiza el contenido de un objeto char</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_update_char</function></funcdef>
     <paramdef>int <parameter>bid</parameter></paramdef>
     <paramdef>string <parameter>content</parameter></paramdef>
    </funcsynopsis>
    <para>
     Actualiza el contenido de un objeto char representado por su identificador
     <parameter>bid</parameter>. <parameter>content</parameter> es una cadena
     con la información nueva. Devuelve FALSE si se produjo un error, en otro
     caso TRUE.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-get-char">
   <refnamediv>
    <refname>ifx_get_char</refname>
    <refpurpose>Obtiene el contenido de un objeto char</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_get_char</function></funcdef>
     <paramdef>int <parameter>bid</parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve el contenido de un objeto char representado por su identificador
     <parameter>bid</parameter>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-create-blob">
   <refnamediv>
    <refname>ifx_create_blob</refname>
    <refpurpose>Crea un objeto blob</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_create_blob</function></funcdef>
     <paramdef>int <parameter>type</parameter></paramdef>
     <paramdef>int <parameter>mode</parameter></paramdef>
     <paramdef>string <parameter>param</parameter></paramdef>
    </funcsynopsis>
    <para>
     Crea un objeto blob.
    </para><para>
     type (tipo): 1 = TEXT, 0 = BYTE
    </para><para>
     mode (modo): 0 = el contenido del objeto blob es conservado en memoria,
                  1 = el contenido del objeto blob es mantenido en un archivo.
    </para><para>
     param: si mode = 0: apunta al contenido en memoria,
            si mode = 1: contiene el nombre del fichero.
    </para><para>
     Devuelve FALSE si hubo error, en otro caso el identificador del nuevo
     objeto blob.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-copy-blob">
   <refnamediv>
    <refname>ifx_copy_blob</refname>
    <refpurpose>Duplica el objeto blob dado</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_copy_blob</function></funcdef>
     <paramdef>int <parameter>bid</parameter></paramdef>
    </funcsynopsis>
    <para>
     Duplica el objeto blob dado. <parameter>bid</parameter> es el identificador
     del objeto blob a copiar.
    </para><para>
     Devuelve FALSE si hubo error, en otro caso el identificador del nuevo
     objeto blob.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-free-blob">
   <refnamediv>
    <refname>ifx_free_blob</refname>
    <refpurpose>Borra el objeto blob</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_free_blob</function></funcdef>
     <paramdef>int <parameter>bid</parameter></paramdef>
    </funcsynopsis>
    <para>
     Elimina el objeto blob representado por el identificador <parameter>bid</parameter>.
     Devuelve FALSE si se produjo error, en otro caso TRUE.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-get-blob">
   <refnamediv>
    <refname>ifx_get_blob</refname>
    <refpurpose>Obtiene el contenido de un objeto blob</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifx_get_blob</function></funcdef>
     <paramdef>int <parameter>bid</parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve el contenido de un objeto blob representado por su identificador
     <parameter>bid</parameter>.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-update-blob">
   <refnamediv>
    <refname>ifx_update_blob</refname>
    <refpurpose>Actualiza el contenido de un objeto blob</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef><function>ifx_update_blob</function></funcdef>
     <paramdef>int <parameter>bid</parameter></paramdef>
     <paramdef>string <parameter>content</parameter></paramdef>
    </funcsynopsis>
    <para>
     Actualiza el contenido de un objeto blob representado por su identificador
     <parameter>bid</parameter>. <parameter>content</parameter> es una cadena
     con el nuevo contenido. Devuelve FALSE si hubo error, en otro caso TRUE.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-blobinfile-mode">
   <refnamediv>
    <refname>ifx_blobinfile_mode</refname>
    <refpurpose>Define el modo por defecto para los blob en todas las consultas
    de selección</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>void <function>ifx_blobinfile_mode</function></funcdef>
     <paramdef>int <parameter>mode</parameter></paramdef>
    </funcsynopsis>
    <para>
     Define el modo por defecto para los blob en todas las consultas
     de selección. El modo (mode) "0" quiere decir que guarda en memoria los blobs
     de tipo BYTE y modo "1" significa guardarlos en un archivo.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-textasvarchar">
   <refnamediv>
    <refname>ifx_textasvarchar</refname>
    <refpurpose>Define el modo por defecto para los campos de tipo text</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>void <function>ifx_textasvarchar</function></funcdef>
     <paramdef>int <parameter>mode</parameter></paramdef>
    </funcsynopsis>
    <para>
     Define el modo por defecto para los campos de tipo text en todas las consultas
     de selección. Modo (mode) "0" devolverá un identificador de blob y "1" dará el
     contenido en un campo de tipo varchar.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-byteasvarchar">
   <refnamediv>
    <refname>ifx_byteasvarchar</refname>
    <refpurpose>Define el modo por defecto para los campos de tipo byte</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>void <function>ifx_byteasvarchar</function></funcdef>
     <paramdef>int <parameter>mode</parameter></paramdef>
    </funcsynopsis>
    <para>
     Define el modo por defecto para los campos de tipo byte en todas las consultas
     de selección. Modo (mode) "0" devolverá un identificador de blob y "1" dará el
     contenido en un campo de tipo varchar.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifx-nullformat">
   <refnamediv>
    <refname>ifx_nullformat</refname>
    <refpurpose>Define el valor por defecto cuando se leen valores nulos</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>void <function>ifx_nullformat</function></funcdef>
     <paramdef>int <parameter>mode</parameter></paramdef>
    </funcsynopsis>
    <para>
     Define el valor por defecto cuando se leen valores nulos.
     Modo (mode) "0" devuelve "", y modo "1" devuelve "NULL".
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifxus-create-slob">
   <refnamediv>
    <refname>ifxus_create_slob</refname>
    <refpurpose>Crea un objeto slob y lo abre</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifxus_create_slob</function></funcdef>
     <paramdef>int <parameter>mode</parameter></paramdef>
    </funcsynopsis>
    <para>
     Crea un objeto slob y lo abre. Modos: 1 = LO_RDONLY, 2 = LO_WRONLY,
     4 = LO_APPEND, 8 = LO_RDWR, 16 = LO_BUFFER, 32 = LO_NOBUFFER o una combinación
     de ellos. También puedes usar nombres de constantes IFX_LO_RDONLY,
     IFX_LO_WRONLY, etc. Devuelve FALSE si hubo error, en otro caso el identificador
     del nuevo objeto slob.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifxus-free-slob">
   <refnamediv>
    <refname>ifx_free_slob</refname>
    <refpurpose>Elimina un objeto slob</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifxus_free_slob</function></funcdef>
     <paramdef>int <parameter>bid</parameter></paramdef>
    </funcsynopsis>
    <para>
     Borra un objeto slob. <parameter>bid</parameter> es el identificador del
     objeto slob. Devuelve FALSE si hubo error, TRUE en otro caso.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifxus-close-slob">
   <refnamediv>
    <refname>ifxus_close_slob</refname>
    <refpurpose>Cierra un objeto slob</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifxus_close_slob</function></funcdef>
     <paramdef>int <parameter>bid</parameter></paramdef>
    </funcsynopsis>
    <para>
     Cierra un objeto slob representado por su identificador de slob
     <parameter>bid</parameter>. Devuelve FALSE si hubo error, TRUE en otro caso.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifxus-open-slob">
   <refnamediv>
    <refname>ifxus_open_slob</refname>
    <refpurpose>Abre un objeto slob</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifxus_open_slob</function></funcdef>
     <paramdef>long <parameter>bid</parameter></paramdef>
     <paramdef>int <parameter>mode</parameter></paramdef>
    </funcsynopsis>
    <para>
     Abre un objeto slob. <parameter>bid</parameter> será un identificador de slob
     que válido. Modos: 1 = LO_RDONLY, 2 = LO_WRONLY, 4 = LO_APPEND, 8 = LO_RDWR,
     16 = LO_BUFFER, 32 = LO_NOBUFFER o una combinación de ellos. Devuelve FALSE
     si hubo error, en otro caso el identificador del nuevo objeto slob.
    </para>
   </refsect1>
  </refentry>
  <refentry id="function.ifxus-tell-slob">
   <refnamediv>
    <refname>ifxus_tell_slob</refname>
    <refpurpose>Devuelve el fichero actual o la posición en memoria</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifxus_tell_slob</function></funcdef>
     <paramdef>long <parameter>bid</parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve el fichero actual o la posición en memoria de un objeto slob
     abierto, <parameter>bid</parameter> será un identificador de slob válido.
     Si hubo error entonces da FALSE.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifxus-seek-slob">
   <refnamediv>
    <refname>ifxus_seek_slob</refname>
    <refpurpose>Define el fichero o posición en memoria</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifxus_seek_blob</function></funcdef>
     <paramdef>long <parameter>bid</parameter></paramdef>
     <paramdef>int <parameter>mode</parameter></paramdef>
     <paramdef>long <parameter>offset</parameter></paramdef>
    </funcsynopsis>
    <para>
     Define el fichero o posición en memoria de un objeto slob abierto,
     <parameter>bid</parameter> será un identificador de slob válido. Modos
     (mode): 0 = LO_SEEK_SET, 1 = LO_SEEK_CUR, 2 = LO_SEEK_END y
     <parameter>offset</parameter> es el desplazamiento en bytes. Si hubo error
     entonces da FALSE.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifxus-read-slob">
   <refnamediv>
    <refname>ifxus_read_slob</refname>
    <refpurpose>Lee un número de bytes (nbytes) de un objeto slob</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifxus_read_slob</function></funcdef>
     <paramdef>long <parameter>bid</parameter></paramdef>
     <paramdef>long <parameter>nbytes</parameter></paramdef>
    </funcsynopsis>
    <para>
     Lee un número de bytes (nbytes) de un objeto slob. <parameter>bid</parameter> es un identificador
     de slob válido y <parameter>nbytes</parameter> es el número de bytes a leer.
     Devuelve FALSE si hubo error, sino la cadena.
    </para>
   </refsect1>
  </refentry>

  <refentry id="function.ifxus-write-slob">
   <refnamediv>
    <refname>ifxus_write_slob</refname>
    <refpurpose>Escribe una cadena en un objeto slob</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ifxus_write_slob</function></funcdef>
     <paramdef>long <parameter>bid</parameter></paramdef>
     <paramdef>string <parameter>content</parameter></paramdef>
    </funcsynopsis>
    <para>
     Escribe una cadena en un objeto slob. <parameter>bid</parameter> es un
     identificador de slob válido y <parameter>content</parameter> el contenido
     a escribir. Devuelve FALSE si hubo error, sino el número de bytes escritos.
    </para>
   </refsect1>
  </refentry>


 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
