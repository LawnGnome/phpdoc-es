<?xml version="1.0" encoding="iso-8859-1"?>
<reference id="ref.odbc">
  <title>ODBC functions</title>
  <titleabbrev>ODBC</titleabbrev>

  <refentry id="function.odbc-autocommit">
   <refnamediv>
    <refname>odbc_autocommit</refname>
    <refpurpose>Interruptor de comportamiento de auto-entrega</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripcion</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_autocommit</function></funcdef>
     <paramdef>int <parameter>connection_id</parameter></paramdef>
     <paramdef>int <parameter><optional>OnOff</optional></parameter></paramdef>
    </funcsynopsis>
    <para>
     Sin el parametro <parameter>OnOff</parameter>, esta funcion devuelve
     el estado de auto-entrega para 
     <parameter>connection_id</parameter>.  Devuelve &true; si auto-entrega
     esta habilitado, y &false; si no lo esta o ha ocurrido un error.</para>
    <para>
     Si <parameter>OnOff</parameter> es &true;, auto-entrega esta activado,
     si es &false; auto-entrega esta desactivado. Devuelve
     &true; cuando se cumple, &false; cuando
     falla.</para>
    <para>
     Por defecto, auto-entrega es para una conexion.  Desabilitar
     auto-entrega es como comenzar una transaccion.</para>
    <simpara>
     Ver tambien
     <function>odbc_commit</function> y
     <function>odbc_rollback</function>.</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-binmode">
   <refnamediv>
    <refname>odbc_binmode</refname>
   <refpurpose>Manejo de campos de datos binarios</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Descripcion</title>
   <funcsynopsis>
    <funcdef>int <function>odbc_binmode</function></funcdef>
    <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>int <parameter>mode</parameter></paramdef>
    </funcsynopsis>
    <para>(Elementos afectados ODBC SQL: BINARY, VARBINARY, LONGVARBINARY)
    </para>
    <itemizedlist>
      <listitem><simpara>
      ODBC_BINMODE_PASSTHRU: Paso a traves de datos binarios
      </simpara></listitem> 
      <listitem><simpara>
      ODBC_BINMODE_RETURN: Devuelve como es
      </simpara></listitem>
      <listitem><simpara>
      ODBC_BINMODE_CONVERT: Devuelve convertido en caracter
      </simpara></listitem>
    </itemizedlist>
    <para>
    Cuando los datos binarios en SQL son convertidos a datos caracter
    en C, cada byte (8 bits) de datos fuente es representada como
    dos caracteres en ASCII.
    Esos caracteres son la representacion en ASCII de los numeros en su
    forma Hexadecimal. Por ejemplo, un 00000001 binario es
    convertido a <literal>"01"</literal> y un 11111111 binario es
    convertido a <literal>"FF"</literal>.

     <table>
      <title>Manejo de LONGVARBINARY</title>
      <tgroup cols="3">
       <thead>
	<row>
         <entry>modo binario</entry>
	 <entry>longreadlen</entry>
         <entry>resultado</entry>
	</row>
       </thead>
       <tbody>
	<row>
	 <entry>ODBC_BINMODE_PASSTHRU</entry>
	 <entry>0</entry>
         <entry>passthru</entry>
	</row>
	<row>
	 <entry>ODBC_BINMODE_RETURN</entry>
	 <entry>0</entry>
         <entry>passthru</entry>
	</row>
	<row>
	 <entry>ODBC_BINMODE_CONVERT</entry>
	 <entry>0</entry>
         <entry>passthru</entry>
	</row>
	<row>
	 <entry>ODBC_BINMODE_PASSTHRU</entry>
	 <entry>0</entry>
         <entry>passthru</entry>
	</row>
	<row>
	 <entry>ODBC_BINMODE_PASSTHRU</entry>
	 <entry>>0</entry>
         <entry>passthru</entry>
	</row>
	<row>
	 <entry>ODBC_BINMODE_RETURN</entry>
	 <entry>>0</entry>
         <entry>Devuleve como es</entry>
	</row>
	<row>
	 <entry>ODBC_BINMODE_CONVERT</entry>
	 <entry>>0</entry>
         <entry>Devuelve como caracter</entry>
	</row>
       </tbody>
      </tgroup>
     </table></para>

    <para>
     Si usamos <function>odbc_fetch_into</function>, passthru significara
     que una cadena vacia es devuelta por esas campos.</para>

    <para>
     Si <parameter>result_id</parameter> es <literal>0</literal>, las
     definiciones se aplican por defecto para nuevos resultados.

     <note><simpara> Por defecto, longreadlen es
       <literal>4096</literal> y el modo binario por defecto es
       <literal>ODBC_BINMODE_RETURN</literal>.  El manejo de campos binarias
       largas tambien esta afectado por 
       <function>odbc_longreadlen</function>
    </simpara>
    </note></para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-close">
   <refnamediv>
    <refname>odbc_close</refname>
    <refpurpose>Cierra una conexion ODBC</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripcion</title>
    <funcsynopsis>
     <funcdef>void <function>odbc_close</function></funcdef>
     <paramdef>int <parameter>connection_id</parameter></paramdef>
    </funcsynopsis>

    <para>
     <function>odbc_close</function> cerrara la conexion al servidor de
     bases datos asociado con el identificador de conexion dado.

     <note><simpara>
       Esta funcion fallara si hay transacciones abiertas sobre esta
       conexion. La conexion quedara abierta en ese caso.
      </simpara></note></para>

   </refsect1>
  </refentry>

  <refentry id="function.odbc-close-all">
   <refnamediv>
    <refname>odbc_close_all</refname>
    <refpurpose>Cierra todas las conexiones ODBC</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripcion</title>
    <funcsynopsis>
     <funcdef>void <function>odbc_close_all</function></funcdef>
     <void/>
    </funcsynopsis>

    <para>
     <function>odbc_close_all</function> cerrara todas las conexiones
     a servidor(es) de bases de datos.

     <note><simpara>
       Esta funcion fallara si hay transacciones abiertas sobre esta
       conexion. La conexion quedara abierta en ese caso.
      </simpara></note></para>
     
   </refsect1>
  </refentry>

  <refentry id="function.odbc-commit">
   <refnamediv>
    <refname>odbc_commit</refname>
    <refpurpose>Entrega una transaccion ODBC</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripcion</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_commit</function></funcdef>
     <paramdef>int <parameter>connection_id</parameter></paramdef>
    </funcsynopsis>
<para>Devuelve:   &true; si la operacion se realiza
     con exito, &false; si falla.
 
     Todas las transacciones pendientes sobre <parameter>connection_id</parameter>
     son entregadas.</para>
   </refsect1>
  </refentry>


  <refentry id="function.odbc-connect">
   <refnamediv>
    <refname>odbc_connect</refname>
    <refpurpose>Conecta a una fuente de datos</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripcion</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_connect</function></funcdef>
     <paramdef>string <parameter>dsn</parameter></paramdef>
     <paramdef>string <parameter>user</parameter></paramdef>
     <paramdef>string <parameter>password</parameter></paramdef>
     <paramdef>int <parameter><optional>cursor_type</optional></parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve una conexion ODBC id, o 0 (&false;) cuando ocurre un error.</para>
    <simpara>
     La conexion id devuelta por estas funciones es necesaria para otras
     funciones ODBC. Se pueden tener multiples conexiones abiertas a la vez.
     El opcional cuarto parametro asigna el tipo de cursor que va a ser usado
     para esta conexion. Este parametro normalmente no es necesario, pero
     puede ser util para trabajar sobre problemas con algunos drivers ODBC.</simpara>
    <simpara>
     Con algunos drivers ODBC, si ejecutamos un procedimiento complejo, este
     puede fallar con un error similar a: "Cannot open a cursor on a stored
     procedure that has anything other than a single select statement
     in it".  Usando SQL_CUR_USE_ODBC se puede evitar ese error. Algunos
     drivers tampoco soportan el parametro row_number en 
     <function>odbc_fetch_row</function>. SQL_CUR_USE_ODBC tambien podria ayudar 
     en ese caso.</simpara>
    <simpara>
     Las siguientes constantes son definidas por tipos de cursor:</simpara>
    <para>
     <itemizedlist>
      <listitem><simpara>
      SQL_CUR_USE_IF_NEEDED
      </simpara></listitem> 
      <listitem><simpara>
      SQL_CUR_USE_ODBC
      </simpara></listitem> 
      <listitem><simpara>
      SQL_CUR_USE_DRIVER
      </simpara></listitem> 
      <listitem><simpara>
      SQL_CUR_DEFAULT
      </simpara></listitem> 
    </itemizedlist></para>
	<simpara>
     Para conexiones persistentes ver <function>odbc_pconnect</function>.</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-cursor">
   <refnamediv>
    <refname>odbc_cursor</refname>
    <refpurpose>Toma un nombre de cursor</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripcion</title>
    <funcsynopsis>
     <funcdef>string <function>odbc_cursor</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     odbc_cursor devolvera un nombre de cursor para el result_id dado.</para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-do">
   <refnamediv>
    <refname>odbc_do</refname>
    <refpurpose>sinonimo de <function>odbc_exec</function></refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripcion</title>
    <funcsynopsis>
     <funcdef>string <function>odbc_do</function></funcdef>
     <paramdef>int <parameter>conn_id</parameter></paramdef>
     <paramdef>string <parameter>query</parameter></paramdef>
    </funcsynopsis>
    <para>
     odbc_do ejecutara una consulta (query) sobre la conexion dada</para>
   </refsect1>
  </refentry>


  <refentry id="function.odbc-exec">
   <refnamediv>
    <refname>odbc_exec</refname>
    <refpurpose>Prepara o ejecuta una declaracion SQL</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripcion</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_exec</function></funcdef>
     <paramdef>int <parameter>connection_id</parameter></paramdef>
     <paramdef>string <parameter>query_string</parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve &false; en caso de error. Devuelve un 
     indetificador ODBC si el comando SQL fue ejecutado satisfactoriamente.</para>
    <para>
     <function>odbc_exec</function> enviara una declaracion SQL al servidor 
     de bases de datos specificado por
     <parameter>connection_id</parameter>.  Este parametro debe ser un
     indetificador valido devuelto por <function>odbc_connect</function> o
     <function>odbc_pconnect</function>.</para>
    <simpara> 
     Ver tambien: <function>odbc_prepare</function> y 
     <function>odbc_execute</function> para ejecucion multiple de 
     declaraciones SQL.</simpara>
   </refsect1>
  </refentry>

<refentry id="function.odbc-execute">
 <refnamediv>
  <refname>odbc_execute</refname>
   <refpurpose>ejecuta una declaracion preparada</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Descripcion</title>
   <funcsynopsis>
    <funcdef>int <function>odbc_execute</function></funcdef>
    <paramdef>int <parameter>result_id</parameter></paramdef>
    <paramdef>array
      <parameter><optional>parameters_array</optional></parameter></paramdef>
   </funcsynopsis>
   <para>
     Ejecuta uan declaracion preparada con
     <function>odbc_prepare</function>.  Devuelve
     &true; cuando la ejecucion es satisfactoria, 
     &false; en otro caso. Introducir el vector 
     <parameter>arameters_array</parameter> solo es necesario si
     realmente tenemos parametros en la declaracion.</para>
  </refsect1>
</refentry>


  <refentry id="function.odbc-fetch-into">
   <refnamediv>
    <refname>odbc_fetch_into</refname>
    <refpurpose>Busca un registro de resutados dentro de un vector</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripcion</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_fetch_into</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>int <parameter><optional>rownumber</optional></parameter></paramdef>
     <paramdef>array <parameter>result_array</parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve el numero de campos en el resultado;
     &false; on error.
     <parameter>result_array</parameter> debe ser pasado por referencia,
     pero puede ser de cualquier tipo, desde este sera convertido a tipo
     vector. El vector contendra el valor de campo inicial empezando en
     indice de vector 0.</para>
   </refsect1>
  </refentry>


  <refentry id="function.odbc-fetch-row">
   <refnamediv>
    <refname>odbc_fetch_row</refname>
    <refpurpose>Busca un registro</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripcion</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_fetch_row</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>int <parameter><optional>row_number</optional></parameter></paramdef>
    </funcsynopsis>
    <para>
     Si <function>odbc_fetch_row</function> fue succesful (there was a
     row), &true; is returned.  If there are no more
     rows, &false; is returned.</para>
 
    <para>
     <function>odbc_fetch_row</function> busca un registro de datos 
     que fue devuelta por <function>odbc_do</function> /
     <function>odbc_exec</function>.  Despues de que
     <function>odbc_fetch_row</function> sea llamado, se puede acceder a los campos 
     de este registro con <function>odbc_result</function>.</para>

    <para>
     Si no se especifica <parameter>row_number</parameter>,
     <function>odbc_fetch_row</function> intentara buscar el siguiente
     registro en los resultados. Lamar a
     <function>odbc_fetch_row</function> con o sin
     <parameter>row_number</parameter> puede ser mezclado.</para> 

    <para>
     Para pasar a traves del resultado mas de una vez, se puede llamar a 
     <function>odbc_fetch_row</function> con
     <parameter>row_number</parameter> 1, y despues continuar haciendo
     <function>odbc_fetch_row</function> sin
     <parameter>row_number</parameter> para revisar el resultado.  Si un
     driver no admitiese busquedas de registros por numero, el parametro
     <parameter>row_number</parameter> seria ignorado.</para>

   </refsect1>
  </refentry>


  <refentry id="function.odbc-field-name">
   <refnamediv>
    <refname>odbc_field_name</refname>
    <refpurpose>Devuelve el nombre de campo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripcion</title>
    <funcsynopsis>
     <funcdef>string <function>odbc_fieldname</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>int <parameter>field_number</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>odbc_field_name</function> devolvera el nombre del 
     campo almacenado en el numero de campo elegido dentro del 
     identificador ODBC.  La numeracion de campos comienza en 1.
     En caso de error devolveria &false;.</para>
     
   </refsect1>
  </refentry>

<!--
  <refentry id="function.odbc-field-num">
   <refnamediv>
    <refname>odbc_field_num</refname>
    <refpurpose>Devuelve el numero de campo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripcion</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_field_num</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>string <parameter>field_name</parameter></paramdef>
    </funcsynopsis>
   <para>
     <function>odbc_field_num</function> devolvera el numero de campo
     que corresponda con el campo llamado en el identificador ODBC.  
     La numeracion de campos comienza en 1.
     En caso de error devolveria &false;.</para>

 
   </refsect1>
  </refentry>
-->

  <refentry id="function.odbc-field-type">
   <refnamediv>
    <refname>odbc_field_type</refname>
    <refpurpose>Tipo de datos de un campo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripcion</title>
    <funcsynopsis>
     <funcdef>string <function>odbc_field_type</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>int <parameter>field_number</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>odbc_field_type</function> Devolvera el tipo SQL de un campo
     referenciado por numero en el identificador ODBC.
     identifier. La numeracion de campos comienza en 1.</para>  
 
   </refsect1>
  </refentry>

  <refentry id="function.odbc-field-len">
   <refnamediv>
    <refname>odbc_field_len</refname>
    <refpurpose>Da la longitud de un campo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripcion</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_field_len</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>int <parameter>field_number</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>odbc_field_len</function> devolvera la longitud de un
     campo referenciado por numero en un identificador ODBC
     La numeracion de campos comienza en 1.</para>
 
   </refsect1>
  </refentry>


  <refentry id="function.odbc-free-result">
   <refnamediv>
    <refname>odbc_free_result</refname>
    <refpurpose>recursos libres asociados con un resultado</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripcion</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_free_result</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     Always returns &true;.</para>
    <para>
     <function>odbc_free_result</function> solo necesita ser llamado en caso
     de preocupacion por demasiado uso de memoria cuando se ejecuta un 
     script.  Toda la memoria resultante quedara automaticamente liberada cuando el
     script finalice.  Pero si es seguro que no se vaya a necesitar la informacion 
     nada mas que en un script, se debera llamar a la funcion 
     <function>odbc_free_result</function>, y la memoria asociada con 
     <parameter>result_id</parameter> sera liberada.</para>
    <para>
     <note><simpara>
       Si la auto-entrega no esta activada la (ver 
       <function>odbc_autocommit</function>) y se ejecuta 
       <function>odbc_free_result</function> antes de la entrega, todo 
       queda pendiente de las transaciones que esten en lista.
      </simpara></note></para>
   </refsect1>
  </refentry>


  <refentry id="function.odbc-longreadlen">
   <refnamediv>
    <refname>odbc_longreadlen</refname>
   <refpurpose>manejo de LONGITUD de columnas</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Descripcion</title>
   <funcsynopsis>
    <funcdef>int <function>odbc_longreadlen</function></funcdef>
    <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>int <parameter>length</parameter></paramdef>
    </funcsynopsis>
    <para>(ODBC SQL tipos relaccionados: LONG, LONGVARBINARY)
    El numero de bytes devueltos para PHP es controlado por el 
    parametro length. Si es asignado a 0, la longitud del campo es pasado
    al cliente.</para>
    <note><simpara>
      El manejo de campos LONGVARBINARY tambien esta afectado por
      <function>odbc_binmode</function>
    </simpara>
    </note>
   </refsect1>
  </refentry>


  <refentry id="function.odbc-num-fields">
   <refnamediv>
    <refname>odbc_num_fields</refname>
    <refpurpose>numero de campos de un resultado</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripcion</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_num_fields</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>odbc_num_fields</function> devolvera el numero de campos
     dentro de un ODBC.  Esta funcion devolvera -1 en caso
     de error.  El argumento es un identificador valido devuelto por
     <function>odbc_exec</function>.</para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-pconnect">
   <refnamediv>
    <refname>odbc_pconnect</refname>
    <refpurpose>Abre una conexion permanente de base de datos</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripcion</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_pconnect</function></funcdef>
     <paramdef>string <parameter>dsn</parameter></paramdef>
     <paramdef>string <parameter>user</parameter></paramdef>
     <paramdef>string <parameter>password</parameter></paramdef>
     <paramdef>int <parameter><optional>cursor_type</optional></parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve un identificador de conexion ODBC o 0 (&false;) en caso de error. 
     Esta funcion es <function>odbc_connect</function>, excepto
     que la conexion no sea realmente cerrada cuando el script ha
     finalizado.  Las respuestas futuras para una conexion con la misma combinacion
     <parameter>dsn</parameter>, <parameter>user</parameter>,
     <parameter>password</parameter> (via
     <function>odbc_connect</function> y 
     <function>odbc_pconnect</function>) puede reusar la conexion 
     permanente.</para>
    <para>
     <note><simpara>
       Las conexiones permanentes no tienen efecto si PHP es usado como programa
       CGI.
      </simpara></note></para>
    <para>
     Para informacion acerca del paramentor opcional cursor_type ver la
     funcion <function>odbc_connect</function>.  Para mas informacion
     sobre conexiones permanentes, ir al apartado PHP FAQ.</para>
   </refsect1>
</refentry>

<refentry id="function.odbc-prepare">
 <refnamediv>
  <refname>odbc_prepare</refname>
   <refpurpose>Prepara una declaracion para su ejecucion</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Descripcion</title>
   <funcsynopsis>
    <funcdef>int <function>odbc_prepare</function></funcdef>
    <paramdef>int <parameter>connection_id</parameter></paramdef>
     <paramdef>string <parameter>query_string</parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve &false; en caso de error.</para>
    <para>
     Devuelve un identificador ODBC si el comando SQL esta preparado. 
     El identificador resultante puede ser usado mas tarde para ejecutar la 
     declaracion con <function>odbc_execute</function>.</para>
  </refsect1>
</refentry>

  <refentry id="function.odbc-num-rows">
   <refnamediv>
    <refname>odbc_num_rows</refname>
    <refpurpose>Numero de campos en un resultado</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripcion</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_num_rows</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     <function>odbc_num_rows</function> devolvera el numero de registros
     de un ODBC.  Esta funcion devolvera -1 en caso de error.  Para
     declaraciones INSERT, UPDATE y DELETE 
     <function>odbc_num_rows</function> devolvera el numero de registros
     afectados.  Para una clausula SELECT esta <literal>puede</literal> ser 
     el numero de registros permitidos.</para>
    <para>
     Nota: El uso de <function>odbc_num_rows</function> para determinar el 
     numero de registros permitidos despues de un SELECT devolvera -1.
     </para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-result">
   <refnamediv>
    <refname>odbc_result</refname>
    <refpurpose>coge informacion de un campo</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripcion</title>
    <funcsynopsis>
     <funcdef>string <function>odbc_result</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>mixed <parameter>field</parameter></paramdef>
    </funcsynopsis>
    <para>
     Devuelve el contenido de un campo.</para>
    <para>
     <parameter>field</parameter> puede ser cualquier contenido del campo
     que queramos; o puede ser una cadena que contenga el nombre del campo;
     Por ejemplo: 
     <informalexample><programlisting>
     $item_3 = odbc_result($Query_ID, 3 );
     $item_val = odbc_result($Query_ID, "val");
</programlisting></informalexample></para>
    <para>
     La primera sentencia <function>odbc_result</function> devuelve el 
     valor del tercer campo detro del registro actual de la cola resultante.
     La  segunda funcion llama a 
     <function>odbc_result</function> y devuelve el valor de un campo 
     cuyo nombre es "val" en el registro actual de la cola 
     resultante. Ocurre un error si un numero de columna para un campo 
     es menor que uno o excede el numero de campos en el registro actual.
     Similarmente, ocurre un error si un campo con un nombre que no sea 
     uno de los nombres de campo de una talba o tablas que sea o sean
     encoladas. </para>

    <para>
     Los indices de campo comienzan en 1. Recordando el metodo binario de
     campos con gran informacion, es devuleto con referencia a <function>odbc_binmode
     </function> y <function>odbc_longreadlen</function>.

<!--

Si el campo requerido contiente 
     datos binarios o es de tipo LONG, 
de los mayores de 4096 bytes, los contenidos no son 
     devueltos, en cambio estos son enviados directamente al cliente. Consejo: Si 
     necesitmaos tener devueltos datos binarios, usariamos la funcion SQL HEX() para
     recobrar el campo en formato hexadecimal.  Por ejemplo, "SELECT
     HEX(binary_col) FROM mytable"
--></para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-result-all">
   <refnamediv>
    <refname>odbc_result_all</refname>
    <refpurpose>Print result as HTML table</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripcion</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_result_all</function></funcdef>
     <paramdef>int <parameter>result_id</parameter></paramdef>
     <paramdef>string <parameter><optional>format</optional></parameter></paramdef>
    </funcsynopsis>
    <para>
     En caso de error, como resultado, devuelve &false;.</para>

    <para>
     <function>odbc_result_all</function> Imprimira todos los registros
     de un identificador prducidoo por <function>odbc_exec</function>. El 
     resultado es impreso en una tabla formato HTML.  Con el argumento de cadena 
     opcional <parameter>format</parameter>, ademas, todas los formatos de tablas 
     pueden ser realizadas.</para>
   </refsect1>
  </refentry>


  <refentry id="function.odbc-rollback">
   <refnamediv>
    <refname>odbc_rollback</refname>
    <refpurpose>Volver a pasar una transacion</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripcion</title>
    <funcsynopsis>
     <funcdef>int <function>odbc_rollback</function></funcdef>
     <paramdef>int <parameter>connection_id</parameter></paramdef>
    </funcsynopsis>
    <para>
     Vuelve a pasar todas las declaraciones pendientes 
     <parameter>connection_id</parameter>.  Devuelve 
     &true; cuando el resultado es satisfactorio, 
     &false; cuando no lo es.</para>
   </refsect1>
  </refentry>

  <refentry id="function.odbc-setoption">
   <refnamediv>
    <refname>odbc_setoption</refname> 
    <refpurpose>
     Ajusta la configuracion de ODBC. Devuelve &false; en caso de error, en otro caso 
     &true;.
    </refpurpose>
   </refnamediv>
    <refsect1>
     <title>Descripcion</title>
     <funcsynopsis>
      <funcdef>int <function>odbc_setoption</function></funcdef>
      <paramdef>int <parameter>id</parameter></paramdef>
      <paramdef>int <parameter>function</parameter></paramdef>
      <paramdef>int <parameter>option</parameter></paramdef>
      <paramdef>int <parameter>param</parameter></paramdef>
     </funcsynopsis>
     <para>
      Esta funcion permite buscar las opciones ODBC para una conexion 
      particular o consulta resultante.  Esto esta escrito para 
      trabajar sobre problemas en peculiaries drivers ODBC.  Esta funcion 
      Solo se deberia usar siendo un programador de ODBC y entendiendo los
      efectos que las opciones tendran. Debemos tener la certeza de que 
	necesitamos una buena referencia de reference to explicar
      todas las diferentes opciones y valores que pueden ser usados.
      Las diferentes versiones de drivers soportan diferentes opciones.</para>
     <para>
      Ya que los efectos pueden variar dependiendo del driver ODBC, deberiamos 
      usar la function en scripts para ser hecho publico lo que permitira que sea 
      fuertemente desalentado.  Algunas opciones ODBC no estan permitidas 
      para esta funcion porque debe ser configurada antes de que la conexion sea 
      establecida o la consulta este preparada.  Sin embargo, si un determinado 
	trabajo hace la tarea de PHP, el jefe no contaria con nosotros para usar 
	un producto comercial, esto es lo que realmente suele pasar.</para>
     <para>
      <parameter>Id</parameter> es una coexion id o resultado id sobre la que 
      cambiaremos la configuracion. Para SQLSetConnectOption(), esta es 
      una conexion id. Para SQLSetStmtOption(), este es un resultado id.</para>
     <para>
      <parameter>function</parameter> es la funcion ODBC a usar. El valor 
      deberia ser 1 para SQLSetConnectOption() y 2 para 
      SQLSetStmtOption().</para>
     <para>
      Parmeter <parameter>option</parameter> es la opcion a configurar.</para>
     <para>
      El parametro <parameter>param</parameter> es el valor para la 
      escogida opcion <parameter>option</parameter>.

     <example>
      <title>Ejemplos ODBC Setoption</title>
      <programlisting role="php">
// 1. Option 102 of SQLSetConnectOption() is SQL_AUTOCOMMIT.
//    Value 1 of SQL_AUTOCOMMIT is SQL_AUTOCOMMIT_ON.
//    Este ejemplo tiene el mismo efecto que
//    odbc_autocommit($conn, true);

odbc_setoption ($conn, 1, 102, 1);

// 2. Option 0 of SQLSetStmtOption() is SQL_QUERY_TIMEOUT.
//    Este ejemplo asigna el tiempo de espera de la consulta a 30 segundos.

$result = odbc_prepare ($conn, $sql);
odbc_setoption ($result, 2, 0, 30);
odbc_execute ($result);
       </programlisting>
     </example></para>
    </refsect1>
   </refentry>

 </reference>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
