 <reference id="ref.misc">
  <title>Miscelánea de funciones</title>
  <titleabbrev>Misc.</titleabbrev>

  <partintro>
   <para>
    Estas funciones están colacadas aquí debido a que no parecen
    ajustarse a ninguna otra categoría.</para>
  </partintro>

  <refentry id="function.connection-aborted">
   <refnamediv>
    <refname>connection_aborted</refname>
    <refpurpose>Devuelve true si el cliente está desconectado</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>connection_aborted</function></funcdef>
     <paramdef>void <parameter></parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Devuelve true si el cliente está desconectado. Vea la descripción de la 
     <link linkend="features.connection-handling">Gestión de la Conexión</link>
     en el capítulo <link linkend="features">Características </link>
     para una explicación completa.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.connection-status">
   <refnamediv>
    <refname>connection_status</refname>
    <refpurpose>Devuelve el estado de la conexión en un campo de bits</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>connection_status</function></funcdef>
     <paramdef>void <parameter></parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Devuelve el estado de la conexión en un campo de bits. Vea la descripción de la
     <link linkend="features.connection-handling">Gestión de la Conexión </link> 
     en el capítulo <link linkend="features">Características</link> para una 
     explicación completa.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.connection-timeout">
   <refnamediv>
    <refname>connection_timeout</refname>
    <refpurpose>Devuelve true si el script ha alcanzado su time out</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>connection_timeout</function></funcdef>
     <paramdef>void <parameter></parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Devuelve true si el script ha alcanzado su time out.  Vea la descripción de la 
     <link linkend="features.connection-handling">Gestión de la Conexión</link>
     en el capítulo <link linkend="features">Características</link>
     para una explicación completa.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.define">
   <refnamediv>
	<refname>define</refname>
	<refpurpose>Define una constante con nombre.</refpurpose>
   </refnamediv>
   <refsect1>
	<title>Descripción</title>
	<funcsynopsis>
	 <funcdef>int <function>define</function></funcdef>
	 <paramdef>string <parameter>name</parameter></paramdef>
	 <paramdef>mixed <parameter>value</parameter></paramdef>
	 <paramdef>int <parameter><optional>case_insensitive</optional></parameter></paramdef>
	</funcsynopsis>
	
	<para>
         Define una constante con nombre, que es similar a una variable, excepto que:
	 <itemizedlist>
	  <listitem>
	   <simpara>
                Las constantes no tienen un símbolo dólar '$' precediéndolas;
	   </simpara>
	  </listitem>
	  <listitem>
	   <simpara>
                Las constantes son accesibles desde cualquier lugar sin tener en 
                cuenta las reglas de ámbito de las variables.
	   </simpara>
	  </listitem>
	  <listitem>
	   <simpara>
                Las constantes no pueden ser redefinidas o iniciadas una vez
                que han sido establecidas, y
	   </simpara>
	  </listitem>
	  <listitem>
	   <simpara>
                Las constantes sólo pueden evaluar valores escalares
	   </simpara>
	  </listitem>
	 </itemizedlist></para>

	<para>
         El nombre de la constante se da en 
	 <parameter>name</parameter> (nombre); 
         el valor se da en <parameter>value</parameter> (valor).</para>

	<para>
         El tercer parámetro opcional
	 <parameter>case_insensitive</parameter> también se encuentra disponible. 
         Si se da el valor <emphasis>1</emphasis>, la constante se definirá no 
         dintinguiendo mayúsculas/minusculas. El comportamiento por defecto es
         si distinguir; i.e. CONSTANT y Constant representan valores 
         diferentes.</para>

	<para>
	 <example>
	  <title>Definición de Constantes</title>
	  <programlisting>
&lt;?php
define("CONSTANT", "Hello world.");
echo CONSTANT; // outputs "Hello world."
?&gt;
	  </programlisting>
	 </example></para>

	<para>
	 <function>define</function> devuelve TRUE en caso de éxito y FALSE 
         si ocurre un error.</para>

	<para>
	 Véase también <function>defined</function> y la sección
         <link linkend="language.constants">Constantes</link>.</para>

   </refsect1>
  </refentry>

  <refentry id="function.defined">
   <refnamediv>
	<refname>defined</refname>
	<refpurpose>Comprueba que una constante con nombre dada existe.</refpurpose>
   </refnamediv>
   <refsect1>
	<title>Descripción</title>
	<funcsynopsis>
	 <funcdef>int <function>defined</function></funcdef>
	 <paramdef>string <parameter>name</parameter></paramdef>
	</funcsynopsis>

	<para>
         Devuelve TRUE si la constante con nombre dada en
	 <parameter>name</parameter> (nombre) ha sido definida, false en otro caso.</para>

	<para>
	 Véase también <function>define</function> y la sección
         <link linkend="language.constants">Constantes</link>.</para>

   </refsect1>
  </refentry>

  <refentry id="function.die">
   <refnamediv>
    <refname>die</refname>
    <refpurpose>Envía a la salida un mensaje y finaliza el script actual</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>void <function>die</function></funcdef>
     <paramdef>string <parameter>message</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Esta construcción del lenguaje envía a la salida un mensaje y finaliza
     la ejecución del script. No devuelve nada.</simpara>
    <para>
     <example>
      <title>Ejemplo die</title>
      <programlisting>
&lt;?php
$filename = '/path/to/data-file';
$file = fopen($filename, 'r')
  or die "unable to open file ($filename)";
?&gt;
      </programlisting>
     </example></para>
   </refsect1>
  </refentry>

  <refentry id="function.eval">
   <refnamediv>
    <refname>eval</refname>
    <refpurpose>Evalúa una cadena de carácteres como código PHP</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>void <function>eval</function></funcdef>
     <paramdef>string <parameter>code_str</parameter></paramdef>
    </funcsynopsis>

    <simpara>
     <function>eval</function> evalúa la cadena de carácteres dada en
     <parameter>code_str</parameter> como código PHP. Entre otras cosas,
     ésto puede ser útil para almacenar código en un campo de texto de base
     de datos para una ejecución posterior.</simpara>

    <simpara>
     Hay algunos aspectos a tener en cuenta cuando se utiliza
     <function>eval</function>. Recuerde que la cadena de carácteres pasada
     debe ser código PHP válido, incluyendo aspectos como sentencias de terminación
     con un punto y coma para que el parser no finalice en la línea después de
     <function>eval</function>, y secuencias de formato correctas en
     <parameter>code_str</parameter>.</simpara>

    <simpara>
     Recuerde también que las variables a las que se les da valor en
     <function>eval</function> retendrán estos valores posteriormente en el
     script principal.</simpara>

    <para>
     <example>
      <title>Ejemplo eval() - fusión en un único texo</title>
      <programlisting>
&lt;?php
$string = 'cup';
$name = 'coffee';
$str = 'This is a $string with my $name in it.&lt;br&gt;';
echo $str;
eval( "\$str = \"$str\";" );
echo $str;
?&gt;
      </programlisting>
     </example></para>

    <para>
     El ejemplo anterior mostrará:
      <programlisting>
This is a $string with my $name in it.
This is a cup with my coffee in it.
      </programlisting></para>

   </refsect1>
  </refentry>

  <refentry id="function.exit">
   <refnamediv>
    <refname>exit</refname>
    <refpurpose>Finaliza el script actual</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>void <function>exit</function></funcdef>
     <void/>
    </funcsynopsis>
    <simpara>
     Esta construcción del lenguaje finaliza la ejecución del script.
     No devuelve nada.</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.func-get-arg">
   <refnamediv>
    <refname>func_get_arg</refname>
    <refpurpose>Devuelve un elemento de la lista de argumentos.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>func_get_arg</function></funcdef>
     <paramdef>int <parameter>arg_num</parameter></paramdef>
    </funcsynopsis>
    <simpara>
         Devuelve el argumento que está en la posición
	 <parameter>arg_num</parameter> en la lista de argumentos de
         una función definida por el usuario. Los argumentos de la
         función se cuentan comenzando por la posición cero.
         <function>func_get_arg</function>
         generará un aviso si se llama desde fuera de la definición
         de la función.
    </simpara>

	<simpara>
         Si <parameter>arg_num</parameter> es mayor que el número de
         argumentos pasados realmente, se generará un aviso y
	 <function>func_get_arg</function> devolverá FALSE.
	</simpara>

	<para>
	 <informalexample>
      <programlisting>
&lt;?php
function foo() {
   $numargs = func_num_args();
   echo "Number of arguments: $numargs&lt;br&gt;\n";
   if ( $numargs &gt;= 2 ) {
      echo "Second argument is: " . func_get_arg( 1 ) . "&lt;br&gt;\n";
   }
}

foo( 1, 2, 3 );
?&gt;
	  </programlisting>
	 </informalexample>
	</para>

	<simpara>
	 <function>func_get_arg</function> puede utilizarse conjuntamente
         con <function>func_num_args</function> y
	 <function>func_get_args</function> para permitir a las funciones
         definidas por el usuario que acepten listas de argumentos de
         longitud variable.
	</simpara>

	<note>
	 <simpara>
          Esta función fue añadida en PHP 4.
	 </simpara>
	</note>

   </refsect1>
  </refentry>

  <refentry id="function.func-get-args">
   <refnamediv>
    <refname>func_get_args</refname>
    <refpurpose>Devuelve un array que contiene la lista de argumentos de 
    una función.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>func_get_args</function></funcdef>
     <paramdef>void <parameter></parameter></paramdef>
    </funcsynopsis>
    <simpara>
         Devuelve un array en el que cada elemento es el miembro correspondiente
         de la lista de argumentos de la función definida por el usuario actual.         
         <function>func_get_args</function> generará un aviso si es llamada desde
         fuera de la definición de la función.
    </simpara>

    <para>
     <informalexample>
      <programlisting>
&lt;?php
function foo() {
   $numargs = func_num_args();
   echo "Number of arguments: $numargs&lt;br&gt;\n";
   if ( $numargs &gt;= 2 ) {
      echo "Second argument is: " . func_get_arg( 1 ) . "&lt;br&gt;\n";
   }
   $arg_list = func_get_args();
   for ( $i = 0; $i &lt; $numargs; $i++ ) {
      echo "Argument $i is: " . $arg_list[$i] . "&lt;br&gt;\n";
   }
} 

foo( 1, 2, 3 );
?&gt;
	  </programlisting>
	 </informalexample>
	</para>

	<simpara>
	 <function>func_get_args</function> puede utilizarse conjuntamente con
	 <function>func_num_args</function> y
	 <function>func_get_arg</function> para permitir a las funciones definidas
         por el usuario que acepten listas de argumentos de longitud variable.
	</simpara>

	<note>
	 <simpara>
          Esta función fue añadida en PHP 4.
	 </simpara>
	</note>

   </refsect1>
  </refentry>

  <refentry id="function.func-num-args">
   <refnamediv>
    <refname>func_num_args</refname>
    <refpurpose>Devuelve el número de argumentos pasados a la función.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>func_num_args</function></funcdef>
     <paramdef>void <parameter></parameter></paramdef>
    </funcsynopsis>
    <simpara>
       Devuelve el número de argumentos pasados a la función actual definida por el usuario.
       <function>func_num_args</function> generará un aviso si es llamada desde fuera de
       la definición de la función.
    </simpara>

	<para>
	 <informalexample>
	  <programlisting>
&lt;?php
function foo() {
   $numargs = func_num_args();
   echo "Number of arguments: $numargs\n";
}

foo( 1, 2, 3 );  // Prints 'Number of arguments: 3'
?&gt;
	  </programlisting>
	 </informalexample>
	</para>

	<simpara>
	 <function>func_num_args</function> puede utilizarse conjuntamente con
       <function>func_get_arg</function> y
	 <function>func_get_args</function> para permitir a las funciones definidas
       por el usuario que acepten listas de argumentos de longitud variable.
	</simpara>

	<note>
	 <simpara>
	  Esta función fue añadida en PHP 4.
	 </simpara>
	</note>

   </refsect1>
  </refentry>

  <refentry id="function.function-exists">
   <refnamediv>
    <refname>function_exists</refname>
    <refpurpose>Devuelve true si la función dada ha sido definida</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>function_exists</function></funcdef>
     <paramdef>string <parameter>function_name</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Consulta la lista de funciones definidas buscando <parameter>function_name</parameter>
     (nombre de función). Devuelve true si encuentra el nombre de función dado,
     false en otro caso.
    </simpara>
   </refsect1>
  </refentry>


  <refentry id="function.get-browser">
   <refnamediv>
	<refname>get_browser</refname>
	<refpurpose>Informa sobre lo que es capaz de hacer el navegador (browser) del usuario.</refpurpose>
   </refnamediv>
   <refsect1>
	<title>Descripción</title>
	<funcsynopsis>
	 <funcdef>object <function>get_browser</function></funcdef>
	 <paramdef>string <parameter><optional>user_agent</optional></parameter></paramdef>
	</funcsynopsis>

	<simpara>
	 <function>get_browser</function> intenta determinar las características
       del navegador del usuario. Para ello consulta el fichero
       de información del navegador, <filename>browscap.ini</filename>.
       Por defecto, se utiliza el valor de $HTTP_USER_AGENT;
       sin embargo, puede alterar ésto (i.e., consultando otra información del
       navegador) pasando el parámetro opcional <parameter>user_agent</parameter>
       a <function>get_browser</function>.
	</simpara>

	<simpara>
       La información se devuelve en un objto, que contendrá varios elementos de datos
       que representan, por ejemplo, los números de versión (mayor y menor) del navegador
       y la cadena ID; valores true/false para características como los marcos, JavaScript,
       y cookies; etc.
	</simpara>

	<simpara>
       <filename>browscap.ini</filename> contiene información de muchos navegadores,
       depende de las actualizaciones del usuario para mantener la base de datos actualizada.
       El formato del fichero es claramente auto-explicativo.
	</simpara>

	<para>
       El ejemplo siguiente muestra como se puede listar toda la información disponible
       recuperada del navegador del usuario.

	 <example>
	  <title>ejemplo <function>get_browser</function></title>
	  <programlisting>
&lt;?php
function list_array( $array ) {
   while ( list( $key, $value ) = each( $array ) ) {
	  $str .= "&lt;b&gt;$key:&lt;/b&gt; $value&lt;br&gt;\n";
   }
   return $str;
}
echo "$HTTP_USER_AGENT&lt;hr&gt;\n";
$browser = get_browser();
echo list_array( (array) $browser );
?&gt;
	  </programlisting>
	 </example>
	</para>

	<simpara>
       La salida del script anterior debería paracerse a ésto:
</simpara>

	<programlisting>
Mozilla/4.5 [en] (X11; U; Linux 2.2.9 i586)&lt;hr&gt;
&lt;b&gt;browser_name_pattern:&lt;/b&gt; Mozilla/4\.5.*&lt;br&gt;
&lt;b&gt;parent:&lt;/b&gt; Netscape 4.0&lt;br&gt;
&lt;b&gt;platform:&lt;/b&gt; Unknown&lt;br&gt;
&lt;b&gt;majorver:&lt;/b&gt; 4&lt;br&gt;
&lt;b&gt;minorver:&lt;/b&gt; 5&lt;br&gt;
&lt;b&gt;browser:&lt;/b&gt; Netscape&lt;br&gt;
&lt;b&gt;version:&lt;/b&gt; 4&lt;br&gt;
&lt;b&gt;frames:&lt;/b&gt; 1&lt;br&gt;
&lt;b&gt;tables:&lt;/b&gt; 1&lt;br&gt;
&lt;b&gt;cookies:&lt;/b&gt; 1&lt;br&gt;
&lt;b&gt;backgroundsounds:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;vbscript:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;javascript:&lt;/b&gt; 1&lt;br&gt;
&lt;b&gt;javaapplets:&lt;/b&gt; 1&lt;br&gt;
&lt;b&gt;activexcontrols:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;beta:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;crawler:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;authenticodeupdate:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;msn:&lt;/b&gt; &lt;br&gt;
	</programlisting>

	<simpara>
       Para conseguir ésto, su opción de fichero de configuración
       <link linkend="ini.sect.browscap">browscap</link>
       debe apuntar a la correcta localización del fichero
	 <filename>browscap.ini</filename>.
	</simpara>

	<simpara>
       Para más información (incluyendo localizaciones desde las que puede
       obtener un fichero <filename>browscap.ini</filename>), consulte las
       FAQ sobre PHP en <ulink url="&url.php.faq;">http://www.php.net/FAQ.html</ulink>.
	</simpara>

	<note>
	 <simpara>
        el soporte para browscap fue añadido en la versión 3.0b2 de PHP.
	 </simpara>
	</note>

   </refsect1>
  </refentry>


  <refentry id="function.ignore-user-abort">
   <refnamediv>
    <refname>ignore_user_abort</refname>
    <refpurpose>Establece si la desconexión de un cliente debe suspender la ejecución del script</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>ignore_user_abort</function></funcdef>
     <paramdef>int <parameter><optional>setting</optional></parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Esta función establece si la desconexión de un cliente debe provocar
     la suspensión del script. Devolverá el valor previo y puede ser llamada
     sin argumentos para devolver el valor actual y no cambiarlo. Véase la sección
     sobre la Gestión de la Conexión en el capítulo Características para una
     descripción completa de la gestión de la conexión en PHP.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.iptcparse">
   <refnamediv>
    <refname>iptcparse</refname>
    <refpurpose>Divide un bloque binario IPTC <ulink url="http://www.xe.net/iptc/">
      http://www.xe.net/iptc/</ulink> en su tags (etiquetas) individuales.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>array <function>iptcparse</function></funcdef>
     <paramdef>string <parameter>iptcblock</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Esta función divide un bloque binario IPTC en sus tags individuales. Devuelve
     un array utilizando el tagmarker (marcador de etiqueta) como un índice y el
     valor como valor. Devuelve false en caso de error o si no hubiese datos IPTC.
     Véase <function>GetImageSize</function> para un ejemplo.</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.leak">
   <refnamediv>
    <refname>leak</refname>
    <refpurpose>Filtra memoria</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>void <function>leak</function></funcdef>
     <paramdef>int <parameter>bytes</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     <function>Leak</function> filtra la cantidad de memoria especificada.</simpara>
    <simpara>
     Es muy útil cuando se depura el gestor de memoria, que automáticamente libera
     la memoria "filtrada" después de que se completa cada petición.</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.pack">
   <refnamediv>
    <refname>pack</refname>
    <refpurpose>empaqueta datos en una cadena binaria</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>string <function>pack</function></funcdef>
     <paramdef>string <parameter>format</parameter></paramdef>
     <paramdef>mixed <parameter><optional>args</optional></parameter>...</paramdef>
    </funcsynopsis>
    <para>
     Empaqueta los argumentos dados en una cadena binaria siguiendo el formato 
     <parameter>format</parameter>. Devuelve la cadena binaria que contiene los datos.
    </para>

    <para>
     El concepto de esta función fue tomado de Perl y todos los códigos de formateo
     realizan la misma función. La cadena de formato consiste en códigos
     de formato seguidos por un argumento opcional de repetición. El argumento
     de repetición puede ser un valor entero o * para repetir hasta el fin de la
     entrada de datos. Para a, A, h, H la cuenta de repetición representa
     cuántos caracteres se toman de un argumento de datos, para @ es la posición 
     absoluta donde poner los datos siguientes, para todo lo demás la cuenta de 
     repetición especifica cuántos argumentos de datos se toman y empaquetan
     en la cadena binaria resultante. Actualmente están implementados:
     <itemizedlist>
      <listitem><simpara>a cadena rellena de NUL</simpara></listitem>
      <listitem><simpara>A cadena rellena de ESPACIOS</simpara></listitem>
      <listitem><simpara>h cadena Hex, primero el medio byte inferior</simpara></listitem>
      <listitem><simpara>H cadena Hex, primero el medio byte superior</simpara></listitem>
      <listitem><simpara>c signed (con signo) char</simpara></listitem>
      <listitem><simpara>C unsigned (sin signo) char</simpara></listitem>
      <listitem><simpara>s signed short (siempre 16 bits, distribución de bytes de la máquina)</simpara></listitem>
      <listitem><simpara>S unsigned short (siempre 16 bits, distribución de bytes de la máquina)</simpara></listitem>
      <listitem><simpara>n unsigned short (siempre 16 bits, distribución de bytes gran endian)</simpara></listitem>
      <listitem><simpara>v unsigned short (siempre 16 bits, distribución de bytes pequeño endian)</simpara></listitem>
      <listitem><simpara>i signed integer (distribución de bytes y tamaños dependientes de la máquina)</simpara></listitem>
      <listitem><simpara>I unsigned integer (distribución de bytes y tamaños dependientes de la máquina)</simpara></listitem>
      <listitem><simpara>l signed long (siempre 32 bits, distribución de bytes de la máquina)</simpara></listitem>
      <listitem><simpara>L unsigned long (siempre 32 bits, distribución de bytes de la máquina)</simpara></listitem>
      <listitem><simpara>N unsigned long (siempre 32 bits, distribución de bytes gran endian)</simpara></listitem>
      <listitem><simpara>V unsigned long (siempre 32 bits, distribución de bytes pequeño endian)</simpara></listitem>
      <listitem><simpara>f float (representación y tamaño dependientes de la máquina)</simpara></listitem>
      <listitem><simpara>d double (representación y tamaño dependientes de la máquina)</simpara></listitem>
      <listitem><simpara>x byte NUL</simpara></listitem>
      <listitem><simpara>X Un byte hacia atrás</simpara></listitem>
      <listitem><simpara>@ relleno con NUL en la posición absoluta</simpara></listitem>
     </itemizedlist>

     <example>
      <title>cadena de formato para pack</title>
      <programlisting role="php">
$binarydata = pack("nvc*", 0x1234, 0x5678, 65, 66);
</programlisting>
      <para>
       La cadena binaria resultante tendrá 6 bytes de longitud y contendrá
       la secuencia de bytes 0x12, 0x34, 0x78, 0x56, 0x41, 0x42.</para>
     </example></para>

    <para>
     Adviértase que la distinción entre valores signed (con signo) y unsigned 
     (sin signo) sólo afecta a la función <function>unpack</function>, 
     ya que la función <function>pack</function> da el mismo resultado
     para códigos de formato con signo y sin signo.</para>

    <para>
     Nótese también que internamente PHP almacena valores enteros como valores
     con signo de un tamaño dependiente de la máquina. Si le da un valor entero
     sin signo demasiado grande para ser almacenado, será convertido a un double
     (doble), lo que a menudo produce resultados no deseados.</para>

   </refsect1>
  </refentry>

  <refentry id="function.register-shutdown-function">
  <refnamediv>
   <refname>register_shutdown_function</refname>
   <refpurpose>Registra una función para su ejecución en el cierre.</refpurpose>
  </refnamediv>
  <refsect1>
   <title>Descripción</title>
   <funcsynopsis>
    <funcdef>int <function>register_shutdown_function</function></funcdef>
    <paramdef>string <parameter>func</parameter></paramdef>
   </funcsynopsis>
   <simpara>
     Registra la función nombrada en <parameter>func</parameter> 
     para que se ejecute cuando el script procese su finalización.</simpara>
   <para>
     Aviso:</para>
   <simpara>
     Debido a que no se permite ningún tipo de salida en el navegador en esta
     función, no será capaz de depurarla utilizando sentencias como print o echo.</simpara> 
  </refsect1>
 </refentry>

  <refentry id="function.serialize">
   <refnamediv>
    <refname>serialize</refname>
    <refpurpose>genera una representación almacenable de un valor</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>string <function>serialize</function></funcdef>
     <paramdef>mixed <parameter>value</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     <function>serialize</function> devuelve una cadena que contiene 
     una representación byte-stream de <parameter>value</parameter> (valor) 
     que puede ser almacenada en algún lugar.</simpara>
    <simpara>
     Esto es útil para almacenar o pasar valores PHP sin pérdida de su
     tipo y estructura.</simpara>
    <simpara>
     Para convertir de nuevo la cadena serializada en un valor PHP,
     utilice <function>unserialize</function>.  <function>serialize</function>
     gestiona los tipos <type>integer</type>, <type>double</type>,
     <type>string</type>, <type>array</type> (multidimensional) y
     <type>object</type> (las propiedades del objeto pueden ser serializadas,
     pero se pierden los métodos).</simpara>
    <para>
     <example>
      <title>ejemplo serialize</title>
      <programlisting role="php">
// $session_data contains a multi-dimensional array with session
// information for the current user.  We use serialize() to store
// it in a database at the end of the request.

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn,
                     "UPDATE sessions SET data = ? WHERE id = ?");
$sqldata = array(serialize($session_data), $PHP_AUTH_USER);
if (!odbc_execute($stmt, &$sqldata)) {
    $stmt = odbc_prepare($conn,
                         "INSERT INTO sessions (id, data) VALUES(?, ?)");
    if (!odbc_execute($stmt, &$sqldata)) {
        /* Something went wrong.  Bitch, whine and moan. */
    }
}
</programlisting>
     </example></para>
   </refsect1>
  </refentry>

  <refentry id="function.sleep">
   <refnamediv>
    <refname>sleep</refname>
    <refpurpose>Ejecución retardada</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>void <function>sleep</function></funcdef>
     <paramdef>int <parameter>seconds</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     La función sleep retarda la ejecución del programa durante el número 
     de <parameter>seconds</parameter> (segundos) dado.</simpara>
    <simpara>
     Véase también <function>usleep</function>.</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.uniqid">
   <refnamediv>
    <refname>uniqid</refname>
    <refpurpose>Genera un id único.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>int <function>uniqid</function></funcdef>
     <paramdef>string <parameter>prefix</parameter></paramdef>
     <paramdef>boolean <parameter><optional>lcg</optional></parameter></paramdef>
    </funcsynopsis>
    <simpara>
     <function>uniqid</function> devuelve un identificador único con un prefijo 
     basado en la hora actual en microsegundos. El prefijo puede ser práctico
     por ejemplo si se generan identificadores simultáneamente en varios host
     que pueden haber generado el identificador en el mismo microsegundo.
     <parameter>prefix</parameter> (prefijo) puede ser de hasta 114
     carácteres de longitud.
    </simpara>
    <simpara>
     Si el parámetro opcional <parameter>lcg</parameter> es true,
     <function>uniqid</function> añadirá entropía "LCG combinada" al 
     final del valor devuelto, que hará el resultado más único.
    </simpara>
    <simpara>
     Con un <parameter>prefix</parameter> (prefijo) vacío, la cadena devuelta
     tendrá una longitud de 13 carácteres. Si <parameter>lcg</parameter> es
     true, tendrá 23 carácteres.
    </simpara>

	<note>
	 <simpara>
        El parámetro <parameter>lcg</parameter> está disponible sólo en PHP 4 y 
        PHP 3.0.13 y posteriores. 
	 </simpara>
	</note>

    <para>
     Si necesita un identificador único o testigo, y tiene la intención de 
     hacer público ese testigo al usuario por medio de una red (i.e. cookies
     de sesión) se recomienda que utilice algo parecido a estas líneas
     <informalexample><programlisting>
$token = md5(uniqid("")); // no random portion
$better_token = md5(uniqid(rand())); // better, difficult to guess
</programlisting></informalexample></para>
    <simpara>
     Esto creará un identificador de 32 carácteres (un número hexadecimal
     de 128 bits) que es extremadamente difícil de predecir.</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.unpack">
   <refnamediv>
    <refname>unpack</refname>
    <refpurpose>desempaqueta datos de una cadena binaria</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>array <function>unpack</function></funcdef>
     <paramdef>string <parameter>format</parameter></paramdef>
     <paramdef>string <parameter>data</parameter></paramdef>
    </funcsynopsis>
    <para>
     Desempaqueta datos de una cadena binaria en un array, de acuerdo
     al formato <parameter>format</parameter>. Devuelve un array que contiene
     los elementos de la cadena binaria desempaquetados.</para>

    <para>
     Unpack funciona de manera ligeramente diferente a Perl, ya que los datos
     desempaquetados se almacenan en un array asociativo. Para conseguir ésto
     debe nombrar los diferentes códigos de formato y separarlos por una barra
     inclinada /.

     <example>
      <title>cadena de formato unpack</title>
      <programlisting role="php">
$array = unpack("c2chars/nint", $binarydata);
</programlisting>
      <para>
       El array resultante contendrá las entradas "chars1",
       "chars2" y "int".</para>
     </example></para>

    <para>
     Para una explicación de los códigos de formato véase también:
     <function>pack</function></para>

    <para>
     Advierta que PHP almacena internamente los valores enteros con signo.
     Si desempaqueta un unsigned long (largo sin signo) demasiado grande
     y es del mismo tamaño tal como PHP almacena internamente los valores,
     el resultado será un número negativo a pesar de que se especificara
     desempaquetamiento sin signo.</para>

   </refsect1>
  </refentry>

  <refentry id="function.unserialize">
   <refnamediv>
    <refname>unserialize</refname>
    <refpurpose>crea un valor PHP de una representación almacenada</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>mixed <function>unserialize</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     <function>unserialize</function> toma una variable serializada
     (véase <function>serialize</function>) y la convierte en un valor PHP.
     Se devuelve el valor convertido, y puede ser un <type>integer</type> (entero),
     <type>double</type> (doble), <type>string</type> (cadena), <type>array</type> o
     <type>object</type> (objeto).
     Si fue serializado un objeto, sus métodos no son conservados en el valor
     devuelto.</simpara>
    <para>
     <example>
      <title>ejemplo unserialize</title>
      <programlisting role="php">
// Here, we use unserialize() to load session data from a database
// into $session_data.  This example complements the one described
// with <function>serialize</function>.

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn, "SELECT data FROM sessions WHERE id = ?");
$sqldata = array($PHP_AUTH_USER);
if (!odbc_execute($stmt, &$sqldata) || !odbc_fetch_into($stmt, &$tmp)) {
    // if the execute or fetch fails, initialize to empty array
    $session_data = array();
} else {
    // we should now have the serialized data in $tmp[0].
    $session_data = unserialize($tmp[0]);
    if (!is_array($session_data)) {
        // something went wrong, initialize to empty array
        $session_data = array();
    }
}
</programlisting>
     </example></para>
   </refsect1>
  </refentry>

  <refentry id="function.usleep">
   <refnamediv>
    <refname>usleep</refname>
    <refpurpose>Retrasa la ejecución, en microsegundos</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripción</title>
    <funcsynopsis>
     <funcdef>void <function>usleep</function></funcdef>
     <paramdef>int <parameter>micro_seconds</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     La función usleep retrasa la ejecución del programa durante un número
     de <parameter>micro_seconds</parameter> (microsegundos) dado.</simpara>
    <simpara>
     Véase también <function>sleep</function>.</simpara>
   </refsect1>
  </refentry>

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
