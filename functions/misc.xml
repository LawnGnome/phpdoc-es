<?xml version="1.0" encoding="iso-8859-1"?>
 <reference id="ref.misc">
  <title>Miscel&aacute;nea de funciones</title>
  <titleabbrev>Misc.</titleabbrev>

  <partintro>
   <para>
    Estas funciones est&aacute;n colacadas aqu&iacute; debido a que no parecen
    ajustarse a ninguna otra categor&iacute;a.</para>
  </partintro>

  <refentry id="function.connection-aborted">
   <refnamediv>
    <refname>connection_aborted</refname>
    <refpurpose>Devuelve &true; si el cliente est&aacute; desconectado</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>connection_aborted</function></funcdef>
     <paramdef>void <parameter></parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Devuelve &true; si el cliente est&aacute; desconectado. Vea la descripci&oacute;n de la 
     <link linkend="features.connection-handling">Gesti&oacute;n de la Conexi&oacute;n</link>
     en el cap&iacute;tulo <link linkend="features">Caracter&iacute;sticas </link>
     para una explicaci&oacute;n completa.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.connection-status">
   <refnamediv>
    <refname>connection_status</refname>
    <refpurpose>Devuelve el estado de la conexi&oacute;n en un campo de bits</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>connection_status</function></funcdef>
     <paramdef>void <parameter></parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Devuelve el estado de la conexi&oacute;n en un campo de bits. Vea la descripci&oacute;n de la
     <link linkend="features.connection-handling">Gesti&oacute;n de la Conexi&oacute;n </link> 
     en el cap&iacute;tulo <link linkend="features">Caracter&iacute;sticas</link> para una 
     explicaci&oacute;n completa.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.connection-timeout">
   <refnamediv>
    <refname>connection_timeout</refname>
    <refpurpose>Devuelve &true; si el script ha alcanzado su time out</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>connection_timeout</function></funcdef>
     <paramdef>void <parameter></parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Devuelve &true; si el script ha alcanzado su time out.  Vea la descripci&oacute;n de la 
     <link linkend="features.connection-handling">Gesti&oacute;n de la Conexi&oacute;n</link>
     en el cap&iacute;tulo <link linkend="features">Caracter&iacute;sticas</link>
     para una explicaci&oacute;n completa.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.define">
   <refnamediv>
	<refname>define</refname>
	<refpurpose>Define una constante con nombre.</refpurpose>
   </refnamediv>
   <refsect1>
	<title>Descripci&oacute;n</title>
	<funcsynopsis>
	 <funcdef>int <function>define</function></funcdef>
	 <paramdef>string <parameter>name</parameter></paramdef>
	 <paramdef>mixed <parameter>value</parameter></paramdef>
	 <paramdef>int <parameter><optional>case_insensitive</optional></parameter></paramdef>
	</funcsynopsis>
	
	<para>
         Define una constante con nombre, que es similar a una variable, excepto que:
	 <itemizedlist>
	  <listitem>
	   <simpara>
                Las constantes no tienen un s&iacute;mbolo d&oacute;lar '$' precedi&eacute;ndolas;
	   </simpara>
	  </listitem>
	  <listitem>
	   <simpara>
                Las constantes son accesibles desde cualquier lugar sin tener en 
                cuenta las reglas de &aacute;mbito de las variables.
	   </simpara>
	  </listitem>
	  <listitem>
	   <simpara>
                Las constantes no pueden ser redefinidas o iniciadas una vez
                que han sido establecidas, y
	   </simpara>
	  </listitem>
	  <listitem>
	   <simpara>
                Las constantes s&oacute;lo pueden evaluar valores escalares
	   </simpara>
	  </listitem>
	 </itemizedlist></para>

	<para>
         El nombre de la constante se da en 
	 <parameter>name</parameter> (nombre); 
         el valor se da en <parameter>value</parameter> (valor).</para>

	<para>
         El tercer par&aacute;metro opcional
	 <parameter>case_insensitive</parameter> tambi&eacute;n se encuentra disponible. 
         Si se da el valor <emphasis>1</emphasis>, la constante se definir&aacute; no 
         dintinguiendo may&uacute;sculas/minusculas. El comportamiento por defecto es
         si distinguir; i.e. CONSTANT y Constant representan valores 
         diferentes.</para>

	<para>
	 <example>
	  <title>Definici&oacute;n de Constantes</title>
	  <programlisting>
&lt;?php
define("CONSTANT", "Hello world.");
echo CONSTANT; // outputs "Hello world."
?&gt;
	  </programlisting>
	 </example></para>

	<para>
	 <function>define</function> devuelve &true; en caso de &eacute;xito y &false; 
         si ocurre un error.</para>

	<para>
	 V&eacute;ase tambi&eacute;n <function>defined</function> y la secci&oacute;n
         <link linkend="language.constants">Constantes</link>.</para>

   </refsect1>
  </refentry>

  <refentry id="function.defined">
   <refnamediv>
	<refname>defined</refname>
	<refpurpose>Comprueba que una constante con nombre dada existe.</refpurpose>
   </refnamediv>
   <refsect1>
	<title>Descripci&oacute;n</title>
	<funcsynopsis>
	 <funcdef>int <function>defined</function></funcdef>
	 <paramdef>string <parameter>name</parameter></paramdef>
	</funcsynopsis>

	<para>
         Devuelve &true; si la constante con nombre dada en
	 <parameter>name</parameter> (nombre) ha sido definida, &false; en otro caso.</para>

	<para>
	 V&eacute;ase tambi&eacute;n <function>define</function> y la secci&oacute;n
         <link linkend="language.constants">Constantes</link>.</para>

   </refsect1>
  </refentry>

  <refentry id="function.die">
   <refnamediv>
    <refname>die</refname>
    <refpurpose>Env&iacute;a a la salida un mensaje y finaliza el script actual</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>void <function>die</function></funcdef>
     <paramdef>string <parameter>message</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Esta construcci&oacute;n del lenguaje env&iacute;a a la salida un mensaje y finaliza
     la ejecuci&oacute;n del script. No devuelve nada.</simpara>
    <para>
     <example>
      <title>Ejemplo die</title>
      <programlisting>
&lt;?php
$filename = '/path/to/data-file';
$file = fopen($filename, 'r')
  or die "unable to open file ($filename)";
?&gt;
      </programlisting>
     </example></para>
   </refsect1>
  </refentry>

  <refentry id="function.eval">
   <refnamediv>
    <refname>eval</refname>
    <refpurpose>Eval&uacute;a una cadena de car&aacute;cteres como c&oacute;digo PHP</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>void <function>eval</function></funcdef>
     <paramdef>string <parameter>code_str</parameter></paramdef>
    </funcsynopsis>

    <simpara>
     <function>eval</function> eval&uacute;a la cadena de car&aacute;cteres dada en
     <parameter>code_str</parameter> como c&oacute;digo PHP. Entre otras cosas,
     &eacute;sto puede ser &uacute;til para almacenar c&oacute;digo en un campo de texto de base
     de datos para una ejecuci&oacute;n posterior.</simpara>

    <simpara>
     Hay algunos aspectos a tener en cuenta cuando se utiliza
     <function>eval</function>. Recuerde que la cadena de car&aacute;cteres pasada
     debe ser c&oacute;digo PHP v&aacute;lido, incluyendo aspectos como sentencias de terminaci&oacute;n
     con un punto y coma para que el parser no finalice en la l&iacute;nea despu&eacute;s de
     <function>eval</function>, y secuencias de formato correctas en
     <parameter>code_str</parameter>.</simpara>

    <simpara>
     Recuerde tambi&eacute;n que las variables a las que se les da valor en
     <function>eval</function> retendr&aacute;n estos valores posteriormente en el
     script principal.</simpara>

    <para>
     <example>
      <title>Ejemplo eval() - fusi&oacute;n en un &uacute;nico texo</title>
      <programlisting>
&lt;?php
$string = 'cup';
$name = 'coffee';
$str = 'This is a $string with my $name in it.&lt;br&gt;';
echo $str;
eval( "\$str = \"$str\";" );
echo $str;
?&gt;
      </programlisting>
     </example></para>

    <para>
     El ejemplo anterior mostrar&aacute;:
      <programlisting>
This is a $string with my $name in it.
This is a cup with my coffee in it.
      </programlisting></para>

   </refsect1>
  </refentry>

  <refentry id="function.exit">
   <refnamediv>
    <refname>exit</refname>
    <refpurpose>Finaliza el script actual</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>void <function>exit</function></funcdef>
     <void/>
    </funcsynopsis>
    <simpara>
     Esta construcci&oacute;n del lenguaje finaliza la ejecuci&oacute;n del script.
     No devuelve nada.</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.get-browser">
   <refnamediv>
	<refname>get_browser</refname>
	<refpurpose>Informa sobre lo que es capaz de hacer el navegador (browser) del usuario.</refpurpose>
   </refnamediv>
   <refsect1>
	<title>Descripci&oacute;n</title>
	<funcsynopsis>
	 <funcdef>object <function>get_browser</function></funcdef>
	 <paramdef>string <parameter><optional>user_agent</optional></parameter></paramdef>
	</funcsynopsis>

	<simpara>
	 <function>get_browser</function> intenta determinar las caracter&iacute;sticas
       del navegador del usuario. Para ello consulta el fichero
       de informaci&oacute;n del navegador, <filename>browscap.ini</filename>.
       Por defecto, se utiliza el valor de $HTTP_USER_AGENT;
       sin embargo, puede alterar &eacute;sto (i.e., consultando otra informaci&oacute;n del
       navegador) pasando el par&aacute;metro opcional <parameter>user_agent</parameter>
       a <function>get_browser</function>.
	</simpara>

	<simpara>
       La informaci&oacute;n se devuelve en un objto, que contendr&aacute; varios elementos de datos
       que representan, por ejemplo, los n&uacute;meros de versi&oacute;n (mayor y menor) del navegador
       y la cadena ID; valores &true;/false para caracter&iacute;sticas como los marcos, JavaScript,
       y cookies; etc.
	</simpara>

	<simpara>
       <filename>browscap.ini</filename> contiene informaci&oacute;n de muchos navegadores,
       depende de las actualizaciones del usuario para mantener la base de datos actualizada.
       El formato del fichero es claramente auto-explicativo.
	</simpara>

	<para>
       El ejemplo siguiente muestra como se puede listar toda la informaci&oacute;n disponible
       recuperada del navegador del usuario.

	 <example>
	  <title>ejemplo <function>get_browser</function></title>
	  <programlisting>
&lt;?php
function list_array( $array ) {
   while ( list( $key, $value ) = each( $array ) ) {
	  $str .= "&lt;b&gt;$key:&lt;/b&gt; $value&lt;br&gt;\n";
   }
   return $str;
}
echo "$HTTP_USER_AGENT&lt;hr&gt;\n";
$browser = get_browser();
echo list_array( (array) $browser );
?&gt;
	  </programlisting>
	 </example>
	</para>

	<simpara>
       La salida del script anterior deber&iacute;a paracerse a &eacute;sto:
</simpara>

	<programlisting>
Mozilla/4.5 [en] (X11; U; Linux 2.2.9 i586)&lt;hr&gt;
&lt;b&gt;browser_name_pattern:&lt;/b&gt; Mozilla/4\.5.*&lt;br&gt;
&lt;b&gt;parent:&lt;/b&gt; Netscape 4.0&lt;br&gt;
&lt;b&gt;platform:&lt;/b&gt; Unknown&lt;br&gt;
&lt;b&gt;majorver:&lt;/b&gt; 4&lt;br&gt;
&lt;b&gt;minorver:&lt;/b&gt; 5&lt;br&gt;
&lt;b&gt;browser:&lt;/b&gt; Netscape&lt;br&gt;
&lt;b&gt;version:&lt;/b&gt; 4&lt;br&gt;
&lt;b&gt;frames:&lt;/b&gt; 1&lt;br&gt;
&lt;b&gt;tables:&lt;/b&gt; 1&lt;br&gt;
&lt;b&gt;cookies:&lt;/b&gt; 1&lt;br&gt;
&lt;b&gt;backgroundsounds:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;vbscript:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;javascript:&lt;/b&gt; 1&lt;br&gt;
&lt;b&gt;javaapplets:&lt;/b&gt; 1&lt;br&gt;
&lt;b&gt;activexcontrols:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;beta:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;crawler:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;authenticodeupdate:&lt;/b&gt; &lt;br&gt;
&lt;b&gt;msn:&lt;/b&gt; &lt;br&gt;
	</programlisting>

	<simpara>
       Para conseguir &eacute;sto, su opci&oacute;n de fichero de configuraci&oacute;n
       <link linkend="ini.sect.browscap">browscap</link>
       debe apuntar a la correcta localizaci&oacute;n del fichero
	 <filename>browscap.ini</filename>.
	</simpara>

	<simpara>
       Para m&aacute;s informaci&oacute;n (incluyendo localizaciones desde las que puede
       obtener un fichero <filename>browscap.ini</filename>), consulte las
       FAQ sobre PHP en <ulink url="&url.php.faq;">http://www.php.net/FAQ.html</ulink>.
	</simpara>

	<note>
	 <simpara>
        el soporte para browscap fue a&ntilde;adido en la versi&oacute;n 3.0b2 de PHP.
	 </simpara>
	</note>

   </refsect1>
  </refentry>


  <refentry id="function.ignore-user-abort">
   <refnamediv>
    <refname>ignore_user_abort</refname>
    <refpurpose>Establece si la desconexi&oacute;n de un cliente debe suspender la ejecuci&oacute;n del script</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>ignore_user_abort</function></funcdef>
     <paramdef>int <parameter><optional>setting</optional></parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Esta funci&oacute;n establece si la desconexi&oacute;n de un cliente debe provocar
     la suspensi&oacute;n del script. Devolver&aacute; el valor previo y puede ser llamada
     sin argumentos para devolver el valor actual y no cambiarlo. V&eacute;ase la secci&oacute;n
     sobre la Gesti&oacute;n de la Conexi&oacute;n en el cap&iacute;tulo Caracter&iacute;sticas para una
     descripci&oacute;n completa de la gesti&oacute;n de la conexi&oacute;n en PHP.
    </simpara>
   </refsect1>
  </refentry>

  <refentry id="function.iptcparse">
   <refnamediv>
    <refname>iptcparse</refname>
    <refpurpose>Divide un bloque binario IPTC <ulink url="http://www.xe.net/iptc/">
      http://www.xe.net/iptc/</ulink> en su tags (etiquetas) individuales.
    </refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>array <function>iptcparse</function></funcdef>
     <paramdef>string <parameter>iptcblock</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     Esta funci&oacute;n divide un bloque binario IPTC en sus tags individuales. Devuelve
     un array utilizando el tagmarker (marcador de etiqueta) como un &iacute;ndice y el
     valor como valor. Devuelve &false; en caso de error o si no hubiese datos IPTC.
     V&eacute;ase <function>GetImageSize</function> para un ejemplo.</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.leak">
   <refnamediv>
    <refname>leak</refname>
    <refpurpose>Filtra memoria</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>void <function>leak</function></funcdef>
     <paramdef>int <parameter>bytes</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     <function>leak</function> filtra la cantidad de memoria especificada.</simpara>
    <simpara>
     Es muy &uacute;til cuando se depura el gestor de memoria, que autom&aacute;ticamente libera
     la memoria "filtrada" despu&eacute;s de que se completa cada petici&oacute;n.</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.pack">
   <refnamediv>
    <refname>pack</refname>
    <refpurpose>empaqueta datos en una cadena binaria</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>string <function>pack</function></funcdef>
     <paramdef>string <parameter>format</parameter></paramdef>
     <paramdef>mixed <parameter><optional>args</optional></parameter>...</paramdef>
    </funcsynopsis>
    <para>
     Empaqueta los argumentos dados en una cadena binaria siguiendo el formato 
     <parameter>format</parameter>. Devuelve la cadena binaria que contiene los datos.
    </para>

    <para>
     El concepto de esta funci&oacute;n fue tomado de Perl y todos los c&oacute;digos de formateo
     realizan la misma funci&oacute;n. La cadena de formato consiste en c&oacute;digos
     de formato seguidos por un argumento opcional de repetici&oacute;n. El argumento
     de repetici&oacute;n puede ser un valor entero o * para repetir hasta el fin de la
     entrada de datos. Para a, A, h, H la cuenta de repetici&oacute;n representa
     cu&aacute;ntos caracteres se toman de un argumento de datos, para @ es la posici&oacute;n 
     absoluta donde poner los datos siguientes, para todo lo dem&aacute;s la cuenta de 
     repetici&oacute;n especifica cu&aacute;ntos argumentos de datos se toman y empaquetan
     en la cadena binaria resultante. Actualmente est&aacute;n implementados:
     <itemizedlist>
      <listitem><simpara>a cadena rellena de NUL</simpara></listitem>
      <listitem><simpara>A cadena rellena de ESPACIOS</simpara></listitem>
      <listitem><simpara>h cadena Hex, primero el medio byte inferior</simpara></listitem>
      <listitem><simpara>H cadena Hex, primero el medio byte superior</simpara></listitem>
      <listitem><simpara>c signed (con signo) char</simpara></listitem>
      <listitem><simpara>C unsigned (sin signo) char</simpara></listitem>
      <listitem><simpara>s signed short (siempre 16 bits, distribuci&oacute;n de bytes de la m&aacute;quina)</simpara></listitem>
      <listitem><simpara>S unsigned short (siempre 16 bits, distribuci&oacute;n de bytes de la m&aacute;quina)</simpara></listitem>
      <listitem><simpara>n unsigned short (siempre 16 bits, distribuci&oacute;n de bytes gran endian)</simpara></listitem>
      <listitem><simpara>v unsigned short (siempre 16 bits, distribuci&oacute;n de bytes peque&ntilde;o endian)</simpara></listitem>
      <listitem><simpara>i signed integer (distribuci&oacute;n de bytes y tama&ntilde;os dependientes de la m&aacute;quina)</simpara></listitem>
      <listitem><simpara>I unsigned integer (distribuci&oacute;n de bytes y tama&ntilde;os dependientes de la m&aacute;quina)</simpara></listitem>
      <listitem><simpara>l signed long (siempre 32 bits, distribuci&oacute;n de bytes de la m&aacute;quina)</simpara></listitem>
      <listitem><simpara>L unsigned long (siempre 32 bits, distribuci&oacute;n de bytes de la m&aacute;quina)</simpara></listitem>
      <listitem><simpara>N unsigned long (siempre 32 bits, distribuci&oacute;n de bytes gran endian)</simpara></listitem>
      <listitem><simpara>V unsigned long (siempre 32 bits, distribuci&oacute;n de bytes peque&ntilde;o endian)</simpara></listitem>
      <listitem><simpara>f float (representaci&oacute;n y tama&ntilde;o dependientes de la m&aacute;quina)</simpara></listitem>
      <listitem><simpara>d double (representaci&oacute;n y tama&ntilde;o dependientes de la m&aacute;quina)</simpara></listitem>
      <listitem><simpara>x byte NUL</simpara></listitem>
      <listitem><simpara>X Un byte hacia atr&aacute;s</simpara></listitem>
      <listitem><simpara>@ relleno con NUL en la posici&oacute;n absoluta</simpara></listitem>
     </itemizedlist>

     <example>
      <title>cadena de formato para pack</title>
      <programlisting role="php">
$binarydata = pack("nvc*", 0x1234, 0x5678, 65, 66);
</programlisting>
      <para>
       La cadena binaria resultante tendr&aacute; 6 bytes de longitud y contendr&aacute;
       la secuencia de bytes 0x12, 0x34, 0x78, 0x56, 0x41, 0x42.</para>
     </example></para>

    <para>
     Advi&eacute;rtase que la distinci&oacute;n entre valores signed (con signo) y unsigned 
     (sin signo) s&oacute;lo afecta a la funci&oacute;n <function>unpack</function>, 
     ya que la funci&oacute;n <function>pack</function> da el mismo resultado
     para c&oacute;digos de formato con signo y sin signo.</para>

    <para>
     N&oacute;tese tambi&eacute;n que internamente PHP almacena valores enteros como valores
     con signo de un tama&ntilde;o dependiente de la m&aacute;quina. Si le da un valor entero
     sin signo demasiado grande para ser almacenado, ser&aacute; convertido a un double
     (doble), lo que a menudo produce resultados no deseados.</para>

   </refsect1>
  </refentry>

  <refentry id="function.serialize">
   <refnamediv>
    <refname>serialize</refname>
    <refpurpose>genera una representaci&oacute;n almacenable de un valor</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>string <function>serialize</function></funcdef>
     <paramdef>mixed <parameter>value</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     <function>serialize</function> devuelve una cadena que contiene 
     una representaci&oacute;n byte-stream de <parameter>value</parameter> (valor) 
     que puede ser almacenada en alg&uacute;n lugar.</simpara>
    <simpara>
     Esto es &uacute;til para almacenar o pasar valores PHP sin p&eacute;rdida de su
     tipo y estructura.</simpara>
    <simpara>
     Para convertir de nuevo la cadena serializada en un valor PHP,
     utilice <function>unserialize</function>.  <function>serialize</function>
     gestiona los tipos <type>integer</type>, <type>double</type>,
     <type>string</type>, <type>array</type> (multidimensional) y
     <type>object</type> (las propiedades del objeto pueden ser serializadas,
     pero se pierden los m&eacute;todos).</simpara>
    <para>
     <example>
      <title>ejemplo serialize</title>
      <programlisting role="php">
// $session_data contains a multi-dimensional array with session
// information for the current user.  We use serialize() to store
// it in a database at the end of the request.

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn,
                     "UPDATE sessions SET data = ? WHERE id = ?");
$sqldata = array(serialize($session_data), $PHP_AUTH_USER);
if (!odbc_execute($stmt, &$sqldata)) {
    $stmt = odbc_prepare($conn,
                         "INSERT INTO sessions (id, data) VALUES(?, ?)");
    if (!odbc_execute($stmt, &$sqldata)) {
        /* Something went wrong.  Bitch, whine and moan. */
    }
}
</programlisting>
     </example></para>
   </refsect1>
  </refentry>

  <refentry id="function.sleep">
   <refnamediv>
    <refname>sleep</refname>
    <refpurpose>Ejecuci&oacute;n retardada</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>void <function>sleep</function></funcdef>
     <paramdef>int <parameter>seconds</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     La funci&oacute;n sleep retarda la ejecuci&oacute;n del programa durante el n&uacute;mero 
     de <parameter>seconds</parameter> (segundos) dado.</simpara>
    <simpara>
     V&eacute;ase tambi&eacute;n <function>usleep</function>.</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.uniqid">
   <refnamediv>
    <refname>uniqid</refname>
    <refpurpose>Genera un id &uacute;nico.</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>int <function>uniqid</function></funcdef>
     <paramdef>string <parameter>prefix</parameter></paramdef>
     <paramdef>boolean <parameter><optional>lcg</optional></parameter></paramdef>
    </funcsynopsis>
    <simpara>
     <function>uniqid</function> devuelve un identificador &uacute;nico con un prefijo 
     basado en la hora actual en microsegundos. El prefijo puede ser pr&aacute;ctico
     por ejemplo si se generan identificadores simult&aacute;neamente en varios host
     que pueden haber generado el identificador en el mismo microsegundo.
     <parameter>prefix</parameter> (prefijo) puede ser de hasta 114
     car&aacute;cteres de longitud.
    </simpara>
    <simpara>
     Si el par&aacute;metro opcional <parameter>lcg</parameter> es &true;,
     <function>uniqid</function> a&ntilde;adir&aacute; entrop&iacute;a "LCG combinada" al 
     final del valor devuelto, que har&aacute; el resultado m&aacute;s &uacute;nico.
    </simpara>
    <simpara>
     Con un <parameter>prefix</parameter> (prefijo) vac&iacute;o, la cadena devuelta
     tendr&aacute; una longitud de 13 car&aacute;cteres. Si <parameter>lcg</parameter> es
     &true;, tendr&aacute; 23 car&aacute;cteres.
    </simpara>

	<note>
	 <simpara>
        El par&aacute;metro <parameter>lcg</parameter> est&aacute; disponible s&oacute;lo en PHP 4 y 
        PHP 3.0.13 y posteriores. 
	 </simpara>
	</note>

    <para>
     Si necesita un identificador &uacute;nico o testigo, y tiene la intenci&oacute;n de 
     hacer p&uacute;blico ese testigo al usuario por medio de una red (i.e. cookies
     de sesi&oacute;n) se recomienda que utilice algo parecido a estas l&iacute;neas
     <informalexample><programlisting>
$token = md5(uniqid("")); // no random portion
$better_token = md5(uniqid(rand())); // better, difficult to guess
</programlisting></informalexample></para>
    <simpara>
     Esto crear&aacute; un identificador de 32 car&aacute;cteres (un n&uacute;mero hexadecimal
     de 128 bits) que es extremadamente dif&iacute;cil de predecir.</simpara>
   </refsect1>
  </refentry>

  <refentry id="function.unpack">
   <refnamediv>
    <refname>unpack</refname>
    <refpurpose>desempaqueta datos de una cadena binaria</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>array <function>unpack</function></funcdef>
     <paramdef>string <parameter>format</parameter></paramdef>
     <paramdef>string <parameter>data</parameter></paramdef>
    </funcsynopsis>
    <para>
     Desempaqueta datos de una cadena binaria en un array, de acuerdo
     al formato <parameter>format</parameter>. Devuelve un array que contiene
     los elementos de la cadena binaria desempaquetados.</para>

    <para>
     Unpack funciona de manera ligeramente diferente a Perl, ya que los datos
     desempaquetados se almacenan en un array asociativo. Para conseguir &eacute;sto
     debe nombrar los diferentes c&oacute;digos de formato y separarlos por una barra
     inclinada /.

     <example>
      <title>cadena de formato unpack</title>
      <programlisting role="php">
$array = unpack("c2chars/nint", $binarydata);
</programlisting>
      <para>
       El array resultante contendr&aacute; las entradas "chars1",
       "chars2" y "int".</para>
     </example></para>

    <para>
     Para una explicaci&oacute;n de los c&oacute;digos de formato v&eacute;ase tambi&eacute;n:
     <function>pack</function></para>

    <para>
     Advierta que PHP almacena internamente los valores enteros con signo.
     Si desempaqueta un unsigned long (largo sin signo) demasiado grande
     y es del mismo tama&ntilde;o tal como PHP almacena internamente los valores,
     el resultado ser&aacute; un n&uacute;mero negativo a pesar de que se especificara
     desempaquetamiento sin signo.</para>

   </refsect1>
  </refentry>

  <refentry id="function.unserialize">
   <refnamediv>
    <refname>unserialize</refname>
    <refpurpose>crea un valor PHP de una representaci&oacute;n almacenada</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>mixed <function>unserialize</function></funcdef>
     <paramdef>string <parameter>str</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     <function>unserialize</function> toma una variable serializada
     (v&eacute;ase <function>serialize</function>) y la convierte en un valor PHP.
     Se devuelve el valor convertido, y puede ser un <type>integer</type> (entero),
     <type>double</type> (doble), <type>string</type> (cadena), <type>array</type> o
     <type>object</type> (objeto).
     Si fue serializado un objeto, sus m&eacute;todos no son conservados en el valor
     devuelto.</simpara>
    <para>
     <example>
      <title>ejemplo unserialize</title>
      <programlisting role="php">
// Here, we use unserialize() to load session data from a database
// into $session_data.  This example complements the one described
// with <function>serialize</function>.

$conn = odbc_connect("webdb", "php", "chicken");
$stmt = odbc_prepare($conn, "SELECT data FROM sessions WHERE id = ?");
$sqldata = array($PHP_AUTH_USER);
if (!odbc_execute($stmt, &$sqldata) || !odbc_fetch_into($stmt, &$tmp)) {
    // if the execute or fetch fails, initialize to empty array
    $session_data = array();
} else {
    // we should now have the serialized data in $tmp[0].
    $session_data = unserialize($tmp[0]);
    if (!is_array($session_data)) {
        // something went wrong, initialize to empty array
        $session_data = array();
    }
}
</programlisting>
     </example></para>
   </refsect1>
  </refentry>

  <refentry id="function.usleep">
   <refnamediv>
    <refname>usleep</refname>
    <refpurpose>Retrasa la ejecuci&oacute;n, en microsegundos</refpurpose>
   </refnamediv>
   <refsect1>
    <title>Descripci&oacute;n</title>
    <funcsynopsis>
     <funcdef>void <function>usleep</function></funcdef>
     <paramdef>int <parameter>micro_seconds</parameter></paramdef>
    </funcsynopsis>
    <simpara>
     La funci&oacute;n usleep retrasa la ejecuci&oacute;n del programa durante un n&uacute;mero
     de <parameter>micro_seconds</parameter> (microsegundos) dado.</simpara>
    <simpara>
     V&eacute;ase tambi&eacute;n <function>sleep</function>.</simpara>
   </refsect1>
  </refentry>

</reference>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
sgml-parent-document:nil
sgml-default-dtd-file:"../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
-->
