<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: lboshell Status: ready -->
 <chapter xml:id="chm.skins" xmlns="http://docbook.org/ns/docbook">
  <title>Desarrollo de skins</title>

  <para>
   Esta edición del Manual de PHP le permite a los usuarios
   elegir entre varios skins para desplegar los contenidos, así
   como desarrollar skins personalizados para suplir ciertas
   necesidades especiales. Hemos decidido ofrecer soporte de skins por
   que sentimos que un solo skin no puede satisfacer las necesidades
   de todos en una edición tan usada.
  </para>
  
  <para>
   Incluimos dos skins por defecto al interior del CHM. éstos
   no pueden ser modificados o eliminados, de modo que si tiene el
   CHM, ya tiene estos dos skins en su interior. El skin Low es
   optimizado para su uso en una ventana pequeña, el skin High
   es una variación de Low, con la adición de algunas
   gráficas para darle vida.
  </para>
  
  <para>
   Un skin debe tener por lo menos dos archivos, un archivo JavaScript
   de carga del skin y un archivo CSS. Ambos skins incorporados tienen
   éstos archivos al interior del CHM. El archivo JS de carga
   del skin debe, por lo menos, cargar el archivo CSS y desplegar los
   contenidos de la página en el visor. Teóricamente,
   hay dos tipos de skins: skins CSS y skins Full. Los skins CSS
   modifican sólo el CSS y no alteran la presentación de
   la página. Los skins Full modifican también la
   presentación de la página. Hemos incluido skins de
   ejemplo para ambos tipos de skins, el skin CSS y el skin Full
   (<literal>"greenlinks"</literal>
   y <literal>"headernostalgia"</literal> respectivamente).
  </para>
  
  <para>
   <warning>
    <para>
     Note que, aunque los métodos de desarrollo de skins
     actuales son definitivos, puede haber cambios profundos en las
     clases CSS usadas o en elementos de página mientras
     refinamos las ideas de desarrollo de skins. Dado que esta
     edición se encuentra en la actualidad en fase de
     desarrollo, la información descrita aquí no debe
     ser considerada completamente estable.
    </para>
   </warning>
  </para>
  
  <sect1 xml:id="chm.skins.display">
   <title>Proceso de Visualización de Página</title>

   <para>
    Si va a desarrollar su propio skin, debe saber cómo es
    cargada y desplegada al usuario una página, y cómo
    encaja un skin en este proceso. Para estos parágrafos, se
    asume que ha colocado su archivo CHM
    en <filename>c:\phpmanual</filename>, de modo que sea asequible
    como <filename>c:\phpmanual\php_manual_LANG.chm</filename> (en
    donde LANG es el código del lenguaje), y que desea ver la
    página de función de "echo", la cual
    es <filename>function.echo.html</filename> al interior del archivo
    CHM. Vea las <link linkend="chm.integration">secciones sobre
    integración</link> para más información sobre
    los contenidos CHM.
    <itemizedlist>
     <listitem>
      <simpara>
       Antes que nada, el contenido HTML es cargado
       desde <filename>function.echo.html</filename> en el interior
       del archivo CHM.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Al comienzo de éste archivo existe una etiqueta
       HTML <literal>&lt;script&gt;</literal>, la cual carga el
       archivo <filename>_script.js</filename> desde el archivo
       CHM. El archivo contiene todo el código JS requerido
       para continuar con el proceso. De especial importancia es que
       éste código JS define varias variables (como la
       ubicación del archivo CHM, o cuál es la
       página actual) y varias funciones para imprimir el
       menú de contexto o gestionar funciones en línea.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Finalmente, <filename>_script.js</filename> carga el archivo de
       preferencias desde el exterior, del archivo CHM
       (<filename>c:\phpmanual\php_manual_prefs.js</filename> en
       nuestro ejemplo). Este archivo JS define las variables de
       preferencia, y llama de vuelta a la
       función <literal>prefHandler()</literal>, que se
       encuentra definida también
       en <filename>_script.js</filename>.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       Aquella función carga el archivo JS de skin del modo que
       dictan las preferencias. El archivo de skin JS debe cargar el
       archivo CSS requerido, y definir una
       función <literal>displayPage()</literal>, la cual
       despliega la página al ser llamada.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       El archivo HTML (<filename>function.echo.html</filename> en
       este ejemplo) contiene también una llamada de
       función para cargar las notas de usuario, que
       simplemente coloca las notas en este archivo HTML usando DHTML
       para desplegarlas como si hubiesen estado aquí antes...
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       El archivo HTML contiene también un atributo onload en
       la etiqueta body, el cual llama a la
       función <literal>displayPage()</literal> definida por el
       skin para mostrarle la página al usuario. ésta es
       la última función en ser llamada, debe presentar
       la página en su forma completa al usuario.
      </simpara>
     </listitem>
    </itemizedlist>
    Cada acción es sincronizada al llamar de vuelta una
    función en el archivo previamente cargado, cuando el
    archivo JS está en memoria. La carga de notas y la carga de
    JS se sincroniza sólo con el evento onload de la
    página (el cual, como dice la página de
    documentación de Microsoft, solo se ejecuta cuando la
    página ha sido cargada completamente).
   </para>
   <para>
    Esta cadena de cargas y llamadas de retorno puede parecer muy
    complicada, pero hasta el momento ha sido la mejor manera de
    lograr tantas cosas en paralelo, al mismo tiempo que se
    sincronizan ciertas llamadas.
   </para>
   <para>
    Como puede ver, su archivo JavaScript de skin es cargado por
    <filename>_script.js</filename> y su
    función <literal>displayPage()</literal> es llamada por el
    evento onload de body.
   </para>
  </sect1>
   
  <sect1 xml:id="chm.skins.elements">
   <title>Elementos de Página</title>

   <para>
    Las páginas del Manual de PHP son todas archivos HTML con
    varias etiquetas HTML en ellos, tanto para propósitos de
    presentación como de división. Las páginas
    HTML contienen divisiones a ser usadas para propósitos de
    uso de skins y divisiones varias agregadas por las tablas XSL de
    DocBook.
   </para>
   
   <para>
    Una página HTML puede ser o una página de referencia
    de función o de otro tipo (como una descripción de
    una característica). Los skins deben prepararse para
    trabajar con estos dos tipos de páginas por separado la
    mayor parte del tiempo (dependiendo del diseño usado en la
    práctica).
   </para>
   
   <para>
    Las páginas son estructuradas usando
    etiquetas <literal>&lt;div&gt;</literal> con IDs apropiados para
    facilitar el trabajo de los escritores de skins. Una página
    consiste de estas partes:
    <itemizedlist>
     <listitem>
      <simpara>
       <literal>&lt;div xml:id="pageContent"&gt;&lt;/div&gt;</literal>
       contiene todo el interior de la página. La etiqueta
       comienza justo después
       de <literal>&lt;body&gt;</literal> y termina justo antes
       de <literal>&lt;/body&gt;</literal>. Esta división es
       oculta por defecto, necesita mostrarla después de estar
       listo con el proceso de re-escritura de la página.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>&lt;div xml:id="pageHeaders"&gt;&lt;/div&gt;</literal>
       contiene las partes de la cabecera de página. Esto
       incluye el título principal de sólo-texto (en una
       etiqueta <literal>&lt;span
       xml:id="pageTitle"&gt;&lt;/span&gt;</literal>) y las propiedades de
       función, en caso de que se trate de una página de
       función (contenida en <literal>&lt;span
       xml:id="funcPurpose"&gt;&lt;/span&gt;</literal>, <literal>&lt;span
       xml:id="funcAvail"&gt;&lt;/span&gt;</literal> y <literal>&lt;span
       xml:id="funcUsage"&gt;&lt;/span&gt;</literal>). En caso de que una
       de éstas tres etiquetas no se encuentre disponible, la
       página actual no es una página de función.
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>&lt;div xml:id="pageText"&gt;&lt;/div&gt;</literal>
       contiene la mayoría de contenidos de la página,
       incluyendo ejemplos, notas del manual, advertencias,
       etc. También incluye los segmentos "Vea también"
       por ahora, dado que aun no podemos diferenciar entre
       éstas partes y el texto normal (puede que sea algo que
       cambie en el futuro).
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>&lt;div xml:id="pageNotes"&gt;&lt;/div&gt;</literal>
       contiene las notas de usuario (cargadas éstas desde otro
       archivo HTML por JS). Contiene una cabecera, y luego una
       etiqueta <literal>&lt;div&gt;</literal> sin ID para cada nota
       de usuario y y spans para cada elemento de una nota de usuario
       (con los IDs "email", "date" y "text" respectivamente).
      </simpara>
     </listitem>
     <listitem>
      <simpara>
       <literal>&lt;div xml:id="pageNav"&gt;&lt;/div&gt;</literal>
       contiene la tabla de navegación, que a su vez es
       dividida en spans (<literal>&lt;span
       xml:id="navPrev"&gt;&lt;/span&gt;</literal>, <literal>&lt;span
       xml:id="navPath"&gt;&lt;/span&gt;</literal>, <literal>&lt;span
       xml:id="navNext"&gt;&lt;/span&gt;</literal>, <literal>&lt;span
       xml:id="navOnline"&gt;&lt;/span&gt;</literal>, <literal>&lt;span
       xml:id="navThisOnline"&gt;&lt;/span&gt;</literal>
       y <literal>&lt;span
       xml:id="navReportBug"&gt;&lt;/span&gt;</literal>), en donde
       navThisOnline y navReportBug se encuentran al interior de
       navOnline.
      </simpara>
     </listitem>
    </itemizedlist>
    Si desea re-escribir la página, debe primero leer las
    partes que necesita desde la página en variables JS, luego
    limpiar los contenidos de pageContent (o sólo la parte que
    desea re-escribir), escribir el contenido nuevo y mostrar el div
    pageContent para el usuario. Si no desea hacer cambios
    estructurales, puede simplemente desplegar el div pageContent y
    tan sólo especificar una tabla de estilos especial en su
    archivo JS de skin (vea el skin <literal>"greenlinks"</literal>
    como ejemplo).
   </para>
   <para>
    Puede encontrar un "skin Full" desarrollado para mostrarle
    cómo crear skins sobre esta estructura. El nombre del skin
    es <literal>"headernostalgia"</literal>. éste re-escribe la
    parte de la cabecera y remueve la tabla de navegación del
    pie de página.
   </para>
  </sect1>

  <sect1 xml:id="chm.skins.css">
   <title>Clases CSS</title>
   <para>
    En el momento, no podemos proveer documentación precisa
    sobre clases CSS utilizables, dado que algunas de las clases de
    estilos XSL de DocBook no son usadas y algunas clases son
    adicionadas. Por favor refiérase al archivo CSS de muestra
    incluido para la referencia inicial.
   </para>
  </sect1>

 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
