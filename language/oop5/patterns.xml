<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.4 Maintainer: baoengb Status: ready -->
<sect1 id="language.oop5.patterns">
 <title>Patrones</title>
 <para>
  Los patrones son formas de describir las mejores pr&aacute;cticas y los
  buenos dise&ntilde;os. Estos muestran una soluci&oacute;n flexible a los
  problemas comunes de programaci&oacute;n.
 </para>

 <sect2 id="language.oop5.patterns.factory">
  <title>Factory</title>
  <para>
   El patr&oacute;n Factory permita la instancia de objetos en tiempo de
   ejecuci&oacute;n. Es llamado el patr6oacute;n Factory puesto que es
   responsable de "manufacturar" un objeto.
  </para>
  <example>
   <title>M&eacute;todo Factory</title>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    // The factory method
    function &factory($type)
    {
        if (include_once 'Drivers/' . $type . '.php') {
            $classname = 'Driver_' . $type;
            return new $classname;
        } else {
            throw new Exception ('Driver not found');
        }
    }
}
?>
]]>
   </programlisting>
   <para>
    Al definir este m&eacute;todo en una clase se nos permite que los 
    drivers sean cargados al vuelo. Si la clase <literal>Example</literal>
    fuera una clase de abstracci&oacute;n de base de datos, cargar un 
    manejador de <literal>MySQL</literal> y <literal>SQLite</literal>
    podr&iacute;a ser hecho como sigue:
   </para>
   <programlisting role="php">
<![CDATA[
<?php
// Load a MySQL Driver
$mysql = Example::factory('MySQL');

// Load a SQLite Driver
$sqlite = Example::factory('SQLite');
?>
]]>
   </programlisting>
  </example>
 </sect2>

 <sect2 id="language.oop5.patterns.singleton">
  <title>Singleton</title>
  <para>
   El patr&oacute;n Singleton aplica a situaciones en las cuales hay la 
   necesidad de ser una sola instancia de una clase. El ejemplo m&aacute;s
   com&uacute;n de esto es una conexi&oacute;n de base de datos. 
   Implementando este patr&oacute;n permite a un programador hacer esta 
   simple isntancia f&aacute;cilmente accesible a muchos otros objetos.
  </para>
  <example>
   <title>Funci&oacute;n Singleton</title>
   <programlisting role="php">
<![CDATA[
<?php
class Example
{
    // Hold an instance of the class
    private static $instance;
    
    // A private constructor
    private function __construct() 
    {
        echo 'I am constructed';
    }

    // The singleton method
    public static function singleton() 
    {
        if (!isset(self::$instance)) {
            $c = __CLASS__;
            self::$instance = new $c;
        }

        return self::$instance;
    }
    
    // Example method
    public function bark()
    {
        echo 'Woof!';
    }
}

?>
]]>
   </programlisting>
   <para>
    Esto permite que se obtenga una simple instancia de la clase 
    <literal>Example</literal>.
   </para>
   <programlisting role="php">
<![CDATA[
<?php
// This would fail because the constructor is private
$test = new Example;

// This will always retrieve a single instance of the class
$test = Example::singleton();
$test->bark();

?>
]]>
   </programlisting>
  </example>
 </sect2>

</sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
