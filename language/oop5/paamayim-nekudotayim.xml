<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision$ -->
<!-- EN-Revision: n/a Maintainer: baoengb Status: ready -->
 <sect1 xml:id="language.oop5.paamayim-nekudotayim" xmlns="http://docbook.org/ns/docbook">
  <title>Alcance del operador de resoluci&oacute;n (::)</title>

  <para>
   El alcance del operador de resoluci&oacute;n (tambi&eacute;n llamado
   Paamayim Nekudotayim) o en t&eacute;rminos simples, dobles dos puntos,
   es un s&iacute;mbolo que permite acceso a los miembros o m&eacute;todos 
   <link linkend="language.oop5.static">estaticos</link>,
   <link linkend="language.oop5.constants">constantes</link>, y eliminados
   de una clase. 
  </para>

  <para>
   Cuando se referenc&iacute;an estos elementos desde afuera de la 
   definici&oacute;n de la clase, usan el nombre de la clase.
  </para>

  <para>
   Paamayin Nekudotayim podr&iacute;a, en principio, parecer una extra&ntilde;a
   elecci&oacute;n para nombrar un doble-dos-puntos. Sin embargo, mientras se
   escribia el compilador Zend 0.5, (el cu&aacute;l da fuerza a PHP 3),
   ese fue el nombre que el equipo decidi&oacute; darle. En realidad 
   significa doble-dos-puntos ¡en Hebreo!.
  </para>

  <example>
   <title>:: desde afuera de la definici&oacute;n de la clase</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass {
    const CONST_VALUE = 'A constant value';
}

echo MyClass::CONST_VALUE;
?>
]]>
   </programlisting>
  </example>

  <para>
   Dos palabras reservadas <varname>self</varname> y <varname>parent</varname>
   son usadas para accesar los miembros o m&eacute;todos desde adentro de 
   la definici&oacute;n de la clase.
  </para>

  <example>
   <title>:: desde dentro de la definici&oacute;n de la clase</title>
   <programlisting role="php">
<![CDATA[
<?php
class OtherClass extends MyClass
{
    public static $my_static = 'static var';

    public static function doubleColon() {
        echo parent::CONST_VALUE . "\n";
        echo self::$my_static . "\n";
    }
}

OtherClass::doubleColon();
?>
]]>
   </programlisting>
  </example>

  <para>
   Cuando al extender una clase se elimina las definiciones de un
   m&eacute;todo de la clase padre, PHP no llamar&aacute; el 
   m&eacute;todo de la clase padre. Es opcional a la clase 
   extendida decidir si se deba llamar al m&eacute;todo de la clase
   padre. Esto tambi&eacute;n aplica a <link
   linkend="language.oop5.decon">Constructores y Destructores</link>,
   <link linkend="language.oop5.overloading">Sobrecarga</link>, y 
   definici&oacute;n de los m&eacute;todos <link
   linkend="language.oop5.magic">M&aacute;gicos</link>.
  </para>

  <example>
   <title>Llamando al m&eacute;todo de la clase padre</title>
   <programlisting role="php">
<![CDATA[
<?php
class MyClass
{
    protected function myFunc() {
        echo "MyClass::myFunc()\n";
    }
}

class OtherClass extends MyClass
{
    // Override parent's definition
    public function myFunc()
    {
        // But still call the parent function
        parent::myFunc();
        echo "OtherClass::myFunc()\n";
    }
}

$class = new OtherClass();
$class->myFunc();
?>
]]>
   </programlisting>
  </example>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

