<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.4 Maintainer: baoengb Status: ready -->
  <sect1 id="language.oop5.object-comparison">
   <title>Comparaci&oacute;n de Objetos</title>
   <para>
    En PHP 5, la comparaci&oacute;n de objetos es m&aacute;s complicada que
    en PHP 4 y m&aacute;s de acuerdo con lo que uno esperar&iacute;a de un 
    lenguaje orientado a objetos (no es que PHP no sea uno de tales 
    lenguajes).
   </para>
   <para>
    Cuando se usa el operador de comparaci&oacute;n (<literal>==</literal>),
    las variables del objeto son comparadas de una forma simple, digase: 
    Dos instancias de objetos son iguales si tienes los mismos atributos y 
    valores, y son instancias de la misma clase.
   </para>
   <para>
    Por otro lado, cuando se usa el operador identico (<literal>===</literal>),
    las variables del objeto son identicas solo si refieren a la misma instancia
    de la misma clase.
   </para>
   <para>
    Un ejemplo clarificar&aacute; estas reglas.
    <example>
     <title>Ejemplo de comparaci&oacute;n de objetos en PHP 5</title>
     <programlisting role='php'>
<![CDATA[
<?php
function bool2str($bool)
{
    if ($bool === false) {
        return 'FALSE';
    } else {
        return 'TRUE';
    }
}

function compareObjects(&$o1, &$o2)
{
    echo 'o1 == o2 : ' . bool2str($o1 == $o2) . "\n";
    echo 'o1 != o2 : ' . bool2str($o1 != $o2) . "\n";
    echo 'o1 === o2 : ' . bool2str($o1 === $o2) . "\n";
    echo 'o1 !== o2 : ' . bool2str($o1 !== $o2) . "\n";
}

class Flag
{
    public $flag;

    function Flag($flag = true) {
        $this->flag = $flag;
    }
}

class OtherFlag
{
    public $flag;

    function OtherFlag($flag = true) {
        $this->flag = $flag;
    }
}

$o = new Flag();
$p = new Flag();
$q = $o;
$r = new OtherFlag();

echo "Two instances of the same class\n";
compareObjects($o, $p);

echo "\nTwo references to the same instance\n";
compareObjects($o, $q);

echo "\nInstances of two different classes\n";
compareObjects($o, $r);
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
Two instances of the same class
o1 == o2 : TRUE
o1 != o2 : FALSE
o1 === o2 : FALSE
o1 !== o2 : TRUE

Two references to the same instance
o1 == o2 : TRUE
o1 != o2 : FALSE
o1 === o2 : TRUE
o1 !== o2 : FALSE

Instances of two different classes
o1 == o2 : FALSE
o1 != o2 : TRUE
o1 === o2 : FALSE
o1 !== o2 : TRUE
]]>
     </screen>
    </example>
   </para>
  </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
