<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.7 Maintainer: baoengb Status: ready -->
 <sect1 id="language.oop5.overloading">
  <title>Sobrecarga</title>

  <para>
   Las llamadas a m&eacute;todos y los accesos a los miembros pueden ser
   sobrecargadas por medio de los m&eacute;todos __call, __get y __set. Estos
   m&eacute;todos ser&aacute;n accionados cuando su objeto u objeto heredado 
   no contengan los miembros o m&eacute;todos que est&aacute; intentado 
   accesar.
  </para>

  <sect2 id="language.oop5.overloading.members">
   <title>Sobrecarga de Miembros</title>

   <methodsynopsis>
    <type>void</type><methodname>__set</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
    <methodparam><type>mixed</type><parameter>value</parameter></methodparam>
   </methodsynopsis>
   <methodsynopsis>
    <type>mixed</type><methodname>__get</methodname>
    <methodparam><type>mixed</type><parameter>name</parameter></methodparam>
   </methodsynopsis>

   <para>
    Los miembros de la clase pueden ser sobrecargados para ejecutar c&oacute;digo 
    personalizado definido en la clase al definir estos m&eacute;todos de nombre 
    especial. El par&aacute;metro <varname>$name</varname> usado es el nombre 
    de la variable que debe ser asignada (set) u obtenida (get). El 
    par&aacute;metro <varname>$value</varname> del m&eacute;todo __set() 
    especificael calor que el objeto debe tener <varname>$value</varname>.
   </para>

   <example>
    <title>Ejemplo de sobrecarga con with __get y __set</title>
    <programlisting role="php">
<![CDATA[
<?php
class Setter
{
    public $n;
    private $x = array("a" => 1, "b" => 2, "c" => 3);

    function __get($nm)
    {
        print "Getting [$nm]\n";

        if (isset($this->x[$nm])) {
            $r = $this->x[$nm];
            print "Returning: $r\n";
            return $r;
        } else {
            echo "Nothing!\n";
        }
    }

    function __set($nm, $val)
    {
        print "Setting [$nm] to $val\n";

        if (isset($this->x[$nm])) {
            $this->x[$nm] = $val;
            echo "OK!\n";
        } else {
            echo "Not OK!\n";
        }
    }
}

$foo = new Setter();
$foo->n = 1;
$foo->a = 100;
$foo->a++;
$foo->z++;
var_dump($foo);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[
Setting [a] to 100
OK!
Getting [a]
Returning: 100
Setting [a] to 101
OK!
Getting [z]
Nothing!
Setting [z] to 1
Not OK!
object(Setter)#1 (2) {
    ["n"]=>
    int(1)
    ["x:private"]=>
    array(3) {
        ["a"]=>
        int(101)
        ["b"]=>
        int(2)
        ["c"]=>
        int(3)
    }
}
]]>
    </screen>

   </example>
  </sect2>

  <sect2 id="language.oop5.overloading.methods">
   <title>Sobrecarga de M&eacute;todos</title>

   <methodsynopsis>
    <type>mixed</type><methodname>__call</methodname>
    <methodparam><type>string</type><parameter>name</parameter></methodparam>
    <methodparam><type>array</type><parameter>arguments</parameter></methodparam>
   </methodsynopsis>

   <para>
    Los m&eacute;todos de la clase pueden ser sobrecargados para ejecutar 
    c&oacute;digo personalizado definido en la clase al definir este 
    m&eacute;todo en particular. El par&aacute;metro <varname>$value</varname>
    es el nombre de la funci&oacute;n que se pidi&oacute; usar. Los 
    argumentos que fueron pasados en la funci&oacute;n ser&aacute;n definidos
    como una matriz en el par&aacute;metro <varname>$arguments</varname>.
    El valor regresado del m&eacute;todo __call() ser&aacute; regresado a 
    quien haya llamado al m&eacute;todo.
   </para>

   <example>
    <title>Ejemplo de sobrecarga con __call</title>
    <programlisting role="php">
  <![CDATA[
<?php
class Caller
{
    private $x = array(1, 2, 3);

    function __call($m, $a)
    {
        print "Method $m called:\n";
        var_dump($a);
        return $this->x;
    }
}

$foo = new Caller();
$a = $foo->test(1, "2", 3.4, true);
var_dump($a);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen role="php">
<![CDATA[

Method test called:
array(4) {
    [0]=>
    int(1)
    [1]=>
    string(1) "2"
    [2]=>
    float(3.4)
    [3]=>
    bool(true)
}
array(3) {
    [0]=>
    int(1)
    [1]=>
    int(2)
    [2]=>
    int(3)
}
]]>
    </screen>
   </example>

  </sect2>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
