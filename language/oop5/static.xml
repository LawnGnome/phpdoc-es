<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 301114 Maintainer: x1v4nx Status: ready -->
<!-- Reviewed: no -->

 <sect1 xml:id="language.oop5.static" xmlns="http://docbook.org/ns/docbook">
  <title>Palabra Clave Static</title>

  <para>
   Declarar propiedades o métodos de clases como estáticos los hacen accesibles
   sin necesidad de una instanciación de la clase. Una propiedad declarada como
   static no puede ser accedida con un objeto de clase instanciado (pero si se
   puede con métodos estáticos).
  </para>

  <para>
   Por motivos de compatibilidad con PHP 4, si no se utiliza ninguna 
   declaración de <link linkend="language.oop5.visibility">visibilidad</link>,
   se tratará a las propiedades o métodos como si hubiesen sido definidos como
   <literal>public</literal>.
  </para>

  <para>
   Debido a que los métodos estáticos se pueden invocar sin tener creada
   una instancia del objeto, la pseudo-variable <varname>$this</varname>
   no está disponible dentro de los métodos declarados como static.
  </para>
  
  <para>
   Las propiedades estáticas no pueden ser accedidas a través del objeto
   utilizando el operador flecha (-&gt;).
  </para>

  <para>
   Invocar métodos no estáticos estáticamente genera un Warning a nivel de <constant>E_STRICT</constant>.
  </para>

  <para>
   Como cualquier otra variable estática en PHP, las propiedades estáticas
   sólo pueden ser inicializadas utilizando una string literal o una constante;
   las expresiones no están permitidas. Por tanto, puede inicializar una propiedad
   estática con enteros o arrays (por ejemplo), pero no puede hacerlo con
   otra variable, con el valor de devolución de una función, o con un objeto.
  </para>

  <para>
   A partir de PHP 5.3.0, es posible hacer referencia a una clase usando una
   variable. El valor de la variable no puede ser una palabra clave (por ej.,
   <literal>self</literal>, <literal>parent</literal> y <literal>static</literal>).
  </para>

  <example>
   <title>Ejemplo de propiedad estática</title>
   <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    public static $my_static = 'foo';

    public function staticValue() {
        return self::$my_static;
    }
}

class Bar extends Foo
{
    public function fooStatic() {
        return parent::$my_static;
    }
}


print Foo::$my_static . "\n";

$foo = new Foo();
print $foo->staticValue() . "\n";
print $foo->my_static . "\n";      // Undefined "Property" my_static

print $foo::$my_static . "\n";
$classname = 'Foo';
print $classname::$my_static . "\n"; // A partir de PHP 5.3.0

print Bar::$my_static . "\n";
$bar = new Bar();
print $bar->fooStatic() . "\n";
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Ejemplo de método estático</title>
    <programlisting role="php">
<![CDATA[
<?php
class Foo {
    public static function aStaticMethod() {
        // ...
    }
}

Foo::aStaticMethod();
$classname = 'Foo';
$classname::aStaticMethod(); // A partir de PHP 5.3.0
?>
]]>
    </programlisting>
  </example>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->