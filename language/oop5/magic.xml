<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 303436 Maintainer: chuso Status: ready -->
 <sect1 xml:id="language.oop5.magic" xmlns="http://docbook.org/ns/docbook">
  <title>Métodos Magic Methods</title>
  <para>
   Las siguientes funciones de clases en PHP son mágicas:
   <link linkend="language.oop5.decon.constructor"><literal>__construct</literal></link>,
   <link linkend="language.oop5.decon.destructor"><literal>__destruct</literal></link>,
   <link linkend="language.oop5.overloading.methods"><literal>__call</literal></link>,
   <link linkend="language.oop5.overloading.methods"><literal>__callStatic</literal></link>,
   <link linkend="language.oop5.overloading.members"><literal>__get</literal></link>,
   <link linkend="language.oop5.overloading.members"><literal>__set</literal></link>,
   <link linkend="language.oop5.overloading.members"><literal>__isset</literal></link>,
   <link linkend="language.oop5.overloading.members"><literal>__unset</literal></link>,
   <link linkend="language.oop5.magic.sleep"><literal>__sleep</literal></link>,
   <link linkend="language.oop5.magic.sleep"><literal>__wakeup</literal></link>,
   <link linkend="language.oop5.magic.tostring"><literal>__toString</literal></link>,
   <link linkend="language.oop5.magic.invoke"><literal>__invoke</literal></link>,
   <link linkend="language.oop5.magic.set-state"><literal>__set_state</literal></link> y
   <link linkend="language.oop5.cloning"><literal>__clone</literal></link>.
   No se pueden definir estas funciones en ninguna clase, salvo que se
   desee utilizar la funcionalidad asociada a ellas.
  </para>

  <caution>
   <simpara>
    PHP reserva todos los nombres de función que comienzan con __ como mágicas.
    Se recomienda no utilizar nombres de funciones que comiencen con __, salvo
    que se desee algunas de las funcionalidades mágicas documentadas
   </simpara>
  </caution>
 
  <sect2 xml:id="language.oop5.magic.sleep">
   <title><literal>__sleep</literal> y <literal>__wakeup</literal></title>
   <para>
    la función <function>serialize</function> comprueba si la clase tiene una función
    con el nombre mágico <literal>__sleep</literal>. En tal caso, se ejecuta esta 
    función antes de llevar a cabo la serialización. Puede limpiar un objeto, y se
    espera que devuelva un array que contenga los nombres de las variables del objeto
    que se deben serializar. Si el método no devuelve nada, entonces se serializa
    &null; y se emite <constant>E_NOTICE</constant>.
   </para>
   <note>
    <para>
     Para <literal>__sleep</literal> no es posible devolver nombres de propiedades
     privadas en las clases padre. Esto resultaría un nivel de error
     <constant>E_NOTICE</constant>. En su lugar, se debe utilizar la interfaz
     <classname>Serializable</classname>.
    </para>
   </note>
   <para>
    El uso para el que está destinado <literal>__sleep</literal> consiste en
    finalizar procesos o llevar a cabo tareas similares. Además, la función también
    es útil si se tiene un gran número de objetos que no se necesitan almacenar
    por completo.
   </para>
   <para>
    Por otra parte, <function>unserialize</function> comprueba si existe una función
    con el nomre mágico <literal>__wakeup</literal>. Si estuviera presente, esta función
    podría reconstruir cualquier recurso que tuviera el objeto.
   </para>
   <para>
    El uso para el que <literal>__wakeup</literal> está destinado, es reestablecer
    cualquier conexión con base de datos que se haya perdido durante la serialización,
    y para llevar a cabo otras reinicializaciones.
   </para>
   <example>
    <title>Sleep y wakeup</title>
    <programlisting role="php">
<![CDATA[
<?php
class Connection
{
    protected $link;
    private $server, $username, $password, $db;
    
    public function __construct($server, $username, $password, $db)
    {
        $this->server = $server;
        $this->username = $username;
        $this->password = $password;
        $this->db = $db;
        $this->connect();
    }
    
    private function connect()
    {
        $this->link = mysql_connect($this->server, $this->username, $this->password);
        mysql_select_db($this->db, $this->link);
    }
    
    public function __sleep()
    {
        return array('server', 'username', 'password', 'db');
    }
    
    public function __wakeup()
    {
        $this->connect();
    }
}
?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.tostring">
   <title><literal>__toString</literal></title>
   <para>
    El método <literal>__toString</literal> le permite a una clase decidir cómo
    comportarse cuando se le trate como a un string. Por ejemplo,
    lo que <literal>echo $obj;</literal> mostraría. Este método debe devolver un
    string, dado que si no, se emitirá un nivel de error fatal
    <constant>E_RECOVERABLE_ERROR</constant>.
   </para>
   <example>
    <title>Ejemplo básico</title>
    <programlisting role="php">
<![CDATA[
<?php
// Declaramos una clase básica
class TestClass
{
    public $foo;

    public function __construct($foo)
    {
        $this->foo = $foo;
    }

    public function __toString()
    {
        return $this->foo;
    }
}

$class = new TestClass('Hola');
echo $class;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hola
]]>
    </screen>
   </example>
   <para>
    Antes de PHP 5.2.0, sólo se invocaba al método <literal>__toString</literal>
    cuando se combinaba directamente con <function>echo</function> o con
    <function>print</function>. Desde PHP 5.2.0, se le llama en todos los
    contextos de strings (p.ej. en <function>printf</function> con el modificador
    <literal>%s</literal>) pero no en contextos de otro tipo (p.ej. con
    el modificador <literal>%d</literal>). Desde PHP 5.2.0,
    convertir objetos a string sin el método <literal>__toString</literal>
    emitirá un <constant>E_RECOVERABLE_ERROR</constant>.
   </para>
  </sect2>

  <sect2 xml:id="language.oop5.magic.invoke">
   <title><literal>__invoke</literal></title>
   <para>
    Al método <literal>__invoke</literal> se le llama cuando un script trata
    de llamar a un objeto como si fuera una función.
   </para>
   <note>
    <para>
     Esta funcionalidad está disponible desde PHP 5.3.0.
    </para>
   </note>
   <example>
    <title>Uso de <literal>__invoke</literal></title>
    <programlisting role="php">
<![CDATA[
<?php
class CallableClass
{
    public function __invoke($x)
    {
        var_dump($x);
    }
}
$obj = new CallableClass;
$obj(5);
var_dump(is_callable($obj));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int(5)
bool(true)
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.set-state">
   <title><literal>__set_state</literal></title>
   <para>
    A este método <link linkend="language.oop5.static">static</link> se le llama
    para las clases exportadas por <function>var_export</function>, desde PHP 5.1.0.
   </para>
   <para>
    El único parámetro de este método es un array que contenga las propiedades exportadas
    en la forma <literal>array('propiedad' => valor, ...)</literal>.
   </para>
   <example>
    <title>Uso d <literal>__set_state</literal> (desde PHP 5.1.0)</title>
    <programlisting role="php">
<![CDATA[
<?php

class A
{
    public $var1;
    public $var2;

    public static function __set_state($an_array) // Desde PHP 5.1.0
    {
        $obj = new A;
        $obj->var1 = $an_array['var1'];
        $obj->var2 = $an_array['var2'];
        return $obj;
    }
}

$a = new A;
$a->var1 = 5;
$a->var2 = 'foo';

eval('$b = ' . var_export($a, true) . ';'); // $b = A::__set_state(array(
                                            //    'var1' => 5,
                                            //    'var2' => 'foo',
                                            // ));
var_dump($b);

?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(A)#2 (2) {
  ["var1"]=>
  int(5)
  ["var2"]=>
  string(3) "foo"
}
]]>
    </screen>
   </example>
  </sect2>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
