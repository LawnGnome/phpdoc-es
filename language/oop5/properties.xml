<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: x1v4nx Status: ready -->
<!-- Reviewed: no -->

 <sect1 xml:id="language.oop5.properties" xmlns="http://docbook.org/ns/docbook">
  <title>Propiedades</title>

  <para>
   Las variables pertenecientes a clases son llamadas "propiedades".
   También se las puede referir usando otros términos como "atributos"
   o "campos", pero a los efectos de esta alusión se utilizará
   "propiedades". Éstas se definen usando una de las palabras claves
   <literal>public</literal>, <literal>protected</literal>,
   o <literal>private</literal>, seguido por una declaración normal
   de variable. Esta declaración puede incluir una inicialización,
   pero ésta debe ser constante--esto es, debe tener la capacidad
   de ser evaluada en compilación y no debe depender de información
   en tiempo de ejecución para ser evaluada.
  </para>
  <para>
   Vea <xref linkend="language.oop5.visibility" /> para más
   información sobre que significan
   <literal>public</literal>, <literal>protected</literal>,
   y <literal>private</literal>.
  </para>
  <note>
   <para>
    Con el fin de mantener la compatibilidad con PHP 4, PHP 5 continuará
    aceptando el uso de la palabra clave <literal>var</literal> en la
    declaración de propiedades en lugar de (o además de)
    <literal>public</literal>, <literal>protected</literal>,
    o <literal>private</literal>. Sin embargo, <literal>var</literal> ya
    no se requiere más. Entre las versiones 5.0 y 5.1.3 de PHP, el uso de
    <literal>var</literal> fue considerado obsoleto y emitirá un Warning
    <constant>E_STRICT</constant>, pero a partir de PHP 5.1.3 no está más
    obsoleta y no emitirá la advertencia.
   </para>
   <para>
    Si declara una propiedad utilizando <literal>var</literal> en lugar
    de <literal>public</literal>, <literal>protected</literal>,
    o <literal>private</literal>, entonces PHP tratará dicha propiedad
    como si hubiera sido definida como <literal>public</literal>.
   </para>
  </note>
  <para>
   Dentro de los métodos de clase, las propiedades, constantes y métodos
   pueden ser accedidos a través de <varname>$this-&gt;property</varname>
   (donde <literal>property</literal> es el nombre de la propiedad)
   a menos que el acceso sea a una propiedad estática dentro del contexto
   de un método de clase estático, en cuyo caso sería accedida usando
   <varname>self::$property</varname>. Vea
   <link linkend="language.oop5.static">Static</link> para más información.
  </para>
  <para>
   La pseudo-variable <varname>$this</varname> está disponible dentro de
   cualquier método de clase cuando éste es invocado dentro del contexto
   de un objeto. <varname>$this</varname> es una referencia del objeto
   que invoca (usualmente el objeto al que el método pertenece,
   pero posiblemente sea otro objeto, si el método es llamado
   <link linkend="language.oop5.static">estáticamente</link>
   desde el contexto de un objeto secundario).
  </para>

  <para>
   <example>
    <title>Declaración de propiedades</title>
    <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
   // Declaraciones inválida de propiedades:
   public $var1 = 'hola ' . 'mundo';
   public $var2 = <<<EOD
hola mundo
EOD;
   public $var3 = 1+2;
   public $var4 = self::myStaticMethod();
   public $var5 = $myVar;

   // Declaraciones válida de propiedades:
   public $var6 = myConstant;
   public $var7 = array(true, false);

   // Esto se permite sólo en PHP 5.3.0 y superiores.
   public $var8 = <<<'EOD'
hola mundo
EOD;
}
?>
]]>
    </programlisting>   
   </example>
  </para>

  <note>
   <para>
    Existen varias funciones interesantes para manipular clases y objetos.
    Quizá le interese echar un vistazo a las
    <link linkend="ref.classobj">Funciones de Clases/Objetos</link>.
   </para>
  </note>

  <para>
   A diferencia de
   <link linkend="language.types.string.syntax.heredoc">heredocs</link>,
   <link linkend="language.types.string.syntax.nowdoc">nowdocs</link>
   puede ser utilizado en cualquier contexto de datos estáticos,
   incluyendo declaración de propiedades.
   <example>
    <title>Ejemplo del uso de nowdoc para inicializar una propiedad</title>
    <programlisting role="php">
<![CDATA[
<?php
class foo {
   // A partir de PHP 5.3.0
   public $bar = <<<'EOT'
bar
EOT;
}
?>
]]>
    </programlisting>
   </example>
  </para>
  <note>
   <para>
    El soporte nowdoc fue agregado en PHP 5.3.0.
   </para>
  </note>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
