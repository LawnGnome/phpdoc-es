<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.2 Maintainer: baoengb Status: ready -->
 <sect1 xml:id="language.oop5.typehinting" xmlns="http://docbook.org/ns/docbook">
  <title>Type Hinting</title>
  <para>
   PHP 5 introduce Type Hinting. Las funciones ahora son capaces de forzar
   que los par&aacute;metros sean objetos especificando el nombre de la clase
   en el prototipo de la funci&oacute;n.
  </para>
  
  <example>
   <title>Ejemplo de Type Hinting</title>
    <programlisting role="php">
<![CDATA[
<?php
// An example class
class MyClass
{
    /**
     * A test function
     *
     * First parameter must be an object of type OtherClass
     */
    public function test(OtherClass $otherclass) {
        echo $otherclass->var;
    }
}

// Another example class
class OtherClass {
    public $var = 'Hello World';
}
?>
]]>
   </programlisting>
   <para>
    Al no satisfacer el tipo al que se le hace referencia resulta en
    un error fatal.
   </para>
    <programlisting role="php">
<![CDATA[
<?php
// An instance of each class
$myclass = new MyClass;
$otherclass = new OtherClass;

// Fatal Error: Argument 1 must be an object of class OtherClass
$myclass->test('hello');

// Fatal Error: Argument 1 must be an instance of OtherClass
$foo = new stdClass;
$myclass->test($foo);

// Fatal Error: Argument 1 must not be null
$myclass->test(null);

// Works: Prints Hello World
$myclass->test($otherclass);
?>
]]>
   </programlisting>
   <para>
    Type hinting tambi&eacute;n aplica en funciones:
   </para>
    <programlisting role="php">
<![CDATA[
<?php
// An example class
class MyClass {
    public $var = 'Hello World';
}

/**
 * A test function
 *
 * First parameter must be an object of type MyClass
 */
function MyFunction (MyClass $foo) {
    echo $foo->var;
}

// Works
$myclass = new MyClass;
MyFunction($myclass);
?>
]]>
   </programlisting>
  </example>
  <para>
   Type Hints puede solo ser del tipo <type>object</type>. El tradicional
   type hinting con <type>int</type> y <type>string</type> no est&aacute;
   permitidos.
  </para>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
