<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 331202 Maintainer: chuso Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->
<sect1 xml:id="language.oop5.typehinting" xmlns="http://docbook.org/ns/docbook">
 <title>Implicación de Tipos</title>
 <para>
  Desde PHP 5 se incorpora la implicación de tipos. Ahora, las funciones pueden 
  obligar a sus parámetros a que sean objetos (especificando el nombre de la clase
  en el prototipo de la función), interfaces, arrays (desde PHP 5.1) o tipos <type>callable</type>
  (despe PHP 5.4). Sin embargo, si se usa <type>NULL</type>
  como el valor predeterminado del parámetro, estará permitido como un argumento para
  cualquier llamada posterior.
 </para>
 
 <para>
  Si se especifica una clase o una interfaz como tipo implicado, también estarán
  permitidos todos sus hijos o implementaciones.
 </para>
 
 <para>
  La implicación de tipos no puede usarse con tipos escalares como <type>int</type> o
  <type>string</type>.
  Tampoco están permitidos los <link linkend="language.types.resource">Resources</link> y <link linkend="language.oop5.traits">Traits</link> are not allowed either.
 </para>
 
 <example>
  <title>Ejemplos de Implicación de Tipos</title>
  <programlisting role="php">
<![CDATA[
<?php
// Una clase de ejemplo
class MiClase
{
    /**
     * Una función de prueba 
     *
     * El primer parámetro debe ser un objeto del tipo OtraClase
     */
    public function prueba(OtraClase $otraclase) {
        echo $otraclase->var;
    }


    /**
     * Otra función de prueba
     *
     * El primer parámetro debe ser un array
     */
    public function prueba_array(array $array_entrada) {
        print_r($array_entrada);
    }

    /**
     * El primer parámetro debe ser un iterador
     */
    public function prueba_interface(Traversable $iterador) {
        echo get_class($iterador);
    }
    
    /**
     * El primer parámetro debe ser de tipo callable
     */
    public function prueba_callable(callable $llamada_retorno, $datos) {
        call_user_func($llamada_retorno, $datos);
    }
}

// Otra clase de ejemplo
class OtraClase {
    public $var = 'Hola Mundo';
}
?>
]]>
  </programlisting>
  <para>
   Si no se satisface la implicación de tipos, se produce un error fatal capturable
  </para>
  <programlisting role="php">
<![CDATA[
<?php
// Una instancia de cada clase
$miclase = new MiClase;
$otraclase = new OtraClase;

// Error Fatal: El argumento 1 debe ser un objeto de la clase OtraClase
$miclase->prueba('hola');

// Error Fatal: El argumento 1 debe ser una instancia de OtraClase
$foo = new stdClass;
$miclase->prueba($foo);

// Error fatal: El argumento 1 no puede ser null
$miclase->prueba(null);

// Funciona: Muestra en pantalla Hola Mundo
$miclase->prueba($otraclase);

// Error Fatal: El argumento 1 debe ser un array
$miclase->prueba('un string');

// Funciona: Muestra en pantalla el array
$miclase->prueba(array('a', 'b', 'c'));

// Funciona: Muestra en pantalla ArrayObject
$miclase->prueba_interface(new ArrayObject(array()));

// Funciona: Muestra en pantalla int(1)
$miclase->prueba_callable('var_dump', 1);
?>
]]>
  </programlisting>
  <para>
   La implicación de tipos tambíen se pueden usar con funciones:
  </para>
  <programlisting role="php">
<![CDATA[
<?php
// Una clase de ejemplo
class MiClase {
    public $var = 'Hola Mundo';
}

/**
 * Una función de prueba
 *
 * El primer parámetro debe ser un objeto del tipo MiClase
 */
function miFunción (MiClase $foo) {
    echo $foo->var;
}

// Funciona
$miclase = new MiClase;
miFunción($miclase);
?>
]]>
  </programlisting>
  <para>
   La implicación de tipos acepta valores NULL:
  </para>
  <programlisting role="php">
<![CDATA[
<?php

/* Se acepta el valor NULL */
function prueba(stdClass $obj = NULL) {

}

prueba(NULL);
prueba(new stdClass);

?>
]]>
  </programlisting>
 </example>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
