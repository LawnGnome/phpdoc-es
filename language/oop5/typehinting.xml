<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 297028 Maintainer: chuso Status: ready -->
 <sect1 xml:id="language.oop5.typehinting" xmlns="http://docbook.org/ns/docbook">
  <title>Type Hinting</title>
  <para>
   Desde PHP 5 se incorporan Type Hintings (Tipos Sugeridos). Ahora, las funciones pueden 
   obligar a que sus parámetros sean objetos (especificando el nombre de la clase
   en el prototipo de la función) o arrays (desde PHP 5.1). Sin embargo, si se
   usa <type>NULL</type> como valor por omisión, podrá pasarse NULL como parámetro.
  </para>
  
  <example>
   <title>Ejemplos de Type Hinting</title>
    <programlisting role="php">
<![CDATA[
<?php
// Una clase de ejemplo
class MyClass
{
    /**
     * Una función de prueba
     *
     * El primer parámetro debe ser un objeto del tipo OtherClass
     */
    public function test(OtherClass $otherclass) {
        echo $otherclass->var;
    }


    /**
     * Otra función de prueba
     *
     * El primer parámetro debe ser un array
     */
    public function test_array(array $input_array) {
        print_r($input_array);
    }
}

// Otra clase de ejemplo
class OtherClass {
    public $var = 'Hola Mundo';
}
?>
]]>
   </programlisting>
   <para>
    Si no se satisface el type hint, se produce un error fatal capturable
   </para>
    <programlisting role="php">
<![CDATA[
<?php
// Una instancia de cada clase
$myclass = new MyClass;
$otherclass = new OtherClass;

// Error Fatal: El argumento 1 debe ser un objeto de la clase OtherClass
$myclass->test('hello');

// Error Fatal: El argumento 1 debe ser una instancia de OtherClass
$foo = new stdClass;
$myclass->test($foo);

// Error fatal: El argumento 1 no puede ser null
$myclass->test(null);

// Funciona: Imprime en pantalla Hola Mundo
$myclass->test($otherclass);

// Error Fatal: El argumento 1 debe ser un array
$myclass->test_array('a string');

// Funciona: Imprime en pantalla el array
$myclass->test_array(array('a', 'b', 'c'));
?>
]]>
   </programlisting>
   <para>
    También se puede usar con funciones:
   </para>
    <programlisting role="php">
<![CDATA[
<?php
// Una clase de ejemplo
class MyClass {
    public $var = 'Hola Mundo';
}

/**
 * Una función de prueba
 *
 * El primer parámetro debe ser un objeto del tipo MyClass
 */
function MyFunction (MyClass $foo) {
    echo $foo->var;
}

// Funciona
$myclass = new MyClass;
MyFunction($myclass);
?>
]]>
   </programlisting>
   <para>
    Type hinting que acepta valores de tipo NULL:
   </para>
    <programlisting role="php">
<![CDATA[
<?php

/* Se acepta el valor NULL */
function test(stdClass $obj = NULL) {

}

test(NULL);
test(new stdClass);

?>
]]>
   </programlisting>
  </example>
  <para>
   Sólo se puede usar Type Hints con los tipos <type>object</type> y
   (desde PHP 5.1) <type>array</type>. Por contra, no se pueden usar
   sugerencias tradicionales, como <type>int</type> o <type>string</type>.
  </para>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
