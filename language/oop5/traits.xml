<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 313054 Maintainer: chuso Status: ready -->
 <sect1 xml:id="language.oop5.traits" xmlns="http://docbook.org/ns/docbook">
  <title>Traits</title>
  
  <para>
   Los traits (rasgos) son un mecanismo de reutilización de código en lenguajes de herencia simple, como
   PHP. El objetivo de un trait es el de reducir las limitaciones propias de la herencia simple
   permitiendo que los desarrolladores reutilicen a voluntad conjuntos de métodos sobre varias clases
   independientes y pertenecientes a clases jerárquicas distintas. La semántica a la hora combinar
   Traits y clases se define de tal manera que reduzca su complejidad y se eviten los problemas típicos
   asociados a la herencia múltiple y a los Mixins.
  </para>
  <para>
   Un Trait es similar a una clase, pero con el único objetivo de agrupar funcionalidades muy
   específicas y de una manera coherente. No se puede instanciar directamente un Trait.
   Es por tanto un añadido a la herencia tradicional, y habilita la composición horizontal
   de comportamientos; es decir, permite combinar miembros de clases sin tener que usar
   herencia.
  </para>
  
  <sect2 xml:id="language.oop5.traits.precedence">
   <title>Precedencia</title>
   <para>
    Los miembros heredados de una clase base se sobrescriben cuando se inserta
    otro miembro homónimo desde un Trait. De acuerdo con el orden de precedencia,
    los miembros de la clase actual sobrescriben los métodos del Trait, que a su vez
    sobrescribe los métodos heredados.
   </para>
  </sect2>
  
  <sect2 xml:id="language.oop5.traits.multiple">
   <title>Multiples Traits</title>
   <para>
    Se pueden insertar múltiples Traits en una clase, mediante una lista separada por comas
    en la sentencia use.
   </para>
  </sect2>
  
  <sect2 xml:id="language.oop5.traits.conflict">
   <title>Resolución de Conflictos</title>
   <para>
    Si dos Traits insertan un miembro con el mismo nombre, se produce un error fatal,
    siempre y cuando no se haya resuelto explicitamente el conflicto.
   </para>
   <para>
    Para resolver los conflictos de nombres entre Traits, uno de ellos puede usar el operador
    <literal>insteadof</literal> para definir la precedencia entre los Traits. Del mismo modo,
    podría usarse el operador <literal>as</literal> para crear un alias en el nombre del
    miembro conflictivo.
   </para>
  </sect2>
  
  <sect2 xml:id="language.oop5.traits.examples">
   &reftitle.examples;
   <example xml:id="language.oop5.traits.examples.ex1">
    <title>Ejemplo de Trait</title>
    <programlisting role="php">
<![CDATA[
<?php
trait ezcReflectionReturnInfo {
    function getReturnType() { /*1*/ }
    function getReturnDescription() { /*2*/ }
}

class ezcReflectionMethod extends ReflectionMethod {
    use ezcReflectionReturnInfo;
    /* ... */
}

class ezcReflectionFunction extends ReflectionFunction {
    use ezcReflectionReturnInfo;
    /* ... */
}
?>
]]>
    </programlisting>
   </example>
   <example xml:id="language.oop5.traits.examples.ex2">
    <title>Ejemplo de Orden de Precedencia</title>
    <para>
     Se sobrescribe un miembro de la clase base con el método
     insertado en MiHolaMundo a partir del Trait DecirMundo. El comportamiento es
     el mismo para los métodos definidos en la clase MiHolaMundo. Según el orden de precedencia
     los métodos de la clase actual sobrescriben los métodos del Trait,
     a la vez que el Trait sobrescribe los métodos de la clase base.
    </para>
    <programlisting role="php">
<![CDATA[
<?php
class Base {
  public function decirHola() {
    echo '¡Hola ';
  }
}

trait DecirMundo {
  public function decirHola() {
    parent::decirHola();
    echo 'Mundo!';
  }
}

class MiHolaMundo extends Base {
  use DecirMundo;
}

$o = new MiHolaMundo();
$o->decirHola();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
¡Hola Mundo!
]]>
    </screen>
   </example>
   <example xml:id="language.oop5.traits.examples.ex3">
    <title>Ejemplo de Orden de Precedencia #2</title>
    <programlisting role="php">
<![CDATA[
<?php
trait HolaMundo {
  public function decirHola() {
    echo '¡Hola Mundo!';
  }
}

class ElMundoNoEsSuficiente {
  use HolaMundo;
  public function decirHola() {
    echo '¡Hola Universo!';
  }
}

$o = new ElMundoNoEsSuficiente();
$o->decirHola();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
¡Hola Universo!
]]>
    </screen>
   </example>
   <example xml:id="language.oop5.traits.examples.ex4">
    <title>Uso de Múltiples Traits</title>
    <programlisting role="php">
<![CDATA[
<?php
trait Hola {
  public function decirHola() {
    echo 'Hola ';
  }
}

trait Mundo {
  public function decirMundo() {
    echo ' Mundo';
  }
}

class MiHolaMundo {
  use Hola, Mundo;
  public function decirAdmiración() {
    echo '!';
  }
}

$o = new MiHolaMundo();
$o->decirHola();
$o->decirMundo();
$o->decirAdmiración();>
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hola Mundo!
]]>
    </screen>
   </example>
   <example xml:id="language.oop5.traits.examples.ex5">
    <title>Resolución de Conflictos</title>
    <programlisting role="php">
<![CDATA[
<?php
trait A {
  public function smallTalk() {
    echo 'a';
  }
  public function bigTalk() {
    echo 'A';
  }
}

trait B {
  public function smallTalk() {
    echo 'b';
  }
  public function bigTalk() {
    echo 'B';
  }
}

class Talker {
  use A, B {
    B::smallTalk insteadof A;
    A::bigTalk insteadof B;
  }
}

class Aliased_Talker {
  use A, B {
    B::smallTalk insteadof A;
    A::bigTalk insteadof B;
    B::bigTalk as talk;
  }
}
?>
]]>
    </programlisting>
   </example>
   <example xml:id="language.oop5.traits.examples.ex6">
    <title>Traits Compuestos de Traits</title>
    <programlisting role="php">
<![CDATA[
<?php
trait Hola {
  public function decirHola() {
    echo 'Hola ';
  }
}

trait Mundo {
  public function decirMundo() {
    echo 'Mundo!';
  }
}

trait HolaMundo {
  use Hola, Mundo;
}

class MiHolaMundo {
  use HolaMundo;
}

$o = new MiHolaMundo();
$o->decirHola();
$o->decirMundo();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hola Mundo!
]]>
    </screen>
   </example>
   <example xml:id="language.oop5.traits.examples.ex7">
    <title>Resquisitos Express en Métodos Abstractos</title>
    <programlisting role="php">
<![CDATA[
<?php
trait Hola {
  public function decirHolaMundo() {
    echo 'Hola'.$this->obtenerMundo();
  }
  abstract public function obtenerMundo();
}

class MiHolaMundo {
  private $mundo;
  use Hola;
  public function obtenerMundo() {
    return $this->mundo;
  }
  public function asignarMundo($val) {
    $this->mundo = $val;
  }
}
?>
]]>
    </programlisting>
   </example>
   <example xml:id="language.oop5.traits.examples.ex8">
    <title>Variables estáticas</title>
    <programlisting role="php">
<![CDATA[
<?php
  trait Contador {
    public function inc() {
      static $c = 0;
      $c = $c + 1;
      echo "$c\n";
    }
  }

  class C1 {
    use Contador;
  }

  class C2 {
    use Contador;
  }

  $o = new C1(); $o->inc(); // echo 1
  $p = new C2(); $p->inc(); // echo 1
?>
]]>
    </programlisting>
   </example>
   <example xml:id="language.oop5.traits.examples.ex9">
    <title>Métodos Estáticos</title>
    <programlisting role="php">
<![CDATA[
<?php
  trait Singleton {
    public static function getInstance() { ... }
  }

  class MiSingleton extends SomeUnrelatedSuperClass {
    use Singleton;
  }

  MiSingleton::getInstance();
?>
]]>
    </programlisting>
   </example>
  </sect2>
 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
