<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.5 Maintainer: baoengb Status: ready -->
 <sect1 id="language.oop5.interfaces">
  <title>Interfaces de Objetos</title>
  <para>
   Las interfaces de objetos permiten crear c&oacute;digo el cual 
   especifica m&eacute;todos que una clase debe implementar, sin 
   tener que definir como ser&aacute;n manejados esos m&eacute;todos.
  </para>
  <para>
   Las interfaces son definidas usando la palabra reservada 'interface', 
   de la misma manera que las clases est&aacute;ndar, pero sin que 
   cualquiera de los m&eacute;todos tenga su contenido definido. Las
   clases que implementan una interface deben hacerlo usando la palabra
   reservada 'implements', y deben tener definiciones para todos los 
   m&eacute;todos enlistados en la interface. Las clases pueden implementar 
   m&aacute;s de una interface si lo desean, enlistando las interfaces 
   separadas por comas.
  </para>
  <para>
   Todos los m&eacute;todos en una interface deben ser publicos, esto es la 
   naturaleza de una interface.
  </para>
  <para>
   Teniendo que una clase implementa una interface, y no implemente todos los
   m&eacute;todos en esa interface, resultar&aacute; en un error fatal 
   que indica cuales m&eacute;todos no han sido implementados.
  </para>
  <example>
   <title>Ejemplo de Interface</title>
    <programlisting role="php">
<![CDATA[
<?php
// Declare the interface 'iTemplate'
interface iTemplate
{
    public function setVariable($name, $var);
    public function getHtml($template);
}

// Implement the interface
// This will work
class Template implements iTemplate
{
    private $vars = array();
  
    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }
  
    public function getHtml($template)
    {
        foreach($this->vars as $name => $value) {
            $template = str_replace('{' . $name . '}', $value, $template);
        }
 
        return $template;
    }
}

// This will not work
// Fatal error: Class BadTemplate contains 1 abstract methods
// and must therefore be declared abstract (iTemplate::getHtml)
class BadTemplate implements iTemplate
{
    private $vars = array();
  
    public function setVariable($name, $var)
    {
        $this->vars[$name] = $var;
    }
}

?>
]]>
   </programlisting>
  </example>

 </sect1>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
