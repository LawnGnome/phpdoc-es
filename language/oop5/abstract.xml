<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.13 Maintainer: baoengb Status: ready -->
 <sect1 id="language.oop5.abstract">
  <title>Abstracci&oacute;n de Objetos</title>

  <para>
   PHP 5 introduce clases y m&eacute;todos abstractos. No es permitido 
   crear una instancia de una clase que ha sido definida como abstracta.
   Cualquier clase que contenga por lo menos un m&eacute;todo abstracto 
   debe tambi&eacute;n ser abstracta. Los m&eacute;todos definidos como
   abstractos simplemente declaran el m&eacute;todo, no pueden definir la 
   implementaci&oacute;n
  </para>

  <para>
   Cuando se hereda desde una clase abstracta, todos los metodos marcados
   como abstractos en la declaraci&oacute;n de la clase padre, deben de 
   ser definidos por la clase hijo; adicionalmente, estos metodos se deben
   definir con la misma o menor 
   <link linkend="language.oop5.visibility">visibilidad</link>.  
   Si el m&eacute;todo abstracto es definido como protected,
   la implementaci&oacute; de la funci&oacute;n debe ser definida como 
   protected o public.
  </para>

  <example>
   <title>Ejemplos de la clase Abstract</title>
    <programlisting role="php">
<![CDATA[
<?php
abstract class AbstractClass
{
    // Force Extending class to define this method
    abstract protected function getValue();
    abstract protected function prefixValue($prefix);

    // Common method
    public function printOut() {
        print $this->getValue() . "\n";
    }
}

class ConcreteClass1 extends AbstractClass
{
    protected function getValue() {
        return "ConcreteClass1";
    }
    
    public function prefixValues($prefix) {
        return "{$prefix}ConcreteClass1";
    }
}

class ConcreteClass2 extends AbstractClass
{
    protected function getValue() {
        return "ConcreteClass2";
    }

    public function prefixValue($prefix) {
        return "{$prefix}ConcreteClass2";
    }
}

$class1 = new ConcreteClass1;
$class1->printOut();
echo $class1->prefixValue('FOO_') ."\n";

$class2 = new ConcreteClass2;
$class2->printOut();
echo $class2->prefixValue('FOO_') ."\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
ConcreteClass1
FOO_ConcreteClass1
ConcreteClass2
FOO_ConcreteClass2
]]>
   </screen>
  </example>

   <para>
    El co&oacute;digo anterior que no ten&iacute;a clases definidas por el 
    usuario o funciones llamadas 'abstractas' puede correr sin necesidad
    de modificaci&oacute;n.
   </para>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
