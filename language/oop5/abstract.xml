<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 316911 Maintainer: andresdzphp Status: ready -->
<!-- Reviewed: yes -->


 <sect1 xml:id="language.oop5.abstract" xmlns="http://docbook.org/ns/docbook">
  <title>Abstracción de clases</title>

  <para>
   PHP 5 introduce clases y métodos abstractos. Las clases definidas como
   abstract seguramente no son instanciadas y cualquier clase
   que contiene almenos un método abstracto debe ser definida como abstract. Los métodos
   definidos como abstractos simplemente declaran la estructura del método, pero no pueden
   definir la implementación.
  </para>

  <para>
   Cuando se hereda de una clase abstracta, todos los métodos definidos como
   abstract en la definición de la clase parent deben ser redefinidos en la
   clase child; adicionalmente, estos métodos deben ser definidos con la
   misma <link linkend="language.oop5.visibility">visibilidad</link> (o con
   una menos restrictiva). Por ejemplo, si el método abstracto está definido
   como protected, la implementación de la función puede ser redefinida como
   protected o public, pero nunca como private. Por otra parte, las estructuras 
   de los métodos tienen que coincidir, es decir, los (type hinting) tipos sugeridos 
   y el número de argumentos requeridos deben ser los mismos. Esto también aplica a los 
   constructores de PHP 5.4. Antes de PHP 5.4 las estructuras del constructor podían ser 
   diferentes.
  </para>

  <example>
   <title>Ejemplo de clase abstracta</title>
    <programlisting role="php">
<![CDATA[
<?php
abstract class AbstractClass
{
    // Forzando la extensión de clase para definir este método
    abstract protected function getValue();
    abstract protected function prefixValue($prefix);

    // Método común
    public function printOut() {
        print $this->getValue() . "\n";
    }
}

class ConcreteClass1 extends AbstractClass
{
    protected function getValue() {
        return "ConcreteClass1";
    }

    public function prefixValue($prefix) {
        return "{$prefix}ConcreteClass1";
    }
}

class ConcreteClass2 extends AbstractClass
{
    public function getValue() {
        return "ConcreteClass2";
    }

    public function prefixValue($prefix) {
        return "{$prefix}ConcreteClass2";
    }
}

$class1 = new ConcreteClass1;
$class1->printOut();
echo $class1->prefixValue('FOO_') ."\n";

$class2 = new ConcreteClass2;
$class2->printOut();
echo $class2->prefixValue('FOO_') ."\n";
?>
]]>
   </programlisting>
   &example.outputs;
   <screen>
<![CDATA[
ConcreteClass1
FOO_ConcreteClass1
ConcreteClass2
FOO_ConcreteClass2
]]>
   </screen>
  </example>

  <para>
   Códigos antiguos que no tengan clases o funciones definidas por
   el usuario llamadas 'abstract' deberían ejecutarse sin modificaciones.
  </para>
 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
