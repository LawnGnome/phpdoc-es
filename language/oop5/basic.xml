<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 330216 Maintainer: jpberdejo Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="language.oop5.basic" xmlns="http://docbook.org/ns/docbook">
 <title>Lo básico</title>
 
 <sect2 xml:id="language.oop5.basic.class">
  <title>class</title>
  <para>
   La definición básica de clases comienza con la palabra
   clave <literal>class</literal>, seguido por un nombre de clase,
   continuado por un par de llaves que encierran las definiciones
   de las propiedades y métodos pertenecientes a la clase.
  </para>
  <para>
   El nombre de clase puede ser cualquier etiqueta válida que no sea
   una <link linkend="reserved">palabra reservada</link> de PHP. Un nombre válido
   de clase comienza con una letra o un guión bajo, seguido de la cantidad de
   letras, números o guiones bajos que sea. Como una expresión regular, se
   expresaría de la siguiente forma:
   <literal>[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]*</literal>.
  </para>
  <para>
   Una clase puede tener sus propias
   <link linkend="language.oop5.constants">constantes</link>, <link linkend="language.oop5.properties">variables</link>
   (llamadas "propiedades"), y funciones (llamadas "métodos").
  </para>
  <example>
   <title>Definición simple de una clase</title>
   <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
    // Declaración de la propiedad
    public $var = 'a default value';

    // Declaración del método
    public function displayVar() {
        echo $this->var;
    }
}
?>
]]>
   </programlisting>
  </example>
  <para>
   La pseudo-variable <varname>$this</varname> está disponible cuando un
   método es invocado dentro del contexto de un objeto. <varname>$this</varname>
   es una referencia del objeto que invoca (usualmente el objeto al que el método
   pertenece, pero posiblemente sea otro objeto, si el método es llamado
   <link linkend="language.oop5.static">estáticamente</link> desde el contexto
   de un objeto secundario).
  </para>
  <para>
   <example xml:id="language.oop5.basic.class.this">
    <title>Algunos ejemplo de la pseudo-variable <varname>$this</varname></title>
    <programlisting role="php">
<![CDATA[
<?php
class A
{
    function foo()
    {
        if (isset($this)) {
            echo '$this está definida (';
            echo get_class($this);
            echo ")\n";
        } else {
            echo "\$this no está definida.\n";
        }
    }
}

class B
{
    function bar()
    {
        // Nota: la siguiente línea arrojará un Warning si E_STRICT está habilitada.
        A::foo();
    }
}

$a = new A();
$a->foo();

// Nota: la siguiente línea arrojará un Warning si E_STRICT está habilitada.
A::foo();
$b = new B();
$b->bar();

// Nota: la siguiente línea arrojará un Warning si E_STRICT está habilitada.
B::bar();
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
$this está definida (A)
$this no está definida.
$this está definida (B)
$this no está definida.
]]>
     </screen>
    </example>
   </para>
   
   <para>
    Desde PHP 5.5, la palabra clave <literal>class</literal> también se usa para la resolución
    de nombres de clases. Se puede obtener un string con un nombre completamente cualificado de la
    clase <literal>NombreClase</literal> con <literal>NombreClase::class</literal>.
    Esto es particularmete útil con los <link linkend="language.namespaces">
    espacios de nombres</link>.
   </para>
   <para>
    <example xml:id="language.oop5.basic.class.name">
     <title>Ressolución de nombres de clases</title>
     <programlisting role="php">
<![CDATA[
<?php
namespace N {
    class C {
    }
    
    echo C::class;
}
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
N\C
]]>
     </screen>
    </example>
   </para>
  </sect2>
  
  <sect2 xml:id="language.oop5.basic.new">
   <title>new</title>
   <para>
    Para crear una instancia de una clase, la palabra clave <literal>new</literal> debe
    ser usada. Un objeto siempre se creará a menos que el objeto tenga un
    <link linkend="language.oop5.decon">constructor</link> que arroje una
    <link linkend="language.exceptions">excepción</link> en caso de error.
    Las clases deberían ser definidas antes de la instanciación (y en algunos casos
    esto es un requerimiento).
   </para>
   <para>
    Si un <type>string</type> que contiene el nombre de una clase se usa con
    <literal>new</literal>, una nueva instancia de esa clase será creada. Si
    la clase está en un espacio de nombres, su nombre completo debe ser usado cuando se hace esto.
   </para>
   <example>
    <title>Creación de una instancia</title>
    <programlisting role="php">
<![CDATA[
<?php
$instance = new SimpleClass();

// Esto también se puede hacer con variables:
$className = 'Foo';
$instance = new $className(); // Foo()
?>
]]>
    </programlisting>
   </example>
   <para>
    En el contexto de una clase, es posible crear un nuevo objeto con
    <literal>new self</literal> y <literal>new parent</literal>.
   </para>
   <para>
    Cuando se asigna una instancia de una clase ya creada a una nueva variable, ésta última
    accederá a la misma instancia como al objeto que le fue asignado. Esta
    conducta es la misma cuando se pasan instancias a una función. Una copia
    de un objeto ya creado se puede lograr a través de la
    <link linkend="language.oop5.cloning">clonación</link> de la misma.
   </para>
   <example>
    <title>Asignación de objetos</title>
    <programlisting role="php">
<![CDATA[
<?php

$instance = new SimpleClass();

$assigned   =  $instance;
$reference  =& $instance;

$instance->var = '$assigned tendrá este valor';

$instance = null; // $instance y $reference se transforman en null

var_dump($instance);
var_dump($reference);
var_dump($assigned);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
NULL
NULL
object(SimpleClass)#1 (1) {
   ["var"]=>
     string(30) "$assigned tendrá este valor"
}
]]>
    </screen>
   </example>
   <para>
    PHP 5.3.0 introdujo un par de nuevas maneras para crear instancias de un
    objeto:
   </para>
   <example>
    <title>Creando nuevos objetos</title>
    <programlisting role="php">
<![CDATA[
<?php
class Test
{
    static public function getNew()
    {
        return new static;
    }
}

class Child extends Test
{}

$obj1 = new Test();
$obj2 = new $obj1;
var_dump($obj1 !== $obj2);

$obj3 = Test::getNew();
var_dump($obj3 instanceof Test);

$obj4 = Child::getNew();
var_dump($obj4 instanceof Child);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
bool(true)
bool(true)
bool(true)
]]>
    </screen>
   </example>
  </sect2>
  
  <sect2 xml:id="language.oop5.basic.extends">
   <title>extends</title>
   <para>
    Una clase puede heredar los métodos y propiedades de otra clase al
    utilizar la palabra clave <literal>extends</literal> en la declaración
    de la clase. No es posible extender múltiples clases; una clase
    sólo puede heredar de una clase base.
   </para>
   <para>
    Los métodos y propiedades heredados pueden ser sobrescritos
    con la redeclaración de éstos utilizando el mismo nombre que en
    la clase parent. Sin embargo, si la clase parent definió un método
    como <link linkend="language.oop5.final">final</link>, éste no
    podrá ser sobrescrito. Es posible acceder a los métodos sobrescritos o
    propiedades estáticas referenciándolos con
    <link linkend="language.oop5.paamayim-nekudotayim">parent::</link>.
   </para>
   <para>
    Cuando se sobrescriben métodos, la cantidad y disposición de los parámetros
    debería ser la misma o PHP generará un error a nivel de <constant>E_STRICT</constant>.
    Esto no se aplica a los constructores, que permiten la sobrescritura con diferentes
    parámetros.
   </para>
   <example>
    <title>Herencia simple de clases</title>
    <programlisting role="php">
<![CDATA[
<?php
class ExtendClass extends SimpleClass
{
    // Redefinición del método parent
    function displayVar()
    {
        echo "Clase extendida\n";
        parent::displayVar();
    }
}

$extended = new ExtendClass();
$extended->displayVar();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Clase extendida
un valor por defecto
]]>
    </screen>
   </example>
  </sect2>
  
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
