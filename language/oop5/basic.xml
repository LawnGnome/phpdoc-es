<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.6 $ -->
<!-- EN-Revision: 1.23 Maintainer: baoengb Status: ready -->

 <sect1 xml:id="language.oop5.basic" xmlns="http://docbook.org/ns/docbook">
  <title>Las Bases</title>

  <sect2 xml:id="language.oop5.basic.class">
   <title>clase</title>
   <para>
    Cada definici&oacute;n de clase empieza con la palabra "class", seguida 
    por un nombre de clase, el cual puede ser cualquier nombre que no est&eacute;
    en la lista de palabras <link linkend="reserved">reservadas</link> en PHP. 
    Seguida por un par de llaves curvas, las cuales contienen la definici&oacute;n 
    de los miembros de la clase y los m&eacute;todos. Una seudo variable 
    <varname>$this</varname> est&aacute; disponible cuando un m&eacute;todo es 
    llamado dentro del contexto de un objeto. <varname>$this</varname> es una 
    referencia al objeto que se est&aacute; usando (usualmente el objeto al que 
    el m&eacute;todo pertenece, pero puede ser otro objeto, si un m&eacute;todo 
    es llamado <link linkend="language.oop5.static">est&aacute;ticamente</link>
    desde el contexto de un objeto secundario). Este es ilustrado en los 
    siguientes ejemplos:
    <example>
     <title><varname>$this</varname> variable in object-oriented language</title>
     <programlisting role="php">
<![CDATA[
<?php
class A
{
  function foo()
  {
      if (isset($this)) {
          echo '$this is defined (';
          echo get_class($this);
          echo ")\n";
      } else {
          echo "\$this is not defined.\n";
      }
  }
}

class B
{
    function bar()
    {
        A::foo();
    }
}

$a = new A();
$a->foo();
A::foo();
$b = new B();
$b->bar();
B::bar();
?>
]]>
     </programlisting>
     &example.outputs;
     <screen>
<![CDATA[
$this is defined (a)
$this is not defined.
$this is defined (b)
$this is not defined.
]]>
     </screen>
    </example>
   </para>
   <example>
    <title>Definici&oacute;n simple de una clase</title>
    <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
    // member declaration
    public $var = 'a default value';

    // method declaration
    public function displayVar() {
        echo $this->var;
    }
}
?>
]]>
    </programlisting>
   </example>

   <para>
    El valor por defecto debe ser una expresi&oacute;n constante, por ejemplo
    no una variable, ni un miembro de clase o llamada a funci&oacute;n.
    <example>
     <title>Valor por defecto de un miembro de clase</title>
     <programlisting role="php">
<![CDATA[
<?php
class SimpleClass
{
    // invalid member declarations:
    public $var1 = 'hello '.'world';
    public $var2 = <<<EOD
hello world
EOD;
    public $var3 = 1+2;
    public $var4 = self::myStaticMethod();
    public $var5 = $myVar;
 
    // valid member declarations:
    public $var6 = myConstant;
    public $var7 = self::classConstant;
    public $var8 = array(true, false);
 
  
}
?>
]]>
     </programlisting>   
    </example>
   </para>
   <note>
    <para>
     Hay algunas funciones &uacute;tiles para el manejo de clases y objectos.
     Tal vez quieras checar las 
     <link linkend="ref.classobj">Funciones para Clases/Objectos</link>.
    </para>
   </note>
  </sect2>

  <sect2 xml:id="language.oop5.basic.new">
   <title>Nuevo objeto</title>
   <para>
    Para crear una instancia de un objeto, un nuevo objeto debe ser creado 
    y asignado a una variable. Un objeto siempre ser&aacute; asignado 
    cuando se crea un objeto nuevo a menos que el objeto tenga un 
    <link linkend="language.oop5.decon">constructor</link> definido que 
    arroje una <link linkend="language.exceptions">excepci&oacute;n</link>
    en caso de error. Las clases deben ser definidas antes de crear las
    instancias (y en algunos casos esto es un requerido).
   </para>
   <example>
    <title>Creando una instancia</title>
    <programlisting role="php">
<![CDATA[
<?php
$instance = new SimpleClass()
?>
]]>
    </programlisting>
   </example>
   <para>
    Cuando se asigna una instancia de un objeto previamente creado a una nueva 
    variable, la nueva variable accesar&aacute; la misma instancia que la del 
    objeto a la que fue asignada. Este comportamiento es el mismo cuando 
    se pasan instancias a una funci&oacute;n. Una nueva instancia de un 
    objeto previamente creado puede ser hecho 
    <link linkend="language.oop5.cloning">clonandolo</link>.
   </para>
   <example>
    <title>Asignaci&oacute;n del Objeto</title>
    <programlisting role="php">
<![CDATA[
<?php
$assigned   =  $instance;
$reference  =& $instance;

$instance->var = '$assigned will have this value';

$instance = null; // $instance and $reference become null

var_dump($instance);
var_dump($reference);
var_dump($assigned);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
NULL
NULL
object(SimpleClass)#1 (1) {
   ["var"]=>
     string(30) "$assigned will have this value"
}
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.basic.extends">
   <title>Extendiendo objetos</title>
   <para>
    Una clase puede heredar m&eacute;todos y miembros de otra clase usando la
    palabra 'extends' en la declaraci&oacute;n. No es posible extender de 
    m&uacute;ltiples clases, una clase puede heredar solo de una clase base.
   </para>
   <para>
    Los m&eacute;todos heredados y sus miembros pueden ser evitados, 
    redeclarandolos con el mismo nombre con el que los defini&oacute; la clase
    padre, a menos que la clase padre haya definido un m&eacute;todo como 
    <link linkend="language.oop5.final">final</link>. Es posible accesar a los
    m&eacute;todos o miembros redeclarados haciendo referencia a ellos con
    <link linkend="language.oop5.paamayim-nekudotayim">parent::</link>
   </para>
   <example>
    <title>Herencia simple de una Clase</title>
    <programlisting role="php">
<![CDATA[
<?php
class ExtendClass extends SimpleClass
{
    // Redefine the parent method
    function displayVar()
    {
        echo "Extending class\n";
        parent::displayVar();
    }
}

$extended = new ExtendClass();
$extended->displayVar();
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Extending class
a default value
]]>
    </screen>
   </example>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

