<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.4 $ -->
<!-- EN-Revision: 1.10 Maintainer: baoengb Status: ready -->
 <sect1 id="language.oop5.decon">
  <title>Constructores y Destructores</title>

  <sect2 id="language.oop5.decon.constructor">
   <title>Constructor</title>
   <methodsynopsis>
    <type>void</type><methodname>__construct</methodname>
    <methodparam choice="opt"><type>mixed</type><parameter>args</parameter></methodparam>
    <methodparam choice="opt"><parameter>...</parameter></methodparam>
   </methodsynopsis>
   <para>
    PHP 5 permite a los desarrolladores declarar m&eacute;todos constructores 
    para las clases. Las clases que tienen un m&eacute;todo constructor llaman
    a este m&eacute;todo cada vez que se crea un nuevo objeto, para cualquier
    inicializaci&oacute;n que el objeto puede necesitar antes de ser usado.
   </para>
   <note>
    <simpara>
     Los constructores padres no son llamados implicitamente si la clase 
     hijo define un constructor. Para poder ejecutar el constructor de la clase
     padre, se debe hacer una llamada a <function>parent::__construct</function> 
     dentro del constructor de la clase hijo.
    </simpara>
   </note>
   <example>
    <title>Usando constructores unificados</title>
    <programlisting role="php">
<![CDATA[
<?php
class BaseClass {
   function __construct() {
       print "In BaseClass constructor\n";
   }
}

class SubClass extends BaseClass {
   function __construct() {
       parent::__construct();
       print "In SubClass constructor\n";
   }
}

$obj = new BaseClass();
$obj = new SubClass();
?> 
]]>
    </programlisting>
   </example>
   <para>
    Para tener compatibilidad con versiones anteriores, si PHP 5 no encuentra
    una funci&oacute;n <function>__construct</function> para una clase 
    dada, buscar&aacute; la forma de la funci&oacute;n del constructor que se
    usaba anteriormente por el nombre de la clase. Efectivamente, esto 
    significa que el &uacute;nico caso que puede tener compatibilidad 
    es si la clase tiene un m&eacute;todo llamado
    <function>__construct</function> el cual fue usado para sem&aacute;nticas
    diferentes.
   </para>
  </sect2>

  <sect2 id="language.oop5.decon.destructor">
   <title>Destructores</title>
   <methodsynopsis>
    <type>void</type><methodname>__destruct</methodname>
    <void />
   </methodsynopsis>
   <para>
    PHP 5 introduce un concepto de destructor similar a aquellos de otros 
    lenguajes de programaci&oacute;n orientada a objetos, tal como C++.
    El m&eacute;todo destructor ser&aacute; llamado tan pronto como todas
    las referencias a un objeto en particular sean removidas o cuando 
    el objeto sea expl&iacute;citamente destruido.
   </para>
   <example>
    <title>Ejemplo de Destructor</title>
    <programlisting role="php">
<![CDATA[
<?php
class MyDestructableClass {
   function __construct() {
       print "In constructor\n";
       $this->name = "MyDestructableClass";
   }

   function __destruct() {
       print "Destroying " . $this->name . "\n";
   }
}

$obj = new MyDestructableClass();
?> 
]]>
    </programlisting>
   </example>
   <para>
    Como los constructores, los destructores de la clase padre no ser&aacute;n 
    llamados expl&iacute;citamente por el compilador. Para ejecutar un 
    destructor padre, se debe tener una llamada expl&iacute;cita a 
    <function>parent::__destruct</function> en el cuerpo del destructor.
   </para>
   <note>
    <para>
     El destructor es llamado durante la finalizaci&oacute;n del script, de 
     tal manera que los headers ya han sido enviados.
    </para>
   </note>
   <note>
    <para>
     Intentar arrojar una excepci&oacute;n desde un destructor produce 
     un error fatal.
    </para>
   </note>
  </sect2>

 </sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->

