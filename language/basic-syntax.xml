<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 325975 Maintainer: yago Status: ready -->
<!-- Reviewed: yes Maintainer: seros -->
<chapter xml:id="language.basic-syntax" xmlns="http://docbook.org/ns/docbook">
 <title>Sintaxis básica</title>
 <sect1 xml:id="language.basic-syntax.phptags">
  <title>Etiquetas de PHP</title>
  <para>
   Cuando PHP interpreta un fichero, busca las etiquetas de apertura y cierre,
   que son <literal>&lt;?php</literal> y <literal>?&gt;</literal>,
   y que indican a PHP dónde empezar y finalizar la
   interpretación del código. Este mecanismo permite a PHP ser 
   incrustado en todo tipo de documentos, ya que todo lo que esté fuera
   de las etiquetas de PHP será ignorado por el intérprete.
  </para>
  <para>
   PHP también permite las etiquetas abreviadas <literal>&lt;?</literal> y <literal>?&gt;</literal>
   (las cuales están desaconsejadas debido a que sólo están disponibles si se habilitan con
   la directiva <link linkend="ini.short-open-tag">short_open_tag</link>
   del fichero de configuración &php.ini;, o si PHP se configuró con la opción
   <option>--enable-short-tags</option>.
  </para>
  <para>
   Si un fichero contiene código PHP puro, es preferible omitir la etiqueta de cierre de PHP
   al final del fichero. Esto impide que se añadan espacios en blanco o nuevas líneas después de la
   etiqueta de cierre de PHP, los cuales pueden causar efectos no deseados debido a que PHP iniciará la
   salida del buffer cuando no había intención por parte del programador de enviar ninguna salida
   en ese punto del script.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
echo "Hola mundo";

// ... más código

echo "Última sentencia";

// el script finaliza aquí sin etiqueta de cierre de PHP
]]>
    </programlisting>
   </informalexample>
  </para>
 </sect1>
 <sect1 xml:id="language.basic-syntax.phpmode">
  <title>Salir de HTML</title>
  <para>
   Cualquier cosa fuera del par de etiquetas de apertura y cierre es ignorado por el
   intérprete de PHP, el cual permite que los ficheros de PHP tengan contenido mixto. Esto permite
   que PHP sea embebido en documentos HTML para, por ejemplo, crear plantillas.
   <example>
    <programlisting role="php">
<![CDATA[
<p>Esto va a ser ignorado por PHP y mostrado por el navegador.</p>
<?php echo 'Mientras que esto va a ser interpretado.'; ?>
<p>Esto también será ignorado por PHP y mostrado por el navegador.</p>
]]>
    </programlisting>
   </example>
   Esto funciona como se espera, porque cuando PHP intercepta las etiquetas de cierre
   ?&gt;, simplemente comienza a imprimir cualquier cosa que encuentre (a excepción de un
   una nueva línea inmediatamente después - véase
   <link linkend="language.basic-syntax.instruction-separation">separación de instrucciones</link>)
   haste que dé con otra etiqueta de apertura a menos que se encuentre en mitad de una sentencia
   condicional, en cuyo caso el intérprete determinará el resultado de la
   condición antes de tomar una decisión de qué es lo que tiene que saltar.
   Vea el siguiente ejemplo.
  </para>
  <para>
   Usar estructuras con condiciones
   <example>
    <title>Salida avanzada usando condiciones</title>
    <programlisting role="php">
<![CDATA[
<?php if ($expresión == true): ?>
  Esto se mostrará si la expresión es verdadera.
<?php else: ?>
  En caso contrario se mostrará esto.
<?php endif; ?>
]]>
    </programlisting>
   </example>
   En este ejemplo, PHP saltará los bloques donde la condición no se cumpla, incluso
   si están fuera de las etiquetas de apertura/cierre de PHP, PHP los saltará según
   la condición, ya que el intérprete saltará por encima de los bloques contenidos
   dentro de una condición que no se cumpla.
  </para>
  <para>
   Para imprimir bloques de texto grandes, es más eficiente abandonar el modo
   intérprete de PHP que enviar todo el texto a través de
   <function>echo</function> o <function>print</function>.
  </para>
  <para>
   Existen cuatro tipos de pares de etiquetas de apertura y de cierre
   que se pueden usar en PHP. Dos de estas, &lt;?php ?&gt; y
   &lt;script language="php"&gt; &lt;/script&gt;, siempre están disponibles.
   Las otras dos son las etiquetas abreviadas y las etiquetas estilo <productname>ASP</productname>,
   que se pueden activar o desactivar desde el fichero de configuración &php.ini;
   Aunque algunas personas encuentran las etiquetas abreviadas y las
   etiquetas estilo <productname>ASP</productname> más convenientes,
   son menos portables y generalmente no se recomiendan.
   <note>
    <para>
     Observe también que si se está incrustando PHP dentro de XML o XHTML
     necesitará usar las etiquetas &lt;?php ?&gt; para seguir los
     estándares.
    </para>
   </note>
  </para>
  <para>
   <example>
    <title>Etiquetas de apertura y de cierre de PHP</title>
    <programlisting role="php">
<![CDATA[
1.  <?php echo 'si se quiere mostrar documentos XHTML o XML, debe hacerse así'; ?>

2.  <script language="php">
        echo 'algunos editores (como FrontPage) no les gusta
              las instruciones de proceso';
    </script>

3.  <? echo 'esta es la forma más simple, una instrución de procesado SGML'; ?>
    <?= expresión ?> Esto es una forma abreviada de "<? echo expresión ?>"

4.  <% echo 'Quizá use de forma opcional etiquetas de estilo ASP'; %>
    <%= $variable; # Esto es una forma abreviada de "<% echo . . ." %>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Las etiquetas vistas en los ejemplos uno y dos están 
   siempre disponibles; el ejemplo uno es el más común
   y recomendado de los dos.
  </para>
  <para>
   Las etiquetas abreviadas (ejemplo tres) están solo disponibles cuando
   se activan mediante la directiva <link linkend="ini.short-open-tag">short_open_tag</link>
   del fichero de configuración &php.ini; o si PHP se configuró con la opción
   <option>--enable-short-tags</option>.
  </para>
  <para>
   Las etiquetas de estilo <productname>ASP</productname> (ejemplo cuatro) están solo
   disponibles cuando se activan mediante la directiva <link linkend="ini.asp-tags">asp_tags</link>
   del fichero de configuración &php.ini;.
  </para>
  <para>
   <note>
    <para>
     Se debe evitar el uso de etiquetas abreviadas cuando se desarrollen aplicaciones
     o bibliotecas que estén pensadas para su redistribución o despliegue en
     servidores PHP que no estén bajo su control, porque puede que las etiquetas abreviadas
     no estén soportadas en un servidor determinado. Por portabilidad y
     código redistribuible, asegúrese de no usar etiquetas abreviadas.
    </para>
   </note>
   <note>
    <para>
     En PHP 5.2 y anteriores, el intérprete no permite que un fichero
     contenga únicamente la etiqueta de apertura <literal>&lt;?php</literal>.
     A partir de PHP 5.3 sí se permite siempre que existan uno o más caracteres espacio en
     blanco después de la etiqueta de apertura.
    </para>
   </note>
   <note>
    <para>
     Desde PHP 5.4, la etiqueta abreviada de echo <literal>&lt;?=</literal> siempre es reconocida y
     válida, sin tener en cuenta la configuración de <link linkend="ini.short-open-tag">short_open_tag</link>.
    </para>
   </note>
  </para>
 </sect1>
 <sect1 xml:id="language.basic-syntax.instruction-separation">
  <title>Separación de instrucciones</title>
  <para>
   Como en C o en Perl, PHP requiere que las instrucciones terminen
   en punto y coma al final de cada sentencia. La etiqueta de cierre
   de un bloque de código de PHP automáticamente implica un punto y coma; no
   es necesario usar un punto y coma para cerrar la última línea de un
   bloque de PHP. La etiqueta de cierre del bloque incluirá la nueva línea
   final inmediata si está presente. 
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
    echo 'Esto es una prueba';
?>

<?php echo 'Esto es una prueba' ?>

<?php echo 'Hemos omitido la última etiqueta de cierre';
]]>
    </programlisting>
   </informalexample>
   <note>
    <para>
     La etiqueta de cierre de un bloque de PHP es opcional al final de un fichero,
     y en algunos casos es útil omitirla cuando se usa <function>include</function>
     o <function>require</function>, para que no se produzcan espacios
     en blanco al final de los ficheros, y así se podrán añadir aún
     cabeceras para la respuesta posterior. También es práctico si se utiliza la salida
     del buffer y no se desean espacios en blanco no deseados
     al final de las partes generadas por ficheros incluídos.    
    </para>
   </note>
  </para>
 </sect1>
 <sect1 xml:id="language.basic-syntax.comments">
  <title>Comentarios</title>
  <para>
   PHP soporta comentarios 'C', 'C++' y etilo consola Unix (estilo Perl). Por ejemplo:
   
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
    echo 'Esto es una prueba'; // Esto es un comentario estilo c++ de una sola línea
    /* Esto es un comentario multi-línea
       y otra lína de comentarios */
    echo 'Esto es otra prueba';
    echo 'Una prueba final'; # Esto es un comentario estilo consola de una sola línea
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <simpara>
   Los comentarios del estilo "una sola línea" solo comentan hasta el final
   de la línea o del bloque actual de código de PHP, lo primero que suceda.
   Esto implica que el código HTML después de <literal>// ... ?&gt;</literal>
   o <literal># ...  ?&gt;</literal> SERÁ impreso:
   ?&gt; sale del modo PHP y vuelve al modo HTML, por lo que
   <literal>//</literal> o <literal>#</literal> no pueden influir en eso.
   Si la directiva de configuración <link linkend="ini.asp-tags">asp_tags</link>
   está activada, actúa igual que <literal>// %&gt;</literal> y
   <literal># %&gt;</literal>.
   Sin embargo, la etiqueta <literal>&lt;/script&gt;</literal> no sale del modo PHP en
   un comentario de una sola línea.
  </simpara>
  <para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<h1>Esto es un <?php # echo 'simple';?> ejemplo</h1>
<p>El encabezado anterior dirá 'Esto es un  ejemplo'.</p>
]]>
    </programlisting>
   </informalexample>
  </para>
  <simpara>
   Los comentarios al estilo 'C' finalizan con el primer <literal>*/</literal> que se encuentre.
   Asegúrese de no anidar comentarios al estilo 'C'. Es muy fácil cometer este
   error cuando se intenta comentar un bloque grande de código.
  </simpara>
  <para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
 /*
    echo 'Esto es una prueba'; /* Este comentario causará un problema*/
 */
?>
]]>
    </programlisting>
   </informalexample>
  </para>
 </sect1>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
