<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 325214 Maintainer: yago Status: ready -->
<!-- Reviewed: no Maintainer: yago -->
<chapter xml:id="language.basic-syntax" xmlns="http://docbook.org/ns/docbook">
 <title>Sintaxis básica</title>
 <sect1 xml:id="language.basic-syntax.phptags">
  <title>Etiquetas de PHP</title>
  <para>
   Cuando PHP interpreta un fichero, busca por las etiquetas de apertura y cierre,
   que son <literal>&lt;?php</literal> y <literal>?&gt;</literal>
   las cuales indican a PHP dónde empezar y finalizar la
   interpretación del código. Este mecanismo permite a PHP ser 
   incrustado en todo tipo de documentos, todo lo que esté fuera
   de las etiquetas de PHP será ignorado por el interpretador.
  </para>
  <para>
   PHP también permite etiquetas lsa cortas <literal>&lt;?</literal> y <literal>?&gt;</literal>
   (las que están desaconsejadas debido a que sólo están disponibles si se habilita con
   la directiva del fichero de configuración &php.ini;
   <link linkend="ini.short-open-tag">short_open_tag</link>,
   o si PHP se configuró con la opción
   <option>--enable-short-tags</option>.
  </para>
  <para>
   Si un fichero contiene código PHP puro, es preferible omitir la etiqueta de cierre de PHP
   al final del fichero. Esto previene de espacios en blanco o nuevas líneas después de la
   etiqueta de cierre de PHP que pueden causar efectos no deseados debido a que PHP iniciará el
   buffer de salida cuando no había intención por parte del programador de enviar ninguna salida
   en ese punto del script.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
echo "Hola mundo";

// ... más código

echo "Última sentencia";

// el script finaliza aquí sin etiqueta de cierre de PHP
]]>
    </programlisting>
   </informalexample>
  </para>
 </sect1>
 <sect1 xml:id="language.basic-syntax.phpmode">
  <title>Salir de HTML</title>
  <para>
   Cualquier cosa fuera del par de etiquetas de apertura y cierre es ignorado por el
   analizador de PHP, el cual permite los ficheros de PHP tengan contenido mixto. Esto permite
   que PHP sea embebido en documentos HTML, por ejemplo para crear plantillas.
   <example>
    <programlisting role="php">
<![CDATA[
<p>Esto va a ser ignorado por PHP y mostrado por el navegador.</p>
<?php echo 'Mientras que esto va a ser analizado.'; ?>
<p>Esto también será ignorado por PHP y mostrado por el navegador.</p>
]]>
    </programlisting>
   </example>
   Esto funciona como se espera, porque cuando PHP intercepta las etiquetas de cierre
   ?&gt;, simplemente comienza a imprimir cualquier cosa que encuentre (a excepción de un
   una nueva lína inmediatamente después - véase
   <link linkend="language.basic-syntax.instruction-separation">separación de instrucciones</link>)
   haste que dé con otra etiqueta de apertura a menos que se encuentre en mitad de una sentencia
   condicional, en cuyo caso el intérprete determinará el resultado de la
   condición antes de tomar una decisión de lo que tiene que saltar.
   Véase el siguiente ejemplo.
  </para>
  <para>
   Usar estructuras con condiciones
   <example>
    <title>Advanced escaping using conditions</title>
    <programlisting role="php">
<![CDATA[
<?php if ($expresión == true): ?>
  Esto se mostrará si la expresión es verdadera.
<?php else: ?>
  En caso contrario se mostrará esto.
<?php endif; ?>
]]>
    </programlisting>
   </example>
   En este ejemplo PHP saltará los bloques donde la condición no se cumpla, incluso
   si están fuera de las etiquetas de apertura/cierre de PHP, PHP los saltará según
   la condición ya que el intérprete de saltará por encima de los bloques contenidos
   dentro de una condición que no se cumpla.
  </para>
  <para>
   Para salir de bloques de texto grandes, es más eficiente abandonar el modo
   analítico de PHP que enviar todo el texto a través de
   <function>echo</function> o <function>print</function>.
  </para>
  <para>
   Existen cuatro tipos de pares de etiquetas de apertura y de fin de bloque
   que se pueden usar en PHP. Dos de estas, &lt;?php ?&gt; y
   &lt;script language="php"&gt; &lt;/script&gt;, siempre están disponibles.
   Las otras dos son etiquetas cortas y etiquetas estilo <productname>ASP</productname>
   y se pueden activar o desactivar desde el fichero de configuración &php.ini;
   Aunque para algunas personas las etiquetas cortas y 
   etiquetas estilo <productname>ASP</productname> las encuentran más convenientes,
   son menos portables y generalmente no recomendadas.
   <note>
    <para>
     Observe también que si se está incrustando PHP con XML o XHTML
     necesitará usar las etiquetas &lt;?php ?&gt; para seguir los
     estándares.
    </para>
   </note>
  </para>
  <para>
   <example>
    <title>Etiquetas de apertura y de fin de bloque de PHP</title>
    <programlisting role="php">
<![CDATA[
1.  <?php echo 'si se quiere mostrar documentos XHTML o XML, debe hacerse así'; ?>

2.  <script language="php">
        echo 'algunos editores (como FrontPage) no les gusta
              las instruciones de proceso';
    </script>

3.  <? echo 'esta es la forma más simple, una instrución de procesado SGML'; ?>
    <?= expression ?> Esto es una forma corta para "<? echo expression ?>"

4.  <% echo 'Quizá use de forma opcional etiquetas de estilo ASP'; %>
    <%= $variable; # Esto es una forma corta para "<% echo . . ." %>
]]>
     </programlisting>
    </example>
   </para>
   <para>
    Las etiquetas vistas en los ejemplos uno y dos están 
    siempre disponibles, el ejemplo uno es el más común
    y recomendado de los dos.
   </para>
   <para>
    Las etiquetas cortas (ejemplo tres) están solo disponibles cuando
    se activan mediante la directiva <link linkend="ini.short-open-tag">short_open_tag</link>
    en el fichero de configuración &php.ini; o si PHP se configuró con la opción
    <option>--enable-short-tags</option>.
   </para>
   <para>
    Las etiquetas de estilo <productname>ASP</productname> (ejemplo cuatro) están solo
    disponibles cuando se activan mediante la directiva <link linkend="ini.asp-tags">asp_tags</link>
    en el fichero de configuración &php.ini;.
   </para>
   <para>
    <note>
     <para>
      El uso de etiquetas cortas debe ser evitado cuando se desarrollan
      aplicaciones o librerias que están pensadas para su redistribución,
      o extender en servidores PHP que no están bajo su control, porque
      quizá las etiquetas cortas no están soportadas en un servidor
      determinado. Por portabilidad, redistribución de código,
      asegúrese no usar etiquetas cortas.
     </para>
    </note>
    <note>
     <para>
      En PHP 5.2 y anteriores, no se permite que un fichero contenga únicamente
      la etiqueta de inicio de bloque <literal>&lt;?php</literal>.
      En PHP 5.3 si se permite siempre que existan uno o más caracteres espacions en
      blanco después de la etiqueta de apertura.
     </para>
    </note>
    <note>
     <para>
      Desde PHP 5.4, la etiqueta abreviada de echo <literal>&lt;?=</literal> siempre es reconocida y
      válida, sin tener en cuenta la configuración de <link linkend="ini.short-open-tag">short_open_tag</link>.
     </para>
    </note>
   </para>
 </sect1>
 <sect1 xml:id="language.basic-syntax.instruction-separation">
  <title>Instrucción separador</title>
  <para>
   Como en C o Perl, PHP requiere que las instrucciones terminen
   en punto y coma al final de cada declaración. La etiqueta de
   fin de bloque de PHP automáticamente implica un punto
   y coma. No se tiene que usar punto y coma para cerrar la última
   línea de código de PHP. La etiqueta de fin de bloque
   incluirá de inmediato salto de línea si no está presente. 
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
    echo 'Esto es una prueba';
?>

<?php echo 'Esto es una prueba' ?>

<?php echo 'Hemos omitido la última etiqueta de cerrado';
]]>
    </programlisting>
   </informalexample>
   <note>
    <para>
     Note: La etiqueta de fin de bloque es opcional al final del archivo 
     y es útil omitirlo cuando se utilizan sentencias <function>include</function> 
     o <function>require</function>, para que no se produzcan espacios en blanco 
     al final de los archivos cuando se quieren mandar cabeceras de http. También 
     sirve cuando se captura la salida con output buffering y no se desean 
     espacios innecesarios al final de partes generadas por archivos incluídos.    
    </para>
   </note>
  </para>
 </sect1>
 <sect1 xml:id="language.basic-syntax.comments">
  <title>Comentarios</title>
  <para>
   PHP Soporta comentarios 'C', 'C++' y Unix estilo de consola (estilo Perl). Por ejemplo:
   
   
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
    echo 'Esto es una prueba'; // Esto es un comentario estilo c++ de una sola línea
    /* Esto es un comentario multi-línea
       si! otra lína de comentarios */
    echo 'Esto es otro test';
    echo 'Un test final'; # Esto es un comentario estilo consola de una sola línea
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <simpara>
   Los comentarios de estilo "una sola línea" solo comentan hasta el final
   de la línea o del bloque actual de código PHP, lo primero que suceda.
   Esto implica que el código HTML después de <literal>// ... ?&gt;</literal>
   o <literal># ...  ?&gt;</literal> Imprimirá ?&gt; para salir del modo 
   PHP y volver a HTML, y <literal>//</literal> o <literal>#</literal> 
   no influyen. Si la directiva de configuración <link linkend="ini.asp-tags">asp_tags</link>
   está activada, actúa igual que <literal>// %&gt;</literal> y
   <literal># %&gt;</literal>.
   Sin embargo, la etiqueta <literal>&lt;/script&gt;</literal> no rompe el modo PHP en
   un comentario de una sola línea.
  </simpara>
  <para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<h1>Esto es un <?php # echo 'simple';?> ejemplo</h1>
<p>El encabezado anterior dirá 'Esto es un  ejemplo'.</p>
]]>
    </programlisting>
   </informalexample>
  </para>
  <simpara>
   Los comentarios del estilo 'C' finalizan al primer  <literal>*/</literal>
   que se encuentre. Asegúrese que no utiliza muchos comentarios del estilo
   'C'. Es muy fácil cometer errores cuando trata de comentar un gran bloque
   de código.
  </simpara>
  <para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
 /*
    echo 'Esto es una prueba'; /* Este comentario puede causar un problema*/
 */
?>
]]>
    </programlisting>
   </informalexample>
  </para>
 </sect1>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
