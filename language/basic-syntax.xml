<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.8 $ -->
<!-- EN-Revision: 1.33 Maintainer: pedroc Status: ready -->
 <chapter id="language.basic-syntax">
  <title>Sintaxis b&aacute;sica</title>

   <!--

    NOTE:                             Last modified: 2001-05-16 13:00 GMT

    the language part is currently under heavy revision. Please do not
    not make any heavy (i.e. structural) modifications to this part
    for a moment.

    You'd also better not start any translation yet.

    Comments are always welcome at phpdoc@lists.php.net

    Progress:

     intro : DOESN'T EXIST - yet?
             new chapter, with some introductionary remarks?
             Will be discussed on the ML soon.
     basic-syntax:
             FINISHED
             except maybe moving the 'advanced escaping'
             to a better place?
             TODO:
              - nada
     types : Being revised. Added all new types
             Boolean and Integer are more or less finished.
             The rest isn't.
             TODO:
              - why is $foo[bar] bad syntax?
              - what's the difference between unset($bla) and
                $bla = NULL; (it is different!)
              - $obj->{expr} syntax
              - (unset) cast?????
              - $bla = unset <== should've been nuked, don't mention it
              - $str{offset} syntax, rather than $str[offset]
              - read notes and apply when any of them are useful
              - remove notes which have been included here.
              - ...
     the rest: Not yet started with.
             TODO:
              - ?
     oop   : has been revised by Kristian, DONE.
   -->

  <sect1 id="language.basic-syntax.phpmode">
   <title>Saliendo de HTML</title>

   <para>
    Para interpretar un archivo, php s&iacute;mplemente interpreta el texto
    del archivo hasta que encuentra uno de los car&aacute;cteres especiales
    que delimitan el inicio de c&oacute;digo PHP. El int&eacute;rprete ejecuta
    entonces todo el c&oacute;digo que encuentra, hasta que encuentra una etiqueta
    de fin de c&oacute;digo, que le dice al int&eacute;rprete que siga ignorando el c&oacute;digo
    siguiente. Este mecanismo permite embeber c&oacute;digo PHP dentro de HTML: todo lo que est&aacute;
    fuera de las etiquetas PHP se deja tal como est&aacute;, mientras que el resto se interpreta
    como c&oacute;digo.
   </para>

   <para>
    Hay cuatro conjuntos de etiquetas que pueden ser usadas para denotar
    bloques de c&oacute;digo PHP. De estas cuatro, s&oacute;lo 2 (&lt;?php. . .?&gt; y
    &lt;script language="php"&gt;. . .&lt;/script&gt;) est&aacute;n siempre disponibles;
    el resto pueden ser configuradas en el fichero de &php.ini; para ser
    o no aceptadas por el int&eacute;rprete. Mientras que el formato corto de etiquetas (short-form tags) y
    el estilo ASP (ASP-style tags) pueden ser convenientes, no son portables
    como la versi&oacute;n de formato largo de etiquetas. Adem&aacute;s, si se pretende
    embeber c&oacute;digo PHP en XML o XHTML, ser&aacute; obligatorio el uso del formato
    &lt;?php. . .?&gt; para la compatibilidad con XML.
   </para>

   <para>
    Las etiquetas soportadas por PHP son:
   </para>

    <para>
     <example>
      <title>Formas de escapar de HTML</title>
      <programlisting role="php">
<![CDATA[
1.  <?php echo("si quieres servir documentos XHTML o XML, haz como aqu&iacute;\n"); ?>

2.  <? echo ("esta es la m&aacute;s simple, una instrucci&oacute;n de procesado SGML \n"); ?>
    <?= expression ?> Esto es una abreviatura de "<? echo expression ?>"

3.  <script language="php">
        echo ("muchos editores (como FrontPage) no
              aceptan instrucciones de procesado");
    </script>

4.  <% echo ("Opcionalmente, puedes usar las etiquetas ASP"); %>
    <%= $variable; # Esto es una abreviatura de "<% echo . . ." %>
]]>
      </programlisting>
     </example>
    </para>

   <para>
    El m&eacute;todo primero, &lt;?php. . .?&gt;, es el m&aacute;s conveniente, ya que
    permite el uso de PHP en c&oacute;digo XML como XHTML.
   </para>

   <para>
    El m&eacute;todo segundo no siempre est&aacute; disponible. El formato corto
    de etiquetas est&aacute; disponible con la funci&oacute;n <function>short_tags</function>
    (s&oacute;lo PHP 3), activando el par&aacute;metro del fichero de configuraci&oacute;n de PHP
    <link linkend="ini.short-open-tag">short_open_tag</link>, o compilando
    PHP con la opci&oacute;n --enable-short-tags del comando <command>configure</command>.
    Aunque est&eacute; activa por defecto en php.ini-dist, se desaconseja
    el uso del formato de etiquetas corto.
   </para>

   <para>
    El m&eacute;todo cuarto s&oacute;lo est&aacute; disponible si se han activado las
    etiquetas ASP en el fichero de configuraci&oacute;n: <link linkend="ini.asp-tags">asp_tags</link>.
    <note>
     <para>El soporte de etiquetas ASP se a&ntilde;adi&oacute; en la versi&oacute;n 3.0.4.</para>
    </note>
   </para>

   <note>
    <para>
     No se debe usar el formato corto de etiquetas cuando se
     desarrollen aplicaciones o bibliotecas con intenci&oacute;n de
     redistribuirlas, o cuando se desarrolle para servidores que no
     est&aacute;n bajo nuestro control, porque puede ser que el
     formato corto de etiquetas no est&eacute; soportado en el
     servidor. Para generar c&oacute;digo portable y
     redistribu&iacute;ble, aseg&uacute;rate de no usar el formato
     corto de etiquetas.
    </para>
   </note>

   <para>
    La etiqueta de fin de bloque incluir&aacute; tras ella la siguiente
    l&iacute;nea si hay alguna presente. Adem&aacute;s, la etiqueta de fin de bloque
    lleva impl&iacute;cito el punto y coma; no necesitas por lo tanto a&ntilde;adir
    el punto y coma final de la &uacute;ltima l&iacute;nea del bloque PHP.
   </para>

    <para>
    PHP permite estructurar bloques como:
    <example><title>M&eacute;todos avanzados de escape</title>
     <programlisting role="php">
<![CDATA[
<?php
if ($expression) {
    ?>
    <strong>This is true.</strong>
    <?php
} else {
    ?>
    <strong>This is false.</strong>
    <?php
}
?>
]]>
     </programlisting>
    </example>
    Este ejemplo realiza lo esperado, ya que cuando PHP encuentra las etiquetas
    ?&gt; de fin de bloque, empieza a escribir lo que encuentra tal cual hasta que
    encuentra otra etiqueta de inicio de bloque. El ejemplo anterior es, por supuesto,
    inventado. Para escribir bloques grandes de texto generamente es m&aacute;s eficiente
    separalos del c&oacute;digo PHP que enviar todo el texto mediante las funciones
    <function>echo</function>, <function>print</function> o similares.
   </para>
  </sect1>

  <sect1 id="language.basic-syntax.instruction-separation">
   <title>Separaci&oacute;n de instrucciones</title>

   <simpara>
    Las separaci&oacute;n de instrucciones se hace de la misma manera que en C
    o Perl - terminando cada declaraci&oacute;n con un punto y coma.
   </simpara>
   <para>
    La etiqueta de fin de bloque (?&gt;) implica el fin de la declaraci&oacute;n,
    por lo tanto lo siguiente es equivalente:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo "This is a test";
?>

<?php echo "This is a test" ?>
]]>
     </programlisting>
    </informalexample>
   </para>
  </sect1>

  <sect1 id="language.basic-syntax.comments">
   <title>Comentarios</title>

   <para>
    PHP soporta el estilo de comentarios de 'C', 'C++' y de la interfaz de comandos
    de Unix. Por ejemplo:
    <informalexample>
     <programlisting role="php">
<![CDATA[
<?php
    echo "This is a test"; // This is a one-line c++ style comment
    /* This is a multi line comment
       yet another line of comment */
    echo "This is yet another test";
    echo "One Final Test"; # This is shell-style style comment
?>
]]>
     </programlisting>
    </informalexample>
   </para>

   <simpara>
    Los estilos de comentarios de una linea actualmente s&oacute;lo comentan
    hasta el final de la linea o el bloque actual de c&oacute;digo PHP, lo
    primero que ocurra.
   </simpara>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<h1>This is an <?php # echo "simple";?> example.</h1>
<p>The header above will say 'This is an example'.
]]>
    </programlisting>
   </informalexample>

   <simpara>
    Hay que tener cuidado con no anidar comentarios de estilo 'C', algo
    que puede ocurrir al comentar bloques largos de c&oacute;digo.
   </simpara>

   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
 /*
    echo "This is a test"; /* This comment will cause a problem */
 */
?>
]]>
    </programlisting>
   </informalexample>

   <simpara>
    Los estilos de comentarios de una linea actualmente s&oacute;lo comentan
    hasta el final de la linea o del bloque actual de c&oacute;digo PHP,
    lo primero que ocurra. Esto implica que el c&oacute;digo HTML tras // ?&gt; ser&aacute;a
    impreso: ?&gt; sale del modo PHP, retornando al modo HTML, el comentario
    // no le influye.
   </simpara>
  </sect1>
 </chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
