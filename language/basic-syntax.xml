<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 318140 Maintainer: yago Status: ready -->
<!-- Reviewed: no -->
<chapter xml:id="language.basic-syntax" xmlns="http://docbook.org/ns/docbook">
 <title>Sintaxis básica</title>
 <sect1 xml:id="language.basic-syntax.phpmode">
  <title>Saliendo de HTML</title>
  <para>
   Cuando PHP interpreta un fichero, busca por las etiquetas de 
   apertura y fin de bloque, que dicen a PHP donde empezar y finalizar la
   interpretación del código. Este mecanismo permite a PHP ser 
   incrustado en todo tipo de documentos, todo lo que esté fuera
   de las etiquetas de PHP será ignorado por el interpretador.
   La mayoría de veces se encontrará con PHP incrustado en 
   documentos HTML, como se muestra en este ejemplo.
   <informalexample>
    <programlisting role="php">
<![CDATA[
<p>Este texto va a ser ignorado.</p>
<?php echo 'Mientras que esto va a ser interpretado.'; ?>
<p>Esto también será ignorado.</p>
]]>
    </programlisting>
   </informalexample>
  </para>
  <para>
   También se pueden usar estructuras más avanzadas:
   <example>
    <title>Escapar de HTML avanzado</title> 
    <programlisting role="php">
<![CDATA[
<?php
if ($expression) {
    ?>
    <strong>Esto es verdadero.</strong>
    <?php
} else {
    ?>
    <strong>Esto es falso.</strong>
    <?php
}
?>
]]>
    </programlisting>
   </example>
   Esto funciona como se espera, porque cuando PHP llega a las 
   etiquetas de cerrado ?&gt;, simplemente muestra todo lo que encuentra
   (excepto inmediatamente después de salto de línea - vea
   <link linkend="language.basic-syntax.instruction-separation">separador de instrución</link>
   ) hasta que llega a una etiqueta de apertura. El ejemplo anterior es solo de muestra,
   por su puesto, pero para mostrar largos bloques de texto, salir del
   modo de interpretación de PHP es generalmente más eficiente que enviar todo
   el texto a través de <function>echo</function> o
   <function>print</function>.
  </para>
  <para>
   Existen cuatro tipos de pares de etiquetas de apertura y de fin de bloque
   que se pueden usar en PHP. Dos de estas, &lt;?php ?&gt; y
   &lt;script language="php"&gt; &lt;/script&gt;, siempre están disponibles.
   Las otras dos son etiquetas cortas y etiquetas estilo <productname>ASP</productname>
   y se pueden activar o desactivar desde el fichero de configuración &php.ini;
   Aunque para algunas personas las etiquetas cortas y 
   etiquetas estilo <productname>ASP</productname> las encuentran más convenientes,
   son menos portables y generalmente no recomendadas.
   <note>
    <para>
     Observe también que si se está incrustando PHP con XML o XHTML
     necesitará usar las etiquetas &lt;?php ?&gt; para seguir los
     estándares.
    </para>
   </note>
  </para>
  <para>
   <example>
    <title>Etiquetas de apertura y de fin de bloque de PHP</title>
    <programlisting role="php">
<![CDATA[
1.  <?php echo 'si se quiere mostrar documentos XHTML o XML, debe hacerse así'; ?>

2.  <script language="php">
        echo 'algunos editores (como FrontPage) no les gusta
              las instruciones de proceso';
    </script>

3.  <? echo 'esta es la forma más simple, una instrución de procesado SGML'; ?>
    <?= expression ?> Esto es una forma corta para "<? echo expression ?>"

4.  <% echo 'Quizá use de forma opcional etiquetas de estilo ASP'; %>
    <%= $variable; # Esto es una forma corta para "<% echo . . ." %>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Las etiquetas vistas en los ejemplos uno y dos están 
   siempre disponibles, el ejemplo uno es el más común
   y recomendado de los dos.
  </para>
  <para>
   Las etiquetas cortas (ejemplo tres) están solo disponibles cuando
   se activan mediante la directiva <link linkend="ini.short-open-tag">short_open_tag</link>
   en el fichero de configuración &php.ini; o si PHP se configuró con la opción
   <option>--enable-short-tags</option>.
  </para>
  <para>
   Las etiquetas de estilo <productname>ASP</productname> (ejemplo cuatro) están solo
   disponibles cuando se activan mediante la directiva <link linkend="ini.asp-tags">asp_tags</link>
   en el fichero de configuración &php.ini;.
  </para>
  <para>
   <note>
    <para>
     El uso de etiquetas cortas debe ser evitado cuando se desarrollan
     aplicaciones o librerias que están pensadas para su redistribución,
     o extender en servidores PHP que no están bajo su control, porque
     quizá las etiquetas cortas no están soportadas en un servidor
     determinado. Por portabilidad, redistribución de código,
     asegúrese no usar etiquetas cortas.
    </para>
   </note>
   <note>
    <para>
     En PHP 5.2 y anteriores, no se permite que un fichero contenga únicamente
     la etiqueta de inicio de bloque <literal>&lt;?php</literal>.
     En PHP 5.3 si se permite.      
    </para>
   </note>
   <note>
    <para>
     Desde PHP 5.4, la etiqueta abreviada de echo <literal>&lt;?=</literal> siempre es reconocida y
     válida, sin tener en cuenta la configuración de <link linkend="ini.short-open-tag">short_open_tag</link>.
    </para>
   </note>
  </para>
 </sect1>
 <sect1 xml:id="language.basic-syntax.instruction-separation">
  <title>Instrución separador</title>
  <para>
   Como en C o Perl, PHP requiere que las instruciones terminen
   en punto y coma al final de cada declaración. La etiqueta de
   fin de bloque de PHP automáticamente implica un punto
   y coma. No se tiene que usar punto y coma para cerrar la última
   línea de código de PHP. La etiqueta de fin de bloque
   incluirá de inmediato salto de línea si no está presente. 
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
    echo 'Esto es una prueba';
?>

<?php echo 'Esto es una prueba' ?>

<?php echo 'Hemos omitido la última etiqueta de cerrado';
]]>
    </programlisting>
   </informalexample>
   <note>
    <para>
     Note: La etiqueta de fin de bloque es opcional al final del archivo 
     y es útil omitirlo cuando se utilizan sentencias <function>include</function> 
     o <function>require</function>, para que no se produzcan espacios en blanco 
     al final de los archivos cuando se quieren mandar cabeceras de http. También 
     sirve cuando se captura la salida con output buffering y no se desean 
     espacios innecesarios al final de partes generadas por archivos incluídos.    
    </para>
   </note>
  </para>
 </sect1>
 <sect1 xml:id="language.basic-syntax.comments">
  <title>Comentarios</title>
  <para>
   PHP Soporta comentarios 'C', 'C++' y Unix estilo de consola (estilo Perl). Por ejemplo:
   
   
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
    echo 'Esto es una prueba'; // Esto es un comentario estilo c++ de una sola línea
    /* Esto es un comentario multi-línea
       si! otra lína de comentarios */
    echo 'Esto es otro test';
    echo 'Un test final'; # Esto es un comentario estilo consola de una sola línea
?>
]]>
    </programlisting>
   </informalexample>
  </para>
  <simpara>
   Los comentarios de estilo "una sola línea" solo comentan hasta el final
   de la línea o del bloque actual de código PHP, lo primero que suceda.
   Esto implica que el código HTML después de <literal>// ... ?&gt;</literal>
   o <literal># ...  ?&gt;</literal> Imprimirá ?&gt; para salir del modo 
   PHP y volver a HTML, y <literal>//</literal> o <literal>#</literal> 
   no influyen. Si la directiva de configuración <link linkend="ini.asp-tags">asp_tags</link>
   está activada, actúa igual que <literal>// %&gt;</literal> y
   <literal># %&gt;</literal>.
   Sin embargo, la etiqueta <literal>&lt;/script&gt;</literal> no rompe el modo PHP en
   un comentario de una sola línea.
  </simpara>
  <para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<h1>Esto es un <?php # echo 'simple';?> ejemplo</h1>
<p>El encabezado anterior dirá 'Esto es un  ejemplo'.</p>
]]>
    </programlisting>
   </informalexample>
  </para>
  <simpara>
   Los comentarios del estilo 'C' finalizan al primer  <literal>*/</literal>
   que se encuentre. Asegúrese que no utiliza muchos comentarios del estilo
   'C'. Es muy fácil cometer errores cuando trata de comentar un gran bloque
   de código.
  </simpara>
  <para>
   <informalexample>
    <programlisting role="php">
<![CDATA[
<?php
 /*
    echo 'Esto es una prueba'; /* Este comentario puede causar un problema*/
 */
?>
]]>
    </programlisting>
   </informalexample>
  </para>
 </sect1>
</chapter>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
