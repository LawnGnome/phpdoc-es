<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 324313 Maintainer: x1v4nx Status: ready -->
<!-- Reviewed: no Maintainer: x1v4nx -->

<sect1 xml:id="language.types.callable">
 <title>Llamadas de retorno</title>
 
 <para>
  Las llamadas de retorno se pueden representar con el tipo <type>callable</type> a partir de PHP 5.4.
  Esta documentación utilizó la información del tipo <type>callback</type> con el mismo propósito.
 </para>

 <para>
  algunas funciones como <function>call_user_func</function> o
  <function>usort</function> aceptan funciones de llamadas de retorno definidas por
  el usuario como parámetro. Las funciones de llamadas de retorno no sólo pueden ser
  funciones simples, sino también métodos de un <type>object</type>, incluyendo métodos de clase estáticos.
 </para>

 <sect2 xml:id="language.types.callable.passing">
  <title>Pasando</title>

  <para>
   Una función PHP se pasa por su nombre como una <type>string</type>. Se puede utilizar
   cualquier función nativa o definida por el usuario, excepto contrucciones del lenguaje, tal como:
   <function>array</function>, <function>echo</function>,
   <function>empty</function>, <function>eval</function>, 
   <function>exit</function>, <function>isset</function>, 
   <function>list</function>, <function>print</function> o
   <function>unset</function>.
  </para>

  <para>
   Un método de un <type>object</type> instanciado se pasa como un
   <type>array</type> conteniendo un <type>object</type> en el índice 0
   y el nombre del método en el índice 1.
  </para>

  <para>
   Métodos de clase estáticos también se pueden pasar sin instanciar un <type>object</type>
   de una clase al pasar el nombre de la clase en lugar de un
   <type>object</type> en el índice 0.
   A partir de PHP 5.2.3, también es posible pasar
   <literal>'NombreDeClase::nombreDeMetodo'</literal>.
  </para>

  <para>
   Además de las funciones definidas por el usuario normales, también se puede utilizar
   la función <function>create_function</function> para crear funciones de devolución de
   llamadas anónimas. A partir de PHP 5.3.0 también es posible pasar un
   <link linkend="functions.anonymous">cierre</link> a un parámetro de llamada de retorno.
  </para>

  <para>
   <example>
    <title>
     Ejemplos de funciones de llamadas de retorno
    </title>
    <programlisting role="php">
<![CDATA[
<?php

// Un ejemplo de función de llamada de retorno
function my_callback_function() {
    echo 'hello world!';
}

// Un ejemplo de método de llamada de retorno
class MyClass {
    static function myCallbackMethod() {
        echo 'Hello World!';
    }
}

// Tipo 1: Llamada de retorno simple
call_user_func('my_callback_function'); 

// Tipo 2: Llamada a un método de clase estático
call_user_func(array('MyClass', 'myCallbackMethod')); 

// Tipo 3: Llamada al método de un objeto
$obj = new MyClass();
call_user_func(array($obj, 'myCallbackMethod'));

// Tipo 4: Llamada a un método de clase estático (A partir de PHP 5.2.3)
call_user_func('MyClass::myCallbackMethod');

// Tipo 5: Llamada a un método de clase estático relativo (A partir de PHP 5.3.0)
class A {
    public static function who() {
        echo "A\n";
    }
}

class B extends A {
    public static function who() {
        echo "B\n";
    }
}

call_user_func(array('B', 'parent::who')); // A
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>
     Ejemplo de llamada de retorno utilizando un cierre o función anónima
    </title>
   <programlisting role="php">
<![CDATA[
<?php
// Nuestro cierre
$double = function($a) {
    return $a * 2;
};

// Este es nuestro rango de números
$numbers = range(1, 5);

// Aquí utilizamos el cierre como llamada de retorno
// para doblar el valor de cada elemento en nuestro
// rango
$new_numbers = array_map($double, $numbers);

print implode(' ', $new_numbers);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
2 4 6 8 10
]]>
    </screen>
   </example>
  </para>

  <note>
   <simpara>
    En PHP 4, era necesario usar una referencia para crear una llamada de retorno
    que apunte al <type>object</type> real, y no a una copia del mismo. Para más
    detalles, vea las <link linkend="language.references">Referencias Explicadas</link>.
   </simpara>
  </note>

  &note.func-callback-exceptions;
 </sect2>

</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->