<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 293478 Maintainer: gerardocdc Status: ready -->
<sect1 xml:id="language.pseudo-types">
 <title>Pseudo tipos y variables usadas en esta documentación</title> 
 
 <sect2 xml:id="language.types.mixed">
  <title>mixed</title>
  
  <para>
   <literal>mixed</literal> indica que un parámetro puede aceptar múltiples tipos (pero no 
   necesariamente todos).
  </para>
  
  <para>
   <function>gettype</function>, por ejemplo, puede aceptar todos los tipos PHP, mientras que 
   <function>str_replace</function> sólo acepta <type>string</type>s y
   <type>array</type>s.
  </para>
  
 </sect2>
 
 <sect2 xml:id="language.types.number">
  <title>number</title>
  
  <para>
   <literal>number</literal> indica que un parámetro puede ser tanto un <type>integer</type>
   como un <type>float</type>.
  </para>
  
 </sect2>
 
 <sect2 xml:id="language.types.callback">
  <title>Llamada de retorno</title>
  
  <para>
   Algunas funciones como <function>call_user_func</function> o
   <function>usort</function> pueden aceptar como parámetro funciones de devolución de llamada
   definidas por el usuario. Las funciones de devolución de llamada no sólo pueden ser
   funciones simples, sino también pueden ser métodos <type>object</type>, incluyendo
   métodos de clases estáticas.
  </para>
  
  <para>
   Una función de PHP puede ser pasada por su nombre como un <type>string</type>. Cualquier 
   función incorporada o definida por el usuario puede ser usada, excepto los constructores
   de lenguaje como: <function>array</function>, <function>echo</function>,
   <function>empty</function>, <function>eval</function>, 
   <function>exit</function>, <function>isset</function>, 
   <function>list</function>, <function>print</function> o
   <function>unset</function>.   
  </para>
  
  <para>
   Un método de un <type>object</type> instanciado puede ser pasado como un <type>array</type>
   conteniendo un <type>object</type> en el índice 1 y el nombre del método en el índice 1.
  </para>
  
  <para>
   Los métodos de clases estáticas también pueden ser pasdos sin instanciar
   un <type>object</type> de la clase pasando en el índice 0 el nombre de la
   clase en lugar del <type>object</type>.
  </para>
  
  <para>
   Junto a las típicas funciones definidas por el usuario, tambien se puede usar
   <function>create_function</function> para crear una función de devolución de llamada
   anónima. Desde PHP 5.3.0 también es posible pasar un <link linkend="functions.anonymous">cierre</link> 
   como un parámetro de devolución.
  </para>
  
  <para>
   <example>
    <title>
     Ejemplos de funciones de devolución de llamada
    </title>
    <programlisting role="php">
<![CDATA[
<?php 

// Un ejemplo de función de devolución de llamada
function my_callback_function() {
    echo 'hello world!';
}

// Un ejemplo de un método de llamada de retorno
class MyClass {
    static function myCallbackMethod() {
        echo 'Hello World!';
    }
}

// Type 1: Llamada de retorno simple
call_user_func('my_callback_function'); 

// Type 2: Llamada de un método de clase estática
call_user_func(array('MyClass', 'myCallbackMethod')); 

// Type 3: Llamada del método de un objeto
$obj = new MyClass();
call_user_func(array($obj, 'myCallbackMethod'));

// Type 4: Llamada de un método de clase estática (a partir de PHP 5.2.3)
call_user_func('MyClass::myCallbackMethod');

// Type 5: lamada de un método de clase estática relativa (a partir de PHP 5.2.3)
class A {
    public static function who() {
        echo "A\n";
    }
}

class B extends A {
    public static function who() {
        echo "B\n";
    }
}

call_user_func(array('B', 'parent::who')); // A
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>
     Ejemplos de llamadas de retorno usando cierres
    </title>
    <programlisting role="php">
<![CDATA[
<?php
// Un cierre
$double = function($a) {
    return $a * 2;
};

// Este es nuestro intervalo de números
$numbers = range(1, 5);

// Use aquí el cierre como una llamada de retorno
// para doblar el tamaño de cada elemento de 
// nuestro intervalo
$new_numbers = array_map($double, $numbers);

print implode(' ', $new_numbers);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
2 4 6 8 10
]]>
    </screen>
   </example>
  </para>
  
  <note>
   <simpara>
    En PHP4, era necesario utilizar una referencia para crear una llamada de retorno
    que apuntase al <type>object</type> actual, y no a una copia del mismo. Para
    más información consulte
    <link linkend="language.references">Explicando las Referencias</link>.
   </simpara>
  </note>
  
  &note.func-callback-exceptions;
  
 </sect2>
 
 <sect2 xml:id="language.types.void">
  <title>void</title>
  
  <para>
   <literal>void</literal> como un tipo de variable de retorno significa que el valor de
   retorno no es útil. <literal>void</literal> en una lista de parámetros significa que la
   función no acepta ningún parámetro.
  </para>
  
 </sect2>
 
 <sect2 xml:id="language.types.dotdotdot">
  <title>...</title>
  
  <para>
   <parameter>$...</parameter> en el prototipo de funciones significa
   <literal>and so on</literal>. Este nombre de variable se usa cuando una función 
   puede tomar un número infinito de argumentos.
  </para>
  
 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
