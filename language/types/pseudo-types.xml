<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.1 $ -->
<!-- EN-Revision: 1.3 Maintainer: lboshell Status: ready -->
<sect1 xml:id="language.pseudo-types">
 <title>Pseudo-tipos y variables usadas en esta documentación</title>

 <sect2 xml:id="language.types.mixed">
  <title>mixed</title>

  <para>
   <literal>mixed</literal> indica que un parámetro puede aceptar múltiples
   tipos (pero no necesariamente todos).
  </para>

  <para>
   <function>gettype</function>, por ejemplo, aceptará todos los tipos PHP,
   mientras que <function>str_replace</function> aceptará cadenas y
   matrices.
  </para>

 </sect2>

 <sect2 xml:id="language.types.number">
  <title>number</title>

  <para>
   <literal>number</literal> indica que un parámetro puede ser
   <type>integer</type> o <type>float</type>.
  </para>

 </sect2>

 <sect2 xml:id="language.types.callback">
  <title>callback</title>

  <para>
   Algunas funciones como <function>call_user_func</function> o
   <function>usort</function> aceptan llamadas de retorno definidas por el
   usuario como parámetro. Las funciones tipo llamada de retorno no sólo
   pueden ser funciones simples, también pueden ser métodos de objetos,
   incluyendo métodos estáticos de clase.
  </para>

  <para>
   Una función de PHP es pasada simplemente usando su nombre como una
   cadena. Cualquier función interna o definida por el usuario puede ser
   usada, con la excepción de construcciones del lenguaje tales como:
   <function>array</function>, <function>echo</function>,
   <function>empty</function>, <function>eval</function>,
   <function>exit</function>, <function>isset</function>,
   <function>list</function>, <function>print</function> o
   <function>unset</function>.
  </para>

  <para>
   Un método de un objeto instanciado es pasado como una matriz que contiene
   un objeto como el elemento con el índice 0 y un nombre de método en el
   índice 1.
  </para>

  <para>
   Los métodos estáticos de clase pueden ser pasados también sin instanciar
   un objeto de esa clase al pasar el nombre de clase en lugar de un objeto
   como el elemento con índice 0.
  </para>

  <para>
   Además de la creación de funciones comunes definidas por el usuario,
   <function>create_function</function> puede ser usada para crear una
   función de llamada de retorno anónima.
  </para>

  <example>
   <title>
    Ejemplos de funciones tipo llamada de retorno
   </title>
   <programlisting role="php">
<![CDATA[
<?php

// Una llamada de retorno de ejemplo
function mi_llamada_de_retorno() {
    echo '¡Hola mundo!';
}

// Un método como llamada de retorno de ejemplo
class MiClase {
    function miMetodoDeRetorno() {
        echo '¡Hola Mundo!';
    }
}

// Tipo 1: Llamada de retorno simple
call_user_func('mi_llamada_de_retorno');

// Tipo 2: Llamada de método estático de clase
call_user_func(array('MiClase', 'miMetodoDeRetorno'));

// Tipo 3: Llamada a un metodo de objeto
$obj = new MiClase();
call_user_func(array($obj, 'miMetodoDeRetorno'));

// Tipo 4: Llamada a un método estático de clase (A partir de PHP 5.2.3)
call_user_func('MiClase::miMetodoDeRetorno');

// Tipo 5: Llamada relativa a método estático de clase (A partir de PHP 5.3.0)
class A {
    public static function quien() {
        echo "A\n";
    }
}

class B extends A {
    public static function quien() {
        echo "B\n";
    }
}

call_user_func(array('B', 'parent::quien')); // A
?>
]]>
   </programlisting>
  </example>

  <note>
   <simpara>
    En PHP4, era necesario usar una referencia para crear una llamada de
    retorno que apuntara al objeto real, y no a una copia de éste. Para más
    detalles, vea <link linkend="language.references">Referencias
    Explicadas</link>.
   </simpara>
  </note>

 </sect2>

 <sect2 xml:id="language.types.void">
  <title>void</title>

  <para>
   <literal>void</literal> como tipo de retorno quiere decir que el valor de
   retorno no tiene utilidad. <literal>void</literal> en una lista de
   parámetros quiere decir que la función no recibe ningún parámetro.
  </para>

 </sect2>

 <sect2 xml:id="language.types.dotdotdot">
  <title>...</title>

  <para>
   <parameter>$...</parameter> en los prototipos de funciones quiere decir
   <literal>y así sucesivamente</literal>. Este nombre de variable es usado
   cuando una función puede recibir un número ilimitado de argumentos.
  </para>

 </sect2>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
