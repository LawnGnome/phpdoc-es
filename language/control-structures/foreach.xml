<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 319054 Maintainer: seros Status: ready -->
<!-- Reviewed: no -->

<sect1 xml:id="control-structures.foreach" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title><literal>foreach</literal></title>
 <?phpdoc print-version-for="foreach"?>
 <para>
  El constructor <literal>foreach</literal> simplemente ofrece un modo sencillo de
  iterar sobre arrays. <literal>foreach</literal> funciona sólo sobre arrays (y objetos) y
  emitirá un error al intentar usarlo con una variable de un tipo
  diferente de datos o una variable no inicializada. Existen dos sintaxis; la
  segunda es una extensión menor pero más útil que la primera:
  <informalexample>
   <programlisting>
<![CDATA[
foreach (expresión_array as $valor)
    sentencias
foreach (expresión_array as $clave => $valor)
    sentencias
]]>
   </programlisting>
  </informalexample>
 </para>
 <simpara>
  La primera forma recorre el array dado por
  <literal>expresión_array</literal>. En cada ciclo, el valor
  del elemento actual se asigna a <literal>$valor</literal> y
  el puntero interno del array avanza una posición (así en el próximo
  ciclo se estará observando el siguiente elemento).
 </simpara>
 <simpara>
  La segunda manera hace lo mismo, excepto que la clave del elemento
  actual será asignada a la variable
  <literal>$clave</literal> en cada ciclo.
 </simpara>
 <simpara>
  A partir de PHP 5, también es posible
  <link linkend="language.oop5.iterations">personalizar los objetos de la iteración</link>.
 </simpara>
 <para>
  <note>
   <para>
    Cuando <literal>foreach</literal> inicia su ejecución, el
    puntero interno del array se pone automáticamente en el primer elemento
    del array. Esto significa que no es necesario llamar la función 
    <function>reset</function> antes de un bucle 
    <literal>foreach</literal>.
   </para>
  </note>
 </para>
 <para>
  <note>
   <para>
    <literal>foreach</literal> opera sobre una copia de los valores del array a menos que
    <literal>$valor</literal> sea <link linkend="language.references">referenciado</link>
    anteponiéndole &amp;.  <literal>foreach</literal>
    tiene algunos efectos secundarios sobre el puntero del array. No confíe en el puntero
    del array durante o después de la ejecución de <literal>foreach</literal> sin reinicializarlo.
   </para>
  </note>
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = array(1, 2, 3, 4);
foreach ($array as &$valor) {
    $valor = $valor * 2;
}
// $array ahora es array(2, 4, 6, 8)
unset($valor); // rompe la referencia con el último elemento
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Referenciar <literal>$valor</literal> sólo es posible si el array iterado puede ser
  referenciado (es decir, si es una variable). El siguiente código no funcionará:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
foreach (array(1, 2, 3, 4) as &$valor) {
    $valor = $valor * 2;
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <warning>
  <para>
   La referencia del <literal>$valor</literal> y el último elemento del array
   permanecen aún después del bucle <literal>foreach</literal>. Se recomienda
   destruirlos con <function>unset</function>.
  </para>
 </warning>
 <para>
  <note>
   <para>
    <literal>foreach</literal> no soporta la capacidad de 
    suprimir mensajes de error usando '@'.
   </para>
  </note>
 </para>
 <para>
  Se puede haber notado que las siguientes construcciones son funcionalmente
  idénticas:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = array("uno", "dos", "tres");
reset($array);
while (list(, $valor) = each($array)) {
    echo "Valor: $valor<br />\n";
}

foreach ($array as $valor) {
    echo "Valor: $valor<br />\n";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Las siguientes construcciones también son funcionalmente idénticas:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
$array = array("uno", "dos", "tres");
reset($array);
while (list($clave, $valor) = each($array)) {
    echo "Clave: $clave; Valor: $valor<br />\n";
}

foreach ($array as $clave => $valor) {
    echo "Clave: $clave; Valor: $valor<br />\n";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
 <para>
  Algunos ejemplos más para demostrar su uso:
  <informalexample>
   <programlisting role="php">
<![CDATA[
<?php
/* Ejemplo 1 de foreach: sólo el valor */

$a = array(1, 2, 3, 17);

foreach ($a as $v) {
    echo "Valor actual de \$a: $v.\n";
}

/* Ejemplo 2 de foreach: valor (con su notación de acceso manual impreso con fines ilustrativos) */

$a = array(1, 2, 3, 17);

$i = 0; /* sólo para efectos ilustrativos */

foreach ($a as $v) {
    echo "\$a[$i] => $v.\n";
    $i++;
}

/* Ejemplo 3 de foreach: clave y valor */

$a = array(
    "uno" => 1,
    "dos" => 2,
    "tres" => 3,
    "diecisiete" => 17
);

foreach ($a as $k => $v) {
    echo "\$a[$k] => $v.\n";
}

/* Ejemplo 4 de foreach: arrays multidimensionales */
$a = array();
$a[0][0] = "a";
$a[0][1] = "b";
$a[1][0] = "y";
$a[1][1] = "z";

foreach ($a as $v1) {
    foreach ($v1 as $v2) {
        echo "$v2\n";
    }
}

/* Ejemplo 5 de foreach: arrays dinámicos */

foreach (array(1, 2, 3, 4, 5) as $v) {
    echo "$v\n";
}
?>
]]>
   </programlisting>
  </informalexample>
 </para>
</sect1>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
