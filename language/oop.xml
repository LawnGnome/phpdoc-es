 <chapter id="language.oop">
  <title>Clases y Objetos</title>

  <sect1 id="keyword.class">
   <title><literal>class</literal></title>
   <para>
    Una clase es una colecci&oacute;n de variables y de funciones que acceden a esas
    variables. Una clase se define con la siguiente sintaxis:
 
    <informalexample>
     <programlisting role="php">
&lt;?php
class Cart {
    var $items;  // Items en nuestro carro de la compra
   
    // A&ntilde;adir $num art&iacute;culos de tipo $artnr al carro
 
    function add_item ($artnr, $num) {
        $this->items[$artnr] += $num;
    }
   
    // Sacar $num art&iacute;culos del tipo $artnr del carro
 
    function remove_item ($artnr, $num) {
        if ($this->items[$artnr] > $num) {
            $this->items[$artnr] -= $num;
            return true;
        } else {
            return false;
        }   
    }
}
?>
     </programlisting>
    </informalexample>
   </para>
 
   <para>
    El ejemplo define una clase llamada Cart que consiste en un array 
asociativo de art&iacute;culos en el carro y dos funciones para meter y sacar &iacute;tems del carro
   </para>
   <para>
    Las clases son tipos, es decir, son plantillas para variables. Tienes que crear una variable del 
    tipo deseado con el operador new.
   </para>
 
   <informalexample>
    <programlisting role="php">
 $cart = new Cart;
 $cart->add_item("10", 1);
    </programlisting>
   </informalexample>
 
   <para>
Este ejemplo crea un objeto $cart de clase Cart. La funci&oacute;n add_item() de ese objeto se llama para a&ntilde;adir un 
item del art&iacute;culo n&uacute;mero 10 al carro. </para><para> Las Clases pueden ser extensiones de otras clases.
Las clases extendidas o derivadas tienen todas las variables y funciones de la clase base y lo que les a&ntilde;adas
al extender la definici&oacute;n. La herencia m&uacute;ltiple no est&aacute; soportada.
   </para>
 
   <informalexample>
    <programlisting role="php">
class Named_Cart extends Cart {
    var $owner;
  
    function set_owner ($name) {
        $this->owner = $name;
    }
}
    </programlisting>
   </informalexample>
 
   <para>
Ese ejemplo define una clase Named_Cart (carro con nombre o due&ntilde;o) que tiene todas las variables
y funciones de Cart, y adem&aacute;s a&ntilde;ade la variable $owner y una funci&oacute;n adicional set_owner().
Un carro con nombre se crea de la forma habitual y, una vez hecho, puedes acceder al 
propietario del carro. En los carros con nombre tambi&eacute;n puedes acceder a las funciones normales del carro:
   </para>
 
   <informalexample>
    <programlisting role="php">
$ncart = new Named_Cart;    // Creamos un carro con nombre
$ncart->set_owner ("kris"); // Nombramos el carro
print $ncart->owner;        // Imprimimos el nombre del propietario
$ncart->add_item ("10", 1); // Funcionalidad heredada de Cart
    </programlisting>
   </informalexample>
  
   <para>
Entre funciones de una clase, la variable $this hace referencia al 
propio objeto. Tienes que usar $this->loquesea para acceder a una variable
o funci&oacute;n llamada loquesea del objeto actual.
   </para>
   <para>
Los constructores son funciones de una clase que se llaman autom&aacute;ticamente
al crear una nueva instancia (objeto) de una clase. Una funci&oacute;n se convierte
en constructor cuando tiene el mismo nombre que la clase.
   </para>
 
   <informalexample>
    <programlisting role="php">
class Auto_Cart extends Cart {
    function Auto_Cart () {
        $this->add_item ("10", 1);
    }
}
    </programlisting>
   </informalexample>
 
   <para>
Este ejemplo define una clase Auto_Cart que es un Cart junto con un constructor
que inicializa el carro con un item del tipo de art&iacute;culo "10" cada vez que se
crea un nuevo Auto_Cart con "new". Los constructores tambi&eacute;n pueden recibir par&aacute;metros
y estos par&aacute;metros pueden ser opcionales, lo que los hace m&aacute;s &uacute;tiles.
   </para>
 
   <informalexample>
    <programlisting role="php">
class Constructor_Cart extends Cart {
    function Constructor_Cart ($item = "10", $num = 1) {
        $this->add_item ($item, $num);
    }
}
 
// Compramos las mismas cosas aburridas de siempre
 
$default_cart   = new Constructor_Cart;
 
// Compramos las cosas interesantes
 
$different_cart = new Constructor_Cart ("20", 17);
    </programlisting>
   </informalexample>
 
   <caution>
    <simpara>
Para las clases derivadas, el constructor de la clase padre no es llamado autom&aacute;ticamente cuando 
se llama al constructor de la clase derivada.
    </simpara> 
   </caution>
  </sect1>
 
 </chapter>
 
 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 -->
