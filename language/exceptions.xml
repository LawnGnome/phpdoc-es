<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.3 $ -->
<!-- EN-Revision: 1.3 Maintainer: baoengb Status: ready -->
 <chapter xml:id="language.exceptions" xmlns="http://docbook.org/ns/docbook">
  <title>Excepciones</title>

  <para>
   PHP 5 tiene un modelo de excepciones similar a de otros lenguajes de 
   programaci&ocute;n. Una excepci&oacute;n puede ser lanzada 
   <literal>throw</literal>n, y capturada ("<literal>catche</literal>ed")
   dentro de PHP. El codigo debe estar delimitado dentro de un bloque
   <literal>try</literal>, para facilitar el capturar las excepciones
   potenciales. Cada bloque <literal>try</literal> debe tener al menos 
   un bloque <literal>catch</literal>. M&uacute;ltiples bloques 
   <literal>catch</literal> pueden ser usados para capturar diferentes
   clases de excepciones. En la ejecuci&oacute;n normal (cuando no hay
   excepciones dentro de un bloque <literal>try</literal>, o cuando 
   el bloque <literal>catch</literal> correspondiente a la clase de la
   excepcion lanzada no esta presente) continuar&aacute; hasta el
   &uacute;ltimo bloque catch definido en la secuencia. Las 
   excepciones pueden ser iniciadas o reiniciadas dentro de un bloque
   <literal>catch</literal>.
  </para>
  <para>
   Cuando es lanzada una excepci&oacute;n, la siguiente l&iacute;nea de 
   c&oacute;digo no ser&aacute; ejecutada y PHP intentar&aacute; encontrar
   el primer bloque de captura de excepciones <literal>catch</literal>. 
   Si una excepci&oacute;n no es
   capturada se despliega un error fatal de PHP con un mensaje de que la 
   excepci&oacute;n no fue capturada, a menos que exista un manejador de 
   errores definido como <function>set_exception_handler</function>.
  </para>
   <example>
    <title>Lanzando una Excepci&oacute;n</title>
    <programlisting role="php">
<![CDATA[
<?php
try {
    $error = 'Always throw this error';
    throw new Exception($error);

    // Code following an exception is not executed.
    echo 'Never executed';

} catch (Exception $e) {
    echo 'Caught exception: ',  $e->getMessage(), "\n";
}

// Continue execution
echo 'Hello World';
?>
]]>
    </programlisting>
   </example>

  <sect1 xml:id="language.exceptions.extending">
   <title>Extendiendo excepciones</title>
   <para>
    Una clase de excepciones definida por el usuario, puede ser 
    definida extendiendo la clase de excepciones incorporada. Los miembros 
    y propiedades mencionados en seguida, muestran lo que est&aacute; 
    accesible dentro de la clase "hijo" que se deriba de la clase de
    excepciones incorporados.
   </para>
   <example>
    <title>La clase de excepciones incorporada</title>
    <programlisting role="php">
<![CDATA[
<?php
class Exception
{
    protected $message = 'Unknown exception';   // exception message
    protected $code = 0;                        // user defined exception code
    protected $file;                            // source filename of exception
    protected $line;                            // source line of exception

    function __construct($message = null, $code = 0);

    final function getMessage();                // message of exception 
    final function getCode();                   // code of exception
    final function getFile();                   // source filename
    final function getLine();                   // source line
    final function getTrace();                  // an array of the backtrace()
    final function getTraceAsString();          // formated string of trace

    /* Overrideable */
    function __toString();                       // formated string for display
}
?>
]]>
    </programlisting>
   </example>
   <para>
    Si una clase se extiende de la clase Exception incorporada y redefine el
    <link linkend="language.oop5.decon">constructor</link>, es altamente 
    recomendado que tambi&eacute;n llame <link
    linkend="language.oop5.paamayim-nekudotayim">parent::__construct()</link>
    para asegurarse que todos los datos disponibles han sido asignados 
    apropiadamente. El m&eacute;todo <link
    linkend="language.oop5.magic">__toString()</link> puede ser evitado 
    para proveer una salida personalizada cuando el objeto es presentado 
    como una cadena.
   </para>
   <example>
    <title>Extendiendo la clase Exception</title>
    <programlisting role="php">
<![CDATA[
<?php
/**
 * Define a custom exception class
 */
class MyException extends Exception
{
    // Redefine the exception so message isn't optional
    public function __construct($message, $code = 0) {
        // some code
    
        // make sure everything is assigned properly
        parent::__construct($message, $code);
    }

    // custom string representation of object */
    public function __toString() {
        return __CLASS__ . ": [{$this->code}]: {$this->message}\n";
    }

    public function customFunction() {
        echo "A Custom function for this type of exception\n";
    }
}


/**
 * Create a class to test the exception
 */
class TestException
{
    public $var;

    const THROW_NONE    = 0;
    const THROW_CUSTOM  = 1;
    const THROW_DEFAULT = 2;

    function __construct($avalue = self::THROW_NONE) {

        switch ($avalue) {
            case self::THROW_CUSTOM:
                // throw custom exception
                throw new MyException('1 is an invalid parameter', 5);
                break;

            case self::THROW_DEFAULT:
                // throw default one.
                throw new Exception('2 isnt allowed as a parameter', 6);
                break;

            default: 
                // No exception, object will be created.
                $this->var = $avalue;
                break;
        }
    }
}


// Example 1
try {
    $o = new TestException(TestException::THROW_CUSTOM);
} catch (MyException $e) {      // Will be caught
    echo "Caught my exception\n", $e;
    $e->customFunction();
} catch (Exception $e) {        // Skipped
    echo "Caught Default Exception\n", $e;
}

// Continue execution
var_dump($o);
echo "\n\n";


// Example 2
try {
    $o = new TestException(TestException::THROW_DEFAULT);
} catch (MyException $e) {      // Doesn't match this type
    echo "Caught my exception\n", $e;
    $e->customFunction();
} catch (Exception $e) {        // Will be caught
    echo "Caught Default Exception\n", $e;
}

// Continue execution
var_dump($o);
echo "\n\n";


// Example 3
try {
    $o = new TestException(TestException::THROW_CUSTOM);
} catch (Exception $e) {        // Will be caught
    echo "Default Exception caught\n", $e;
}

// Continue execution
var_dump($o);
echo "\n\n";


// Example 4
try {
    $o = new TestException();
} catch (Exception $e) {        // Skipped, no exception
    echo "Default Exception caught\n", $e;
}

// Continue execution
var_dump($o);
echo "\n\n";
?>
]]>
    </programlisting>
   </example>
  </sect1>

 </chapter>
 
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
