<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.8 $ -->
<!-- EN-Revision: 1.38 Maintainer: rafael Status: ready -->

 <chapter id="functions">
 <title>Funciones</title>
 
 <sect1 id="functions.user-defined">
  <title>Funciones definidas por el usuario</title>
  
  <para>
   Una funci&oacute;n se puede definir con la siguiente sintaxis:
  </para>
  <para>
   <example>
    <title>Psuedo c&oacute;digo para demostrar el uso de
    funciones</title>
    <programlisting role="php">
<![CDATA[
<?php
function foo ($arg_1, $arg_2, ..., $arg_n) 
{
    echo "Funci&oacute;n de ejemplo.\n";
    return $retval;
}
?>
]]>
    </programlisting>
   </example>
  </para>
  
  <simpara>
   Cualquier instrucci&oacute;n v&aacute;lida de PHP puede aparecer en
   el cuerpo de la funci&oacute;n, incluso otras funiones y
   definiciones de <link linkend="keyword.class">clases</link>.
  </simpara>
  <simpara>
   En PHP3, las funciones deben definirse antes de que se referencien.
   En PHP4 no existe tal requerimiento.<emphasis>Excepto</emphasis>
   cuando una funci&oacute;n es definida condicionalmente como en los
   ejemplos siguientes.
  </simpara>
  <para>
   Cuando una funci&oacute;n es definida condicionalmente como se
   puede ver en estos dos ejemplos, su definici&oacute;n debe ser
   procesada <emphasis>antes</emphasis> que sea llamada.
  </para>
  <para>
   <example>
    <title>Funciones Condicionales</title>
    <programlisting role="php">
<![CDATA[
<?php

$makefoo = true;

/* We can't call foo() from here 
   since it doesn't exist yet,
   but we can call bar() */

bar();

if ($makefoo) {
  function foo ()
  {
    echo "I don't exist until program execution reaches me.\n";
  }
}

/* Now we can safely call foo()
   since $makefoo evaluated to true */

if ($makefoo) foo();

function bar() 
{
  echo "I exist immediately upon program start.\n";
}

?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   <example>
    <title>Funciones dentro de funciones</title>
    <programlisting role="php">
<![CDATA[
<?php
function foo() 
{
  function bar() 
  {
    echo "I don't exist until foo() is called.\n";
  }
}

/* We can't call bar() yet
   since it doesn't exist. */

foo();

/* Now we can call bar(),
   foo()'s processesing has
   made it accessable. */

bar();

?>  
]]>
    </programlisting>
   </example>
  </para>
  <simpara>
   PHP no soporta la redefinici&oacute;n de funciones previamente
   declaradas.
   </simpara>
   <note>
    <simpara>
    Los nombres de funciones se pueden llamar con mayusculas o
    minusculas, aunque es una buena costumbre el llamar a las
    funciones tal y como aparecen en su definici&oacute;n.
   </simpara>
  </note>   
 
  <simpara>
   PHP3 no soporta un n&uacute;mero variable de par&aacute;metros,
   aunque s&iacute; soporta par&aacute;metros por defecto (ver <link
   linkend="functions.arguments.default">Valores por defecto de de los
   par&aacute;metros</link> para m&aacute;s informaci&oacute;n). PHP4
   soporta ambos: ver <link
   linkend="functions.variable-arg-list">Listas de longitud variable
   de par&aacute;metros</link> y las referencias de las funciones
   <function>func_num_args</function>,
   <function>func_get_arg</function>, y
   <function>func_get_args</function> para m&aacute;s
   informaci&oacute;n.
   </simpara>

  </sect1>
 
 <sect1 id="functions.arguments">
  <title>Par&aacute;metros de las funciones</title>
  
  <simpara>
   La informaci&oacute;n puede suministrarse a las funciones mediante
   la lista de par&aacute;metros, una lista de variables y/o
   constantes separadas por comas.  </simpara>
  <para>
   PHP soporta pasar par&aacute;metros por valor (el comportamiento
   por defecto), <link linkend="functions.arguments.by-reference">por
   referencia</link>, y <link
   linkend="functions.arguments.default">par&aacute;metros por
   defecto</link>.  Listas de longitud variable de par&aacute;metros
   s&oacute;lo est&aacute;n soportadas en PHP4 y posteriores; ver
   <link linkend="functions.variable-arg-list">Listas de longitud
   variable de par&aacute;metros</link> y la referencia de las
   funciones <function>func_num_args</function>,
   <function>func_get_arg</function>, y
   <function>func_get_args</function> para m&aacute;s
   informaci&oacute;n. Un efecto similar puede conseguirse en PHP3
   pasando un array de par&aacute;metros a la funci&oacute;n:
  </para>
  <para>
   <example>
    <programlisting role="php">
<![CDATA[
function takes_array($input) 
{
    echo "$input[0] + $input[1] = ", $input[0]+$input[1];
}
]]>
    </programlisting>
   </example>
  </para>
 
  <sect2 id="functions.arguments.by-reference">
   <title>Pasar par&aacute;metros por referencia</title>
   
   <simpara>
    Por defecto, los par&aacute;metros de una funci&oacute;n se pasan
    por valor (de manera que si cambias el valor del argumento dentro
    de la funci&oacute;n, no se ve modificado fuera de ella). Si
    deseas permitir a una funci&oacute;n modificar sus
    par&aacute;metros, debes pasarlos por referencia.
   </simpara>
   <para>
    Si quieres que un par&aacute;metro de una funci&oacute;n siempre
    se pase por referencia, puedes anteponer un ampersand (&amp;) al
    nombre del par&aacute;metro en la definici&oacute;n de la
    funci&oacute;n:
   </para>
   <para>
    <example>
     <programlisting role="php">
<![CDATA[
<?php
function add_some_extra(&amp;$string) 
{
    $string .= ' y algo m&aacute;s.';
}
$str = 'Esto es una cadena, ';
add_some_extra($str);
echo $str;    // Saca 'Esto es una cadena, y algo m&aacute;s.'
?>
]]>
     </programlisting>
    </example>
   </para>
   
  </sect2>
  
  <sect2 id="functions.arguments.default">
   <title>Par&aacute;metros por defecto</title>
   
    <para>
    Una funci&oacute;n puede definir valores por defecto para los
    par&aacute;metros escalares estilo C++:
   </para>
   <para>
    <example>
     <title>Uso de par&aacute;metros por defecto en funciones</title>
     <programlisting role="php">
<![CDATA[
<?php
function makecoffee ($type = "cappucino") 
{
    return "Hacer una taza de $type.\n";
}
echo makecoffee ();
echo makecoffee ("espresso");
?>
]]>
     </programlisting>
    </example>
   </para>
   
   <para>
    La salida del fragmento anterior es:
    
    <screen>
Hacer una taza de cappucino.
Hacer una taza de espresso.
    </screen>
   </para>
   
   <simpara>
    El valor por defecto tiene que ser una expresi&oacute;n constante,
    y no una variable o miembro de una clase.
   </simpara>
   <para>
    Destacar que cuando se usan par&aacute;metros por defecto, estos
    tienen que estar a la derecha de cualquier par&aacute;metro sin
    valor por defecto; de otra manera las cosas no funcionar&aacute;n
    de la forma esperada. Considera el siguiente fragmento de
    c&oacute;digo:
   </para>
   <para>
    <example>
     <title>Uso incorrecto de par&aacute;metros por defecto en
     funciones</title>
     <programlisting role="php">
<![CDATA[
<?php
function makeyogurt ($type = "acidophilus", $flavour) 
{
    return "Haciendo un bol de $type $flavour.\n";
}
 
echo makeyogurt ("mora");   // No funcionar&aacute; de la manera
esperada
?>
]]>
     </programlisting>
    </example>
   </para>
   
   <para>
    La salida del ejemplo anterior es:
   </para>
   <para>
    <screen>
Warning: Missing argument 2 in call to makeyogurt() in 
/usr/local/etc/httpd/htdocs/php3test/functest.html on line 41
Haciendo un bol de mora.
    </screen>
   </para>
   
   <para>
    Y ahora, comp&aacute;ralo con:
   </para>
   <para>
    <example>
     <title>Uso correcto de par&aacute;metros por defecto en
      funciones</title>
     <programlisting role="php">
<![CDATA[
<?php
function makeyogurt ($flavour, $type = "acidophilus") 
{
    return "Haciendo un bol de $type $flavour.\n";
}
 
echo makeyogurt ("mora");   // funciona como se esperaba
?>
]]>
     </programlisting>
    </example>
   </para>
   
   <para>
    La salida de este ejemplo es:
   </para>
   <para>
    <screen>
Haciendo un bol de acidophilus mora.
    </screen>
   </para>
   
  </sect2>
  
  <sect2 id="functions.variable-arg-list">
   <title>Lista de longitud variable de par&aacute;metros</title>
   
   <simpara>
    PHP4 soporta las listas de longitud variable de par&aacute;metros
     en las funciones definidas por el usuario. Es realmente
    f&aacute;cil, usando las funciones
    <function>func_num_args</function>,
    <function>func_get_arg</function>, y
    <function>func_get_args</function>.
   </simpara>
   
   <simpara>
    No necesita de ninguna sintaxis especial, y las listas de
    par&aacute;metros pueden ser escritas en la llamada a la
    funci&oacute;n y se comportar&aacute;n de la manera esperada.
   </simpara>
   
  </sect2>
  
 </sect1>
 
 <sect1 id="functions.returning-values">
  <title>Devolviendo valores</title>
  
  <para>
   Los valores se retornan usando la instrucci&oacute;n opcional
   return.  Puede devolverse cualquier tipo de valor, incluyendo
   listas y objetos.
  </para>
  <para>
   <example>
    <title>Us0 de <function>return</function></title>
    <programlisting role="php">
<![CDATA[
<?php
function square ($num) 
{
    return $num * $num;
}
echo square (4);   // saca '16'.
?>
]]>
    </programlisting>
   </example>
  </para>
  
  <para>
   No puedes devolver m&uacute;ltiples valores desde una
   funci&oacute;n, pero un efecto similar se puede conseguir
   devolviendo una lista.
  </para>
  <para>
   <example>
    <title>Retornando una matriz para obtener m&uacute;ltiples
     valores</title>
    <programlisting role="php">
<![CDATA[
<?php
function small_numbers() 
{
    return array (0, 1, 2);
}
list ($zero, $one, $two) = small_numbers();
?>
]]>
    </programlisting>
   </example>
  </para>
  <para>
   Para retornar una referencia desde una funci&oacute;n, se tiene que
   usar el operador de referencias &amp; tanto en la
   declaraci&oacute;n de la funci&oacute;n como en la
   asignaci&oacute;n del valor de retorno a una variable;
    </para>
   <para>
    <example>
     <title>Retornando una referencia desde una funci&oacute;n</title>
  
    <programlisting role="php">
<![CDATA[
<?php
function &returns_reference()
{
    return $someref;
}

$newref =& returns_reference();
?>
]]>
    </programlisting>
   </example>
  </para>
  <simpara>
   Para m&aacute;s informaci&oacute;n sobre referencias,consultar
   <link linkend="language.references">Explicando Referencias</link>.
  </simpara>
 </sect1>
 
 <sect1 id="functions.variable-functions">
  <title>Funciones variables</title>
  
  <para>
   PHP soporta el concepto de funciones variable, esto significa que
   si una variable tiene unos par&eacute;ntesis a&ntilde;adidos al
   final, PHP buscar&aacute; una funci&oacute;n con el mismo nombre
   que la evaluaci&oacute;n de la variable, e intentar&aacute;
   ejecutarla.  Entre otras cosas, esto te permite implementar
   retrollamadas (callbacks), tablas de funciones y dem&aacute;s.
  </para>
  <para>
   Las funciones varibles no funcionar&aacute;n con construcciones del
   lenguaje, tal como <function>echo</function>,
   <function>print</function>, <function>unset</function>,
   <function>isset</function>, <function>empty</function>,
   <function>include</function>, <function>require</function> y
   derivados. Se necesitar&aacute; usar una funci&oacute;n propia para
   utilizar cualquiera de estos constructores como funciones
   variables.
  </para>
  <para>
   <example>
    <title>Ejemplo de funci&oacute;n variable</title>
    <programlisting role="php">
<![CDATA[
<?php
function foo()
{
    echo "In foo()<br>\n";
}

function bar($arg = '')
{
    echo "In bar(); argument was '$arg'.<br>\n";
}

// This is a wrapper function around echo
function echoit($string)
{
    echo $string;
}

$func = 'foo';
$func();        // This calls foo()

$func = 'bar';
$func('test');  // This calls bar()

$func = 'echoit';
$func('test');  // This calls echoit()
?>
]]>

    </programlisting>
   </example>
  </para>
  <para>
   Tambi&eacute;n se puede llamar a un metodo de un objeto usando la
   caracter&iacute;stica variable de las funciones.
   <example>
    <title>Ejemplo sobre el metodo variable</title>
    <programlisting role="php">
<![CDATA[
<?php
class Foo
{
    function Var()
    {
        $name = 'Bar';
        $this->$name(); // This calls the Bar() method
    }
    
    function Bar()
    {
        echo "This is Bar";
    }
}

$foo = new Foo();
$funcname = "Var";
$foo->$funcname();  // This calls $foo->Var()

?>
     ]]>
    </programlisting>
   </example>
  </para>
  <para>
   Ver tambi&eacute;n <function>call_user_func</function>,
   <link linkend="language.variables.variable">
    variable variables</link> y <function>function_exists</function>.
   </para>
  </sect1>
 
 <sect1 id="functions.internal">
  <title>Funciones internas (incorporadas)</title>
  
  <para>
   PHP tiene incorporadas muchas funciones y construcciones. Existen
   tambi&eacute;n funciones que requieren extensiones espec&iacute;ficas de PHP para
   que no fallen con un error fatal del tipo "undefined function". Por
   ejemplo, para usar funciones <link
   linkend="ref.image">image</link>, tal como
   <function>imagecreatetruecolor</function>, se necesita compilar PHP
   con soporte para GD. O para usar <function>mysql_connect</function>
   se necesita compilar PHP con soporte para <link
   linkend="ref.mysql">MySQL</link>. Existen muchas funciones en el
   n&uacute;cleo de PHP que se incluyen en cada version de PHP, como las
   funciones <link linkend="ref.strings">string</link> y <link
   linkend="ref.variables">variable</link>. Una llamada a la funci&oacute;n
   <function>phpinfo</function> &oacute;
   <function>get_loaded_extensions</function> mostrar&aacute; que extensiones
   est&aacute;n cargadas en tu versi&oacute;n de PHP. Tener tambien en cuenta que
   muchas extensiones se encuentran activadas por defecto y que el
   manual de PHP se encuentra dividido en partes, seg&uacute;n estas
   extensiones. Vea los cap&iacute;tulos <link
   linkend="configuration">configuraci&oacute;n</link>, <link
   linkend="installation">instalaci&oacute;n</link> y los capitulos sobre
   cada extensi&oacute;n, para obtener informaci&oacute;n sobre como configurar
   vuestro PHP
  </para>
  <para>
   La explicaci&oacute;n de como leer e intrerpretar un prototipo de funci&oacute;n
   se encuentra en la secci&oacute;n del manual titulada <link
   linkend="about.prototypes">como leer la definici&oacute;n de una
   funci&oacute;n</link>.  Es importante entender que devuelve una funci&oacute;n &oacute;
   si la funci&oacute;n trabaja directamente en el valor entregado a la
   misma. Por ejemplo, <function>str_replace</function> devuelve una
   cadena modificada mientras que <function>usort</function> trabaja
   directamente en el valor entregado a la misma. Cada p&aacute;gina del
   manual contiene informaci&oacute;n espec&iacute;fica sobre las diferentes
   funciones existentes, parametros que utilizan, valores devueltos,
   cambios de comportamiento, etc. Es importante conocer estas
   diferencias para poder escribir correctamente c&oacute;digo PHP.
  </para>
  <para>
   Vea tambi&eacute;n <function>function_exists</function>, <link
    linkend="funcref">referencias de funciones</link>,
    <function>get_extension_funcs</function> y
    <function>dl</function>.
  </para>
  </sect1>
 </chapter>
 
 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 indent-tabs-mode:nil
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 -->
