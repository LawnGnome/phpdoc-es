 <chapter id="functions">
  <title>Funciones</title>

  <sect1 id="functions.user-defined">
   <title>Funciones definidas por el usuario</title>
 
   <para>
    Una función se define con la siguiente sintaxis:
 
    <informalexample>
     <programlisting role="php">
function foo ($arg_1, $arg_2, ..., $arg_n) {
    echo "Función de ejemplo.\n";
    return $retval;
}
     </programlisting>
    </informalexample>
   </para>
     
   <simpara>
    Cualquier instrucción válida de PHP puede aparecer en el cuerpo
    de la función, incluso otras funiones y definiciones de 
    <link linkend="keyword.class">clases</link>.
   </simpara>
   <simpara>
    En PHP3, las funciones deben definirse antes de que se referencien.
    En PHP4 no existe tal requerimiento.
   </simpara>
   <simpara>
    PHP no soporta la sobrecarga de funciones, y tampoco es posible 
    redefinir u ocultar funciones previamente declaradas.
   </simpara>
   <simpara>
    PHP3 no soporta un número variable de parámetros, aunque sí soporta
    parámetros por defecto (ver <link
    linkend="functions.arguments.default">Valores por defecto de de 
    los parámetros</link> para más información). PHP4 soporta ambos: ver <link
    linkend="functions.variable-arg-list">Listas de longitud variable de 
    parámetros</link> y las referencias de las funciones
    <function>func_num_args</function>,
    <function>func_get_arg</function>, y
    <function>func_get_args</function> para más información.
   </simpara>

  </sect1>
 
  <sect1 id="functions.arguments">
   <title>Parámetros de las funciones</title>
 
   <simpara>
    La información puede suministrarse a las funciones mediante la lista
    de parámetros, una lista de variables y/o constantes separadas por
    comas.
   </simpara> 
   <para>
     PHP soporta pasar parámetros por valor (el comportamiento por defecto),
    <link linkend="functions.arguments.by-reference">por referencia</link>, y <link
     linkend="functions.arguments.default">parámetros por defecto</link>. 
     Listas de longitud variable de parámetros sólo están soportadas en PHP4 y posteriores;
     ver <link linkend="functions.variable-arg-list">Listas de longitud variable de parámetros</link> 
     y la referencia de las funciones 
     <function>func_num_args</function>,
     <function>func_get_arg</function>, y
     <function>func_get_args</function> para más información. Un efecto similar puede conseguirse
     en PHP3 pasando un array de parámetros a la función:
 
    <informalexample>
     <programlisting role="php">
function takes_array($input) {
    echo "$input[0] + $input[1] = ", $input[0]+$input[1];
}
     </programlisting>
    </informalexample>
   </para>
 
   <sect2 id="functions.arguments.by-reference">
    <title>Pasar parámetros por referencia</title>
 
    <simpara>
     Por defecto, los parámetros de una función se pasan por valor (de 
     manera que si cambias el valor del argumento dentro de la función, no 
     se ve modificado fuera de ella). Si deseas permitir a una función 
     modificar sus parámetros, debes pasarlos por referencia.
    </simpara>
    <para>
     Si quieres que un parámetro de una función siempre se pase por
     referencia, puedes anteponer un ampersand (&amp;) al nombre del parámetro
     en la definición de la función:
 
     <informalexample>
      <programlisting role="php">
function add_some_extra(&amp;$string) {
    $string .= ' y algo más.';
}
$str = 'Esto es una cadena, ';
add_some_extra($str);
echo $str;    // Saca 'Esto es una cadena, y algo más.'
      </programlisting>
     </informalexample>
    </para>
 
    <para>
     Si deseas pasar una variable por referencia a una función que no 
     toma el parámetro por referencia por defecto, puedes anteponer un 
     ampersand al nombre del parámetro en la llamada a la función:
 
     <informalexample>
      <programlisting role="php">
function foo ($bar) {
    $bar .= ' y algo más.';
}
$str = 'Esto es una cadena, ';
foo ($str);
echo $str;    // Saca 'Esto es una cadena, '
foo (&amp;$str);
echo $str;    // Saca 'Esto es una cadena, y algo más.'
      </programlisting>
     </informalexample>
    </para>

   </sect2>
 
   <sect2 id="functions.arguments.default">
    <title>Parámetros por defecto</title>
 
    <para>
     Una función puede definir valores por defecto para los parámetros
     escalares estilo C++:
 
     <informalexample>
      <programlisting role="php">
function makecoffee ($type = "cappucino") {
    return "Hacer una taza de $type.\n";
}
echo makecoffee ();
echo makecoffee ("espresso");
      </programlisting>
     </informalexample>
    </para>
 
    <para>
     La salida del fragmento anterior es:
 
     <screen>
Hacer una taza de cappucino.
Hacer una taza de espresso.
     </screen>
    </para>
 
    <simpara>
     El valor por defecto tiene que ser una expresión constante, y no 
     una variable o miembro de una clase.
    </simpara>
    <para>
     En PHP 4.0 también es posible especificar <literal>unset</literal>
     como parámetro por defecto.  Esto significa que el argumento no tomará ningún valor
     en absoluto si el valor no es suministrado.
    </para>
    <para>
     Destacar que cuando se usan parámetros por defecto, estos tienen que estar
     a la derecha de cualquier parámetro sin valor por defecto; de otra manera
     las cosas no funcionarán de la forma esperada. Considera el siguiente fragmento 
     de código:
 
     <informalexample>
      <programlisting role="php">
function makeyogurt ($type = "acidophilus", $flavour) {
    return "Haciendo un bol de $type $flavour.\n";
}
 
echo makeyogurt ("mora");   // No funcionará de la manera esperada
      </programlisting>
     </informalexample>
    </para>
 
    <para>
     La salida del ejemplo anterior es:
 
     <screen>
Warning: Missing argument 2 in call to makeyogurt() in 
/usr/local/etc/httpd/htdocs/php3test/functest.html on line 41
Haciendo un bol de mora.
     </screen>
    </para>
 
    <para>
     Y ahora, compáralo con:
 
     <informalexample>
      <programlisting role="php">
function makeyogurt ($flavour, $type = "acidophilus") {
    return "Haciendo un bol de $type $flavour.\n";
}
 
echo makeyogurt ("mora");   // funciona como se esperaba
      </programlisting>
     </informalexample>
    </para>
 
    <para>
     La salida de este ejemplo es:
 
     <screen>
Haciendo un bol de acidophilus mora.
     </screen>
    </para>

   </sect2>

   <sect2 id="functions.variable-arg-list">
    <title>Lista de longitud variable de parámetros</title>
	
    <simpara>
     PHP4 soporta las listas de longitud variable de parámetros en las
     funciones definidas por el usuario. Es realmente fácil, usando
     las funciones
     <function>func_num_args</function>,
     <function>func_get_arg</function>, y
     <function>func_get_args</function>.
    </simpara>

    <simpara>
     No necesita de ninguna sintaxis especial, y las listas de parámetros
     pueden ser escritas en la llamada a la función y se comportarán 
     de la manera esperada.
    </simpara>

   </sect2>

  </sect1>
 
  <sect1 id="functions.returning-values">
   <title>Devolver valores</title>
 
   <para>
    Los valores se retornan usando la instrucción opcional return. 
    Puede devolverse cualquier tipo de valor, incluyendo listas y objetos.
 
    <informalexample>
     <programlisting role="php">
function square ($num) {
    return $num * $num;
}
echo square (4);   // saca '16'.
     </programlisting>
    </informalexample>
   </para>
      
   <para>
    No puedes devolver múltiples valores desde una función, pero un
    efecto similar se puede conseguir devolviendo una lista.
 
    <informalexample>
     <programlisting role="php">
function small_numbers() {
    return array (0, 1, 2);
}
list ($zero, $one, $two) = small_numbers();
     </programlisting>
    </informalexample>
   </para>

  </sect1>
 
  <sect1 id="functions.old-syntax">
   <title><literal>old_function</literal></title>
 
   <simpara>
    La instrucción <literal>old_function</literal> permite declarar una función usando 
    una sintaxis idéntica a la de PHP/FI2 (excepto que debes reemplazar 'function'
    por 'old_function').
   </simpara>
   <simpara>
    Es una característica obsoleta, y debería ser usada únicamente por el 
    conversor PHP/FI2->PHP3.
   </simpara>
   <warning>
    <para>
     Las funciones declaradas como <literal>old_function</literal> no pueden llamarse
     desde el código interno de PHP. Entre otras cosas, esto significa que no puedes usarlas
     en funciones como <function>usort</function>, <function>array_walk</function>, y
     <function>register_shutdown_function</function>. Puedes solventar esta limitación
     escribiendo un "wrapper" (en PHP3 normal) que a su vez llame a la función declarada como
     <literal>old_function</literal>.
    </para>
   </warning>

  </sect1>

  <sect1 id="functions.variable-functions">
   <title>Funciones variable</title>

   <para>
    PHP soporta el concepto de funciones variable, esto significa que si una
    variable tiene unos paréntesis añadidos al final, PHP buscará una función
    con el mismo nombre que la evaluación de la variable, e intentará ejecutarla.
    Entre otras cosas, esto te permite implementar retrollamadas (callbacks), 
    tablas de funciones y demás.
   </para>

   <para>
    <example>
     <title>Ejemplo de función variable</title>
     <programlisting role="php">
&lt;?php
function foo() {
    echo "Dentro de foo()&lt;br>\n";
}

function bar( $arg = '' ) {
    echo "Dentro de bar(); el parámetro fue '$arg'.&lt;br>\n";
}

$func = 'foo';
$func();
$func = 'bar';
$func( 'test' );
?>
     </programlisting>
    </example>
   </para>

  </sect1>
 
 </chapter>
 
 <!-- Keep this comment at the end of the file
 Local variables:
 mode: sgml
 sgml-omittag:t
 sgml-shorttag:t
 sgml-minimize-attributes:nil
 sgml-always-quote-attributes:t
 sgml-indent-step:1
 sgml-indent-data:t
 sgml-parent-document:nil
 sgml-default-dtd-file:"../../manual.ced"
 sgml-exposed-tags:nil
 sgml-local-catalogs:nil
 sgml-local-ecat-files:nil
 End:
 -->
