<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 1.21 $ -->
<!-- EN-Revision: 1.65 Maintainer: lboshell Status: ready -->

 <appendix id="reserved">
  <title>Lista de Palabras Reservadas</title>
  <para>
   El siguiente es un listado de identificadores predefinidos en PHP.
   Ninguno de los identificadores listados aquí debe ser usado como
   identificador en alguno de sus scripts. Estas listas incluyen palabras
   clave y nombres de variable, constantes y clases predefinidas. Estas
   listas no son ni exhaustivas ni completas.
  </para>

  <sect1 id="reserved.keywords">
  <title>Lista de Palabras Clave</title>
   <simpara>
    Estas palabras tienen un significado especial en PHP. Algunas de ellas
    representan cosas que lucen como funciones, o algunas se ven como
    constantes, y así sucesivamente--pero no lo son, en realidad: son
    construcciones del lenguaje. Usted no puede usar ninguna de las
    siguientes palabras como constantes, nombres de clase, nombres de
    funciones o métodos. Usarlas como nombres de variables está bien,
    generalmente, pero puede conducir a confusiones.
   </simpara>

   <table>
    <title>Palabras Clave de PHP</title>
    <tgroup cols="5">
     <tbody>
      <row>
       <entry>
        <link linkend="language.operators.logical">and</link>
       </entry>
       <entry>
        <link linkend="language.operators.logical">or</link>
       </entry>
       <entry>
        <link linkend="language.operators.logical">xor</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__FILE__</link>
       </entry>
       <entry>
        <link linkend="reserved.classes.php5">exception</link> (PHP 5)
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.constants.predefined">__LINE__</link>
       </entry>
       <entry>
        <function>array</function>
       </entry>
       <entry>
        <link linkend="control-structures.foreach">as</link>
       </entry>
       <entry>
        <link linkend="control-structures.break">break</link>
       </entry>
       <entry>
        <link linkend="control-structures.switch">case</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="keyword.class">class</link>
       </entry>
       <entry>
        <link linkend="language.oop5.constants">const</link>
       </entry>
       <entry>
        <link linkend="control-structures.continue">continue</link>
       </entry>
       <entry>
        <link linkend="control-structures.declare">declare</link>
       </entry>
       <entry>
        <link linkend="control-structures.switch">default</link>
       </entry>
      </row>
      <row>
       <entry>
        <function>die</function>
       </entry>
       <entry>
        <link linkend="control-structures.do.while">do</link>
       </entry>
       <entry>
        <function>echo</function>
       </entry>
       <entry>
        <link linkend="control-structures.else">else</link>
       </entry>
       <entry>
        <link linkend="control-structures.elseif">elseif</link>
       </entry>
      </row>
      <row>
       <entry>
        <function>empty</function>
       </entry>
       <entry>
        <link linkend="control-structures.declare">enddeclare</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endfor</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endforeach</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endif</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.alternative-syntax">endswitch</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endwhile</link>
       </entry>
       <entry>
        <function>eval</function>
       </entry>
       <entry>
        <function>exit</function>
       </entry>
       <entry>
        <link linkend="keyword.class">extends</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.for">for</link>
       </entry>
       <entry>
        <link linkend="control-structures.foreach">foreach</link>
       </entry>
       <entry>
        <link linkend="functions.user-defined">function</link>
       </entry>
       <entry>
        <link linkend="language.variables.scope">global</link>
       </entry>
       <entry>
        <link linkend="control-structures.if">if</link>
       </entry>
      </row>
      <row>
       <entry>
        <function>include</function>
       </entry>
       <entry>
        <function>include_once</function>
       </entry>
       <entry>
        <function>isset</function>
       </entry>
       <entry>
        <function>list</function>
       </entry>
       <entry>
        <link linkend="keyword.class">new</link>
       </entry>
      </row>
      <row>
       <entry>
        <function>print</function>
       </entry>
       <entry>
        <function>require</function>
       </entry>
       <entry>
        <function>require_once</function>
       </entry>
       <entry>
        <function>return</function>
       </entry>
       <entry>
        <link linkend="language.variables.scope">static</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.switch">switch</link>
       </entry>
       <entry>
        <function>unset</function>
       </entry>
       <entry>
        use
       </entry>
       <entry>
        <link linkend="keyword.class">var</link>
       </entry>
       <entry>
        <link linkend="control-structures.while">while</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.constants.predefined">__FUNCTION__</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__CLASS__</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__METHOD__</link>
       </entry>
       <entry>
        <link linkend="language.oop5.final">final</link> (PHP 5)
       </entry>
       <entry>
        <link linkend="reserved.classes.php5">php_user_filter</link>
        (PHP 5)
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.oop5.interfaces">interface</link> (PHP
        5)
       </entry>
       <entry>
        <link linkend="language.oop5.interfaces">implements</link>
        (PHP 5)
       </entry>
       <entry>
        <link linkend="language.oop5.basic">extends</link>
       </entry>
       <entry>
        <link linkend="language.oop5.visibility">public</link> (PHP 5)
       </entry>
       <entry>
        <link linkend="language.oop5.visibility">private</link> (PHP
        5)
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.oop5.visibility">protected</link> (PHP
        5)
       </entry>
       <entry>
        <link linkend="language.oop5.abstract">abstract</link> (PHP 5)
       </entry>
       <entry>
        <link linkend="language.oop5.cloning">clone</link> (PHP 5)
       </entry>
       <entry>
        <link linkend="language.exceptions">try</link> (PHP 5)
       </entry>
       <entry>
        <link linkend="language.exceptions">catch</link> (PHP 5)
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.exceptions">throw</link> (PHP 5)
       </entry>
       <entry>
        <link linkend="migration.old-function">cfunction</link> (PHP 4
        únicamente)
       </entry>
       <entry>
        <link linkend="migration.old-function">old_function</link>
        (PHP 4 &uacute;nicamente)
       </entry>
       <entry>
        <link linkend="keyword.class">this</link> (PHP 5
        únicamente)
       </entry>
       <entry>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect1>

  <sect1 id="reserved.variables">
   <title>Variables Predefinidas</title>

   <para>
    A partir de PHP 4.1.0, el método preferido para recuperar <link
    linkend="language.variables.external">variables externas</link> es
    mediante las superglobales mencionadas más adelante. Antes de este
    punto, la gente recaía en <link
    linkend="ini.register-globals">register_globals</link> o las matrices
    largas predefinidas en PHP (<varname>$HTTP_*_VARS</varname>).
    &avail.register-long-arrays;
   </para>

   <sect2 id="reserved.variables.server">
    <title>Variables de servidor: <varname>$_SERVER</varname></title>
    <note>
     <simpara>
      Aparecieron en 4.1.0. En versiones anteriores, utilice
      <varname>$HTTP_SERVER_VARS</varname>.
     </simpara>
    </note>

    <simpara>
     <varname>$_SERVER</varname> es una matriz que contiene información tal
     como cabeceras, rutas y ubicaciones de scripts. Las entradas de esta
     matriz son creadas por el servidor web. No existen garantías de que
     cada servidor vaya a proveer alguno de estos valores; puede que los
     servidores omitan algunos, o provean otros que no se listan aquí. Hecha
     esta aclaración, un gran número de estas variables hacen parte de la
     <ulink url="&url.cgispec;">especificación CGI 1.1</ulink>, así que
     puede esperar que sean definidas por el servidor.
    </simpara>

    <simpara>
     Esta es una variable 'superglobal', o global automática. Esto
     simplemente quiere decir que está disponible en todos los contextos a
     lo largo de un script. No necesita hacer <command>global
     $_SERVER;</command> para acceder a ella dentro de funciones o métodos,
     como lo hace con <varname>$HTTP_SERVER_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_SERVER_VARS</varname> contiene la misma información
     inicial, pero no es una superglobal. (Note que
     <varname>$HTTP_SERVER_VARS</varname> y <varname>$_SERVER</varname> son
     variables diferentes y que PHP las trata como tal)
    </simpara>

    <simpara>
     Si la directiva <link
     linkend="ini.register-globals">register_globals</link> está definida,
     entonces estas variables también estarán disponibles en el contexto
     global del script; esto quiere decir, por separado de las matrices
     <varname>$_SERVER</varname> y <varname>$HTTP_SERVER_VARS</varname>.
     Para información relacionada, vea el capítulo de seguridad titulado
     <link linkend="security.globals">Uso de Registros Globales</link>.
     Estas variables globales individuales no son superglobales.
    </simpara>

    <simpara>
     Usted puede encontrar o no cualquiera de los siguientes elementos en
     $_SERVER. Note que algunos de éstos, si es que los hay, estarán
     disponibles (o tendrán algún significado después de todo) si se ejecuta
     PHP en la línea de comandos.
    </simpara>

    <para>
     <variablelist>
      <varlistentry>
       <term>'<varname>PHP_SELF</varname>'</term>
       <listitem>
        <simpara>
         El nombre de archivo del script ejecutándose actualmente, relativo
         a la raíz de documentos. Por ejemplo,
         <varname>$_SERVER['PHP_SELF']</varname> en un script en la
         dirección <filename>http://example.com/test.php/foo.bar</filename>
         sería <filename>/test.php/foo.bar</filename>. La constante <link
         linkend="language.constants.predefined">__FILE__</link> contiene la
         ruta completa y nombre del archivo actual (es decir, incluido).
        </simpara>
        <simpara>
         Si PHP está siendo ejecutado como un procesador de línea de
         comandos, esta variable contiene el nombre del script a partir de
         PHP 4.3.0. Anteriormente no estaba disponible.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>argv</varname>'</term>
       <listitem>
        <simpara>
         Matriz de argumentos pasados al script. Cuando el script es
         ejecutado en la línea de comandos, ésta entrega acesso al estilo C
         a los parámetros de la línea de comandos. Cuando es llamado
         mediante el método GET, ésta contendrá la cadena de consulta
         (query).
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>argc</varname>'</term>
       <listitem>
        <simpara>
         Contiene el número de parámetros de
         línea de comandos pasados al script (si se ejecuta en
         la línea de comandos).
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>GATEWAY_INTERFACE</varname>'</term>
       <listitem>
        <simpara>
         Qué revisión de la especificación CGI está usando el servidor; es
         decir '<literal>CGI/1.1</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_ADDR</varname>'</term>
       <listitem>
        <simpara>
         La dirección IP del servidor bajo la cual está siendo ejecutado el
         script actual.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_NAME</varname>'</term>
       <listitem>
        <simpara>
         El nombre del servidor anfitrión bajo el que está siendo ejecutado
         el script actual. Si el script está corriendo en un host virtual,
         éste será el valor definido para tal host virtual.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_SOFTWARE</varname>'</term>
       <listitem>
        <simpara>
         Cadena de identificación del servidor, dada en las cabeceras cuando
         se responde a peticiones.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_PROTOCOL</varname>'</term>
       <listitem>
        <simpara>
         Nombre y revisión del protocolo de información mediante el cual fue
         solicitada la página; es decir, '<literal>HTTP/1.0</literal>';
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REQUEST_METHOD</varname>'</term>
       <listitem>
        <simpara>
         Cuál método de petición fue usado para acceder a la página; es
         decir, '<literal>GET</literal>', '<literal>HEAD</literal>',
         '<literal>POST</literal>', '<literal>PUT</literal>'.
        </simpara>
        <note>
         <para>
          El script PHP es finalizado luego de enviar las cabeceras (es
          decir, después de producir cualquier salida sin uso de búferes de
          salida) si el método de petición fue <literal>HEAD</literal>.
         </para>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REQUEST_TIME</varname>'</term>
       <listitem>
        <simpara>
         La marca de tiempo del inicio de la petición. Disponible desde PHP
         5.1.0.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>QUERY_STRING</varname>'</term>
       <listitem>
        <simpara>
         La cadena de consulta, si existe, mediante la cual se accedió a la
         página.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>DOCUMENT_ROOT</varname>'</term>
       <listitem>
        <simpara>
         El directorio raíz de documentos bajo el que está siendo ejecutado
         el script actual, tal y como se define en el archivo de
         configuración del servidor.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT</varname>'</term>
       <listitem>
        <simpara>
         Contenidos de la cabecera <literal>Accept:</literal> de la petición
         actual, si existe.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_CHARSET</varname>'</term>
       <listitem>
        <simpara>
         Contenidos de la cabecera <literal>Accept-Charset:</literal> de la
         petición actual, si existe. Ejemplo:
         '<literal>iso-8859-1,*,utf-8</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_ENCODING</varname>'</term>
       <listitem>
        <simpara>
         Contenidos de la cabecera <literal>Accept-Encoding:</literal> de la
         petición actual, si existe. Ejemplo: '<literal>gzip</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_LANGUAGE</varname>'</term>
       <listitem>
        <simpara>
         Contenidos de la cabecera <literal>Accept-Language:</literal> de la
         petición actual, si existe. Ejemplo: '<literal>en</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_CONNECTION</varname>'</term>
       <listitem>
        <simpara>
         Contenidos de la cabecera <literal>Connection:</literal> de la
         petición actual, si existe. Ejemplo:
         '<literal>Keep-Alive</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_HOST</varname>'</term>
       <listitem>
        <simpara>
         Contenidos de la cabecera <literal>Host:</literal> de la petición
         actual, si existe.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_REFERER</varname>'</term>
       <listitem>
        <simpara>
         La dirección de la página (si la hay) la cual refirió al agente de
         usuario a la página actual. Este valor es definido por el agente de
         usuario. No todos los agentes de usuario lo definen, y algunos
         proveen la capacidad de modificar <varname>HTTP_REFERER</varname>
         como una característica del software. En resumen, no se puede
         confiar realmente en este valor.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_USER_AGENT</varname>'</term>
       <listitem>
        <simpara>
         Contenidos de la cabecera <literal>User-Agent:</literal> de la
         petición actual, si existe. Esta es una cadena que denota el agente
         de usuario que está accediendo a la página. Un ejemplo típico es:
         <computeroutput>Mozilla/4.5 [en] (X11; U; Linux 2.2.9
         i586)</computeroutput>. Entre otras cosas, puede usar este valor
         con <function>get_browser</function> para personalizar la salida de
         su página a las capacidades del agente de usuario.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTPS</varname>'</term>
       <listitem>
        <simpara>
         Definido con un valor no-vacío si el script fue solicitado a través
         del protocolo HTTPS.
        </simpara>
        <simpara>
         Note que cuando se usa ISAPI con IIS, el valor será
         <literal>off</literal> si la petición no fue hecha a través del
         protocolo HTTPS.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_ADDR</varname>'</term>
       <listitem>
        <simpara>
         La dirección IP desde donde el usuario está observado la página
         actual.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_HOST</varname>'</term>
       <listitem>
        <simpara>
         El nombre Host desde donde el usuario está viendo la página actual.
         La consulta dns de vuelta está basada en el valor
         <varname>REMOTE_ADDR</varname> del usuario.
        </simpara>
        <note>
         <simpara>
          Su servidor web debe estar configurado para crear esta variable.
          Por ejemplo, en Apache necesitará <literal>HostnameLookups
          On</literal> dentro de &httpd.conf; para que exista. Vea también
          <function>gethostbyaddr</function>.
         </simpara>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_PORT</varname>'</term>
       <listitem>
        <simpara>
         El puerto que está siendo usado en la máquina del usuario para
         comunicarse con el servidor web.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SCRIPT_FILENAME</varname>'</term>
       <listitem>
        <para>
         La ruta absoluta del nombre del script siendo ejecutado
         actualmente.
         <note>
          <para>
           Si un script es ejecutado en el entorno CLI usando una ruta
           relativa, tal como <filename>archivo.php</filename> o
           <filename>../archivo.php</filename>,
           <varname>$_SERVER['SCRIPT_FILENAME']</varname> contendrá la ruta
           relativa especificada por el usuario.
          </para>
         </note>
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_ADMIN</varname>'</term>
       <listitem>
        <simpara>
         El valor dado a la directiva SERVER_ADMIN (para Apache) en el
         archivo de configuración del servidor web. Si el script está siendo
         ejecutado en un host virtual, éste será el valor definido para ese
         host virtual.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_PORT</varname>'</term>
       <listitem>
        <simpara>
         El puerto en el equipo servidor que está siendo usado por el
         servidor web para comunicación. En configuraciones predeterminadas,
         ese valor será '<literal>80</literal>'; usando SSL, por ejemplo,
         este valor cambiará a cualquiera que sea el puerto que esté
         definido para HTTP seguro.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_SIGNATURE</varname>'</term>
       <listitem>
        <simpara>
         Cadena que contiene la versión del servidor y el nombre de host
         virtual que es agregado a las páginas generadas por el servidor, si
         está habilitada esta funcionalidad.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PATH_TRANSLATED</varname>'</term>
       <listitem>
        <simpara>
         Ruta sobre el sistema de archivos (no la raíz de documentos) al
         script actual, luego de que el servidor haya realizado cualquier
         asignación al vuelo virtual-a-real.
        </simpara>
        <note>
         <simpara>
          A partir de PHP 4.3.2, <envar>PATH_TRANSLATED</envar> ya no se
          define implícitamente bajo la <acronym>SAPI</acronym> de Apache 2,
          a diferencia de lo que ocurre en Apache 1, en donde se define con
          el mismo valor de la variable de servidor
          <envar>SCRIPT_FILENAME</envar> cuando Apache no se encarga de
          definirlo. Este cambio fue realizado para cumplir con la
          especificación <acronym>CGI</acronym> de que
          <envar>PATH_TRANSLATED</envar> debe existir únicamente si
          <envar>PATH_INFO</envar> se define.
         </simpara>
         <simpara>
          Los usuarios de Apache 2 pueden usar <literal>AcceptPathInfo
          = On</literal> al interior de
          <filename>httpd.conf</filename> para definir
          <envar>PATH_INFO</envar>.
         </simpara>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SCRIPT_NAME</varname>'</term>
       <listitem>
        <simpara>
         Contiene la ruta del script actual. Ésta es útil para páginas que
         necesitan apuntar a ellas mismas. La constante <link
         linkend="language.constants.predefined">__FILE__</link> contiene la
         ruta completa y nombre del archivo actual (es decir, incluido).
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REQUEST_URI</varname>'</term>
       <listitem>
        <simpara>
         El URI que fue dado para acceder a esta página; por ejemplo,
         '<literal>/index.html</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PHP_AUTH_DIGEST</varname>'</term>
       <listitem>
        <simpara>
         Cuando se está corriendo bajo Apache como módulo, realizando
         autenticación HTTP Digest, esta variable recibe el valor de la
         cabecera 'Authorization' enviada por el cliente (la cual debería
         ser usada para efectuar la validación apropiada).
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PHP_AUTH_USER</varname>'</term>
       <listitem>
        <simpara>
         Cuando se corre sobre Apache o IIS (ISAPI en PHP 5) como módulo
         realizando autenticación HTTP, esta variable es definida con el
         nombre de usuario definido por el cliente.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PHP_AUTH_PW</varname>'</term>
       <listitem>
        <simpara>
         Cuando se corre sobre Apache o IIS (ISAPI en PHP 5) como módulo
         realizando autenticación HTTP, esta variable es definida con la
         contraseña entregada por el usuario.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>AUTH_TYPE</varname>'</term>
       <listitem>
        <simpara>
         Cuando se corre sobre Apache como módulo realizando autenticación
         HTTP, esta variable es definida con el tipo de autenticación.
        </simpara>
       </listitem>
      </varlistentry>

     </variablelist>
    </para>

   </sect2>

   <sect2 id="reserved.variables.environment">
    <title>Variables de entorno: <varname>$_ENV</varname></title>

    <note>
     <simpara>
      Introducidas en 4.1.0. En versiones anteriores,
      use <varname>$HTTP_ENV_VARS</varname>.
     </simpara>
    </note>

    <simpara>
     Estas variables son importadas en el espacio de nombres global de PHP
     desde el entorno bajo el que está siendo ejecutado el intérprete PHP.
     Muchas son entregadas por el intérprete de comandos bajo el que PHP
     está corriendo y diferentes sistemas suelen tener diferentes tipos de
     intérpretes de comandos, una lista definitiva es imposible. Por favor
     consulte la documentación de su intérprete de comandos por una lista de
     varibles de entorno que resultan definidas.
    </simpara>

    <simpara>
     Otras variables de entorno incluyen las variables CGI, colocadas allí
     independientemente de que PHP esté siendo ejecutado como módulo del
     servidor o procesador CGI.
    </simpara>

    <simpara>
     Esta es una variable 'superglobal', o global automática. Esto
     simplemente quiere decir que está disponible en todos los contextos a
     lo largo del script. No necesita hacer <command>global $_ENV;</command>
     para acceder a ella desde funciones o métodos, tal y como lo hace con
     <varname>$HTTP_ENV_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_ENV_VARS</varname> contiene la misma información
     inicial, pero no es una superglobal. (Note que
     <varname>$HTTP_ENV_VARS</varname> y <varname>$_ENV</varname> son
     variables diferentes y que PHP las trata como tal)
    </simpara>

    <simpara>
     Si la directiva <link
     linkend="ini.register-globals">register_globals</link> está definida,
     entonces estas variables también se harán disponibles en el entorno
     global del script; i.e., por separado de las matrices
     <varname>$_ENV</varname> y <varname>$HTTP_ENV_VARS</varname>. Para
     información relacionada, consulte el capítulo de seguridad titulado
     <link linkend="security.globals">Uso de Registros Globales</link>.
     Estas globales individuales no son superglobales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.cookies">
    <title>Cookies HTTP: <varname>$_COOKIE</varname></title>

    <note>
     <simpara>
      Introducidas en 4.1.0. En versiones anteriores, use
      <varname>$HTTP_COOKIE_VARS</varname>.
     </simpara>
    </note>

    <simpara>
     Una matriz asociativa de variables pasadas al script actual a través de
     cookies HTTP. Global automáticamente en cualquier contexto.
    </simpara>

    <simpara>
     Esta es una variable 'superglobal', o global automática. Esto
     simplemente quiere decir que está disponible en todos los contextos a
     lo largo de un script. No necesita hacer <command>global
     $_COOKIE;</command> para acceder a ella dentro de funciones o métodos,
     como lo hace con <varname>$HTTP_COOKIE_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_COOKIE_VARS</varname> contiene la misma información
     inicial, pero no es una superglobal. (Note que
     <varname>$HTTP_COOKIE_VARS</varname> y <varname>$_COOKIE</varname> son
     variables diferentes y que PHP las trata como tal)
    </simpara>

    <simpara>
     Si la directiva <link
     linkend="ini.register-globals">register_globals</link> está definida,
     entonces estas variables también estarán disponibles en el contexto
     global del script; i.e., por separado de las matrices
     <varname>$_COOKIE</varname> y <varname>$HTTP_COOKIE_VARS</varname>.
     Para información relacionada, consulte el capítulo de seguridad
     titulado <link linkend="security.globals">Uso de Registros
     Globales</link>. Estas globales individuales no son superglobales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.get">
    <title>Variables HTTP GET: <varname>$_GET</varname></title>

    <note>
     <simpara>
      Introducidas en 4.1.0. En versiones anteriores, use
      <varname>$HTTP_GET_VARS</varname>.
     </simpara>
    </note>

    <simpara>
     Una matriz asociativa de variables pasadas al script actual a través
     del método HTTP GET. Global automáticamente en cualquier contexto.
    </simpara>

    <simpara>
     Esta es una variable 'superglobal', o global automática. Esto
     simplemente quiere decir que está disponible en todos los contextos a
     lo largo de un script. No necesita hacer <command>global
     $_GET;</command> para acceder a ella dentro de funciones o métodos,
     como lo hace con <varname>$HTTP_GET_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_GET_VARS</varname> contiene la misma información
     inicial, pero no es una superglobal. (Note que
     <varname>$HTTP_GET_VARS</varname> y <varname>$_GET</varname> son
     variables diferentes y que PHP las trata como tal)
    </simpara>

    <simpara>
     Si la directiva <link
     linkend="ini.register-globals">register_globals</link> está definida,
     entonces estas variables también estarán disponibles en el contexto
     global del script; i.e., por separado de las matrices
     <varname>$_GET</varname> y <varname>$HTTP_GET_VARS</varname>. Para
     información relacionada, consulte el capítulo de seguridad titulado
     <link linkend="security.globals">Uso de Registros Globales</link>.
     Estas globales individuales no son superglobales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.post">
    <title>Variables HTTP POST: <varname>$_POST</varname></title>

    <note>
     <simpara>
      Introducidas en 4.1.0. En versiones anteriores, use
      <varname>$HTTP_POST_VARS</varname>.
     </simpara>
    </note>

    <simpara>
     Una matriz asociativa de variables pasadas al script actual a través
     del método HTTP POST. Global automáticamente en cualquier contexto.
    </simpara>

    <simpara>
     Esta es una variable 'superglobal', o global automática. Esto
     simplemente quiere decir que está disponible en todos los contextos a
     lo largo de un script. No necesita hacer <command>global
     $_POST;</command> para acceder a ella dentro de funciones o métodos,
     como lo hace con <varname>$HTTP_POST_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_POST_VARS</varname> contiene la misma información
     inicial, pero no es una superglobal. (Note que
     <varname>$HTTP_POST_VARS</varname> y <varname>$_POST</varname> son
     variables diferentes y que PHP las trata como tal)
    </simpara>

    <simpara>
     Si la directiva <link
     linkend="ini.register-globals">register_globals</link> está definida,
     entonces estas variables también estarán disponibles en el contexto
     global del script; i.e., por separado de las matrices
     <varname>$_POST</varname> y <varname>$HTTP_POST_VARS</varname>. Para
     información relacionada, consulte el capítulo de seguridad titulado
     <link linkend="security.globals">Uso de Registros Globales</link>.
     Estas globales individuales no son superglobales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.files">
    <title>Variables de carga de archivos
    HTTP: <varname>$_FILES</varname></title>

    <note>
     <simpara>
      Introducidas en 4.1.0. En versiones anteriores, use
      <varname>$HTTP_POST_FILES</varname>.
     </simpara>
    </note>

    <simpara>
     Una matriz asociativa de elementos cargados al script actual a través
     del método HTTP POST. Global automáticamente en cualquier contexto.
    </simpara>

    <simpara>
     Esta es una variable 'superglobal', o global automática. Esto
     simplemente quiere decir que está disponible en todos los contextos a
     lo largo de un script. No necesita hacer <command>global
     $_FILES;</command> para acceder a ella dentro de funciones o métodos,
     como lo hace con <varname>$HTTP_POST_FILES</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_POST_FILES</varname> contiene la misma información
     inicial, pero no es una superglobal. (Note que
     <varname>$HTTP_POST_FILES</varname> y <varname>$_FILES</varname> son
     variables diferentes y que PHP las trata como tal)
    </simpara>

    <simpara>
     Si la directiva <link
     linkend="ini.register-globals">register_globals</link> está definida,
     entonces estas variables también estarán disponibles en el contexto
     global del script; i.e., por separado de las matrices
     <varname>$_FILES</varname> y <varname>$HTTP_POST_FILES</varname>. Para
     información relacionada, consulte el capítulo de seguridad titulado
     <link linkend="security.globals">Uso de Registros Globales</link>.
     Estas globales individuales no son superglobales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.request">
    <title>Variables de petición: <varname>$_REQUEST</varname></title>

    <note>
     <simpara>
      Introducidas en 4.1.0. No existe una matriz equivalente en
      versiones anteriores.
     </simpara>
    </note>
    <note>
     <simpara>
      Antes de PHP 4.3.0, la información de <varname>$_FILES</varname>
      también era incluida en <varname>$_REQUEST</varname>.
     </simpara>
    </note>

    <simpara>
     Una matriz asociativa que consiste en los contenidos
     de <varname>$_GET</varname>, <varname>$_POST</varname>,
     y <varname>$_COOKIE</varname>.
    </simpara>

    <simpara>
     Esta es una variable 'superglobal', o global automática. Esto
     simplemente quiere decir que está disponible en todos los contextos a
     lo largo de un script. No necesita hacer <command>global
     $_REQUEST;</command> para acceder a ella dentro de funciones o métodos.
    </simpara>

    <simpara>
     Si la directiva <link
     linkend="ini.register-globals">register_globals</link> está definida,
     entonces estas variables también estarán disponibles en el contexto
     global del script; i.e., por separado de la matriz
     <varname>$_REQUEST</varname>. Para información relacionada, consulte el
     capítulo de seguridad titulado <link linkend="security.globals">Uso de
     Registros Globales</link>. Estas globales individuales no son
     superglobales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.session">
    <title>Variables de sesión: <varname>$_SESSION</varname></title>

    <note>
     <simpara>
      Introducidas en 4.1.0. En versiones anteriores, use
      <varname>$HTTP_SESSION_VARS</varname>.
     </simpara>
    </note>

    <simpara>
     Una matriz asociativa que contiene las variables de sesión disponibles
     en el script actual. Consulte la documentación sobre <link
     linkend="ref.session">Funciones de Sesión</link> para más información
     sobre cómo es usada esta matriz.
    </simpara>

    <simpara>
     Esta es una variable 'superglobal', o global automática. Esto
     simplemente quiere decir que está disponible en todos los contextos a
     lo largo de un script. No necesita hacer <command>global
     $_SESSION;</command> para acceder a ella dentro de funciones o métodos,
     como lo hace con <varname>$HTTP_SESSION_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_SESSION_VARS</varname> contiene la misma información,
     pero no es una superglobal. (Note que
     <varname>$HTTP_SESSION_VARS</varname> y <varname>$_SESSION</varname>
     son variable diferentes y que PHP las trata como tal)
    </simpara>

    <simpara>
     Si la directiva <link
     linkend="ini.register-globals">register_globals</link> está definida,
     entonces estas variables también estarán disponibles en el contexto
     global del script; i.e., por separado de las matrices
     <varname>$_SESSION</varname> y <varname>$HTTP_SESSION_VARS</varname>.
     Para información relacionada, consulte el capítulo de seguridad
     titulado <link linkend="security.globals">Uso de Registros
     Globales</link>. Estas globales individuales no son superglobales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.globals">
    <title>Variables globales: <varname>$GLOBALS</varname></title>

    <note>
     <simpara>
      <varname>$GLOBALS</varname> ha estado disponible desde PHP
      3.0.0.
     </simpara>
    </note>

    <simpara>
     Una matriz asociativa que contiene referencias a todas las variables
     que están definidas actualmente en el contexto global del script. Los
     nombres de las variables son las claves de la matriz.
    </simpara>

    <simpara>
     Esta es una variable 'superglobal', o global automática. Esto
     simplemente quiere decir que está disponible en todos los contextos a
     lo largo de un script. No necesita hacer <command>global
     $_GLOBALS;</command> para acceder a ella dentro de funciones o métodos.
    </simpara>

   </sect2>

   <sect2 id="reserved.variables.phperrormsg">
    <title>El mensaje de error previo:
    <varname>$php_errormsg</varname></title>
    <simpara>
     <varname>$php_errormsg</varname> es una variable que contiene el texto
     del último mensaje de error generado por PHP. Esta variable solo estará
     disponibles dentro del contexto en el que el error ocurrió, y solo si
     la opción de configuración <link
     linkend="ini.track-errors">track_errors</link> está habilitada (por
     omisión está definida como off).
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.httprawpostdata">
    <title>Datos POST puros: <varname>$HTTP_RAW_POST_DATA</varname></title>
    <para>
     <varname>$HTTP_RAW_POST_DATA</varname> contiene los datos POST
     inalterados. Vea <link
     linkend="ini.always-populate-raw-post-data">always_populate_raw_post_data</link>
    </para>
   </sect2>

   <sect2 id="reserved.variables.httpresponseheader">
    <title>Cabeceras de respuesta HTTP:
    <varname>$http_response_header</varname></title>
    <para>
     La matriz <varname>$http_response_header</varname> es similar a la
     función <function>get_headers</function>. Cuando se usa la <link
     linkend="wrappers.http">envoltura HTTP</link>
     <varname>$http_response_header</varname> será populada con las
     cabeceras de respuesta HTTP.
    </para>
   </sect2>

  </sect1>
  <sect1 id="reserved.classes">
   <title>Clases Predefinidas</title>
   <para>
    Esta sección lista clases predefinidas estándar. Extensiones
    particulares definen otras clases que son descritas en sus referencias.
   </para>

   <sect2 id="reserved.classes.standard">
    <title>Clases Estándar Predefinidas</title>

    <simpara>
     Estas clases están definidas en el juego de funciones estándar
     incluidas en la distribuición de PHP.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>Directory</classname></term>
      <listitem>
       <simpara>
        La clase a partir de la cual <link
        linkend="class.dir">dir</link> es instanciada.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>stdClass</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>__PHP_Incomplete_Class</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.php5">
    <title>Clases predefinidas en PHP 5</title>

    <simpara>
     Estas clases predefinidas adicionales fueron introducidas en
     PHP 5.0.0
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>exception</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>php_user_filter</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

  </sect1>

  &appendices.reserved.constants;

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
