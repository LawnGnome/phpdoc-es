<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.12 $ -->
<!-- EN-Revision: 1.55 Maintainer: lboshell Status: ready -->

 <appendix id="reserved">
  <title>Lista de Palabras Reservadas</title>
  <para>
   El siguiente es un listado de identificadores predefinidos en
   PHP. Ninguno de los identificadores listados aqu&iacute; debe ser
   usado como identificador en alguno de sus scripts. Estas listas
   incluyen palabras clave y nombres de variable, constantes y clases
   predefinidas. Estas listas no son ni exhaustivas ni completas.
  </para>

  <sect1 id="reserved.keywords">
  <title>Lista de Palabras Clave</title>
   <simpara>
    Estas palabras tienen un significado especial en PHP. Algunas de
    ellas representan cosas que lucen como funciones, o algunas se ven
    como constantes, y as&iacute; sucesivamente--pero no lo son, en
    realidad: son construcciones del lenguaje. Usted no puede usar
    ninguna de las siguientes palabras como constantes, nombres de
    clase, nombres de funciones o m&eacute;todos. Usarlas como nombres
    de variables est&aacute; bien, generalmente, pero puede conducir a
    confusiones.
   </simpara>

   <table>
    <title>Palabras Clave de PHP</title>
    <tgroup cols="5">
     <tbody>
      <row>
       <entry>
        <link linkend="language.operators.logical">and</link>
       </entry>
       <entry>
        <link linkend="language.operators.logical">or</link>
       </entry>
       <entry>
        <link linkend="language.operators.logical">xor</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__FILE__</link>
       </entry>
       <entry>
        <link linkend="reserved.classes.php5">exception</link> (PHP 5)
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.constants.predefined">__LINE__</link>
       </entry>
       <entry>
        <function>array</function>
       </entry>
       <entry>
        <link linkend="control-structures.foreach">as</link>
       </entry>
       <entry>
        <link linkend="control-structures.break">break</link>
       </entry>
       <entry>
        <link linkend="control-structures.switch">case</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="keyword.class">class</link>
       </entry>
       <entry>
        <link linkend="language.oop5.constants">const</link>
       </entry>
       <entry>
        <link linkend="control-structures.continue">continue</link>
       </entry>
       <entry>
        <link linkend="control-structures.declare">declare</link>
       </entry>
       <entry>
        <link linkend="control-structures.switch">default</link>
       </entry>
      </row>
      <row>
       <entry>
        <function>die</function>
       </entry>
       <entry>
        <link linkend="control-structures.do.while">do</link>
       </entry>
       <entry>
        <function>echo</function>
       </entry>
       <entry>
        <link linkend="control-structures.else">else</link>
       </entry>
       <entry>
        <link linkend="control-structures.elseif">elseif</link>
       </entry>
      </row>
      <row>
       <entry>
        <function>empty</function>
       </entry>
       <entry>
        <link linkend="control-structures.declare">enddeclare</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endfor</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endforeach</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endif</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.alternative-syntax">endswitch</link>
       </entry>
       <entry>
        <link linkend="control-structures.alternative-syntax">endwhile</link>
       </entry>
       <entry>
        <function>eval</function>
       </entry>
       <entry>
        <function>exit</function>
       </entry>
       <entry>
        <link linkend="keyword.class">extends</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.for">for</link>
       </entry>
       <entry>
        <link linkend="control-structures.foreach">foreach</link>
       </entry>
       <entry>
        <link linkend="functions.user-defined">function</link>
       </entry>
       <entry>
        <link linkend="language.variables.scope">global</link>
       </entry>
       <entry>
        <link linkend="control-structures.if">if</link>
       </entry>
      </row>
      <row>
       <entry>
        <function>include</function>
       </entry>
       <entry>
        <function>include_once</function>
       </entry>
       <entry>
        <function>isset</function>
       </entry>
       <entry>
        <function>list</function>
       </entry>
       <entry>
        <link linkend="keyword.class">new</link>
       </entry>
      </row>
      <row>
       <entry>
        <function>print</function>
       </entry>
       <entry>
        <function>require</function>
       </entry>
       <entry>
        <function>require_once</function>
       </entry>
       <entry>
        <function>return</function>
       </entry>
       <entry>
        <link linkend="language.variables.scope">static</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="control-structures.switch">switch</link>
       </entry>
       <entry>
        <function>unset</function>
       </entry>
       <entry>
        use
       </entry>
       <entry>
        <link linkend="keyword.class">var</link>
       </entry>
       <entry>
        <link linkend="control-structures.while">while</link>
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.constants.predefined">__FUNCTION__</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__CLASS__</link>
       </entry>
       <entry>
        <link linkend="language.constants.predefined">__METHOD__</link>
       </entry>
       <entry>
        <link linkend="language.oop5.final">final</link> (PHP 5)
       </entry>
       <entry>
        <link linkend="reserved.classes.php5">php_user_filter</link>
        (PHP 5)
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.oop5.interfaces">interface</link> (PHP
        5)
       </entry>
       <entry>
        <link linkend="language.oop5.interfaces">implements</link>
        (PHP 5)
       </entry>
       <entry>
        <link linkend="language.oop5.basic">extends</link>
       </entry>
       <entry>
        <link linkend="language.oop5.visibility">public</link> (PHP 5)
       </entry>
       <entry>
        <link linkend="language.oop5.visibility">private</link> (PHP
        5)
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.oop5.visibility">protected</link> (PHP
        5)
       </entry>
       <entry>
        <link linkend="language.oop5.abstract">abstract</link> (PHP 5)
       </entry>
       <entry>
        <link linkend="language.oop5.cloning">clone</link> (PHP 5)
       </entry>
       <entry>
        <link linkend="language.exceptions">try</link> (PHP 5)
       </entry>
       <entry>
        <link linkend="language.exceptions">catch</link> (PHP 5)
       </entry>
      </row>
      <row>
       <entry>
        <link linkend="language.exceptions">throw</link> (PHP 5)
       </entry>
       <entry>
        <link linkend="migration.old-function">cfunction</link> (PHP 4
        &uacute;nicamente)
       </entry>
       <entry>
        <link linkend="migration.old-function">old_function</link>
        (PHP 4 &uacute;nicamente)
       </entry>
       <entry>
       </entry>
       <entry>
       </entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </sect1>

  <sect1 id="reserved.variables">
   <title>Variables Predefinidas</title>
   
   <para>
    A partir de PHP 4.1.0, el m&eacute;todo preferido para
    recuperar <link linkend="language.variables.external">variables
    externas</link> es mediante las superglobales mencionadas
    m&aacute;s adelante. Antes de este punto, la gente reca&iacute;a
    en <link linkend="ini.register-globals">register_globals</link> o
    las matrices largas predefinidas en PHP
    (<varname>$HTTP_*_VARS</varname>).  &avail.register-long-arrays;
   </para>

   <sect2 id="reserved.variables.server">
    <title>Variables de servidor: <varname>$_SERVER</varname></title>
    <note>
     <simpara>
      Aparecieron en 4.1.0. En versiones anteriores, utilice
      <varname>$HTTP_SERVER_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     <varname>$_SERVER</varname> es una matriz que contiene
     informaci&oacute;n tal como cabeceras, rutas y ubicaciones de
     scripts. Las entradas de esta matriz son creadas por el servidor
     web. No existen garant&iacute;as de que cada servidor vaya a
     proveer alguno de estos valores; puede que los servidores omitan
     algunos, o provean otros que no se listan aqu&iacute;. Hecha esta
     aclaraci&oacute;n, un gran n&uacute;mero de estas variables hacen
     parte de la <ulink url="&url.cgispec;">especificaci&oacute;n CGI
     1.1</ulink>, as&iacute; que puede esperar que sean definidas por
     el servidor.
    </simpara>

    <simpara>
     Esta es una variable 'superglobal', o global
     autom&aacute;tica. Esto simplemente quiere decir que est&aacute;
     disponible en todos los contextos a lo largo de un script. No
     necesita hacer <command>global $_SERVER;</command> para acceder a
     ella dentro de funciones o m&eacute;todos, como lo hace
     con <varname>$HTTP_SERVER_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_SERVER_VARS</varname> contiene la misma
     informaci&oacute;n inicial, pero no es autoglobal. (Note
     que <varname>$HTTP_SERVER_VARS</varname>
     y <varname>$_SERVER</varname> son variables diferentes y que PHP
     las trata como tal)
    </simpara>

    <simpara>
     Si la directiva <link
     linkend="ini.register-globals">register_globals</link>
     est&aacute; definida, entonces estas variables tambi&eacute;n
     estar&aacute;n disponibles en el contexto global del script; esto
     quiere decir, por separado de las
     matrices <varname>$_SERVER</varname>
     y <varname>$HTTP_SERVER_VARS</varname>. Para informaci&oacute;n
     relacionada, vea el cap&iacute;tulo de seguridad titulado <link
     linkend="security.globals">Uso de Registros
     Globales</link>. Estas variables globales individuales no son
     autoglobales.
    </simpara>

    <simpara>
     Usted puede encontrar o no cualquiera de los siguientes elementos
     en $_SERVER. Note que algunos de &eacute;stos, si es que los hay,
     estar&aacute;n disponibles (o tendr&aacute;n alg&uacute;n
     significado despu&eacute;s de todo) si se ejecuta PHP en la
     l&iacute;nea de comandos.
    </simpara>

    <para>
     <variablelist>
      <varlistentry>
       <term>'<varname>PHP_SELF</varname>'</term>
       <listitem>
        <simpara>
         El nombre de archivo del script ejecut&aacute;ndose
         actualmente, relativo a la ra&iacute;z de documentos. Por
         ejemplo, <varname>$_SERVER['PHP_SELF']</varname> en un script
         en la direcci&oacute;n
         <filename>http://example.com/test.php/foo.bar</filename>
         ser&iacute;a <filename>/test.php/foo.bar</filename>. La
         constante <link
         linkend="language.constants.predefined">__FILE__</link>
         contiene la ruta completa y nombre del archivo actual (es
         decir, incluido).
        </simpara>
        <simpara>
         Si PHP est&aacute; siendo ejecutado como un procesador de
         l&iacute;nea de comandos, esta variable contiene el nombre
         del script a partir de PHP 4.3.0. Anteriormente no estaba
         disponible.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>argv</varname>'</term>
       <listitem>
        <simpara>
         Matriz de argumentos pasados al script. Cuando el script es
         ejecutado en la l&iacute;nea de comandes, &eacute;sta entrega
         acesso al estilo C a los par&aacute;metros de la l&iacute;nea
         de comandos. Cuando es llamado mediante el m&eacute;todo GET,
         &eacute;sta contendr&aacute; la cadena de consulta (query).
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>argc</varname>'</term>
       <listitem>
        <simpara>
         Contiene el n&uacute;mero de par&aacute;metros de
         l&iacute;nea de comandos pasados al script (si se ejecuta en
         la l&iacute;nea de comandos).
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>GATEWAY_INTERFACE</varname>'</term>
       <listitem>
        <simpara>
         Qu&eacute; revisi&oacute;n de la especificaci&oacute;n CGI
         est&aacute; usando el servidor;
         i.e. '<literal>CGI/1.1</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_NAME</varname>'</term>
       <listitem>
        <simpara>
         El nombre del servidor anfitri&oacute;n bajo el que
         est&aacute; siendo ejecutado el script actual. Si el script
         est&aacute; corriendo en un host virtual, &eacute;ste
         ser&aacute; el valor definido para tal host virtual.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_SOFTWARE</varname>'</term>
       <listitem>
        <simpara>
         Cadena de identificaci&oacute;n del servidor, dada en las
         cabeceras cuando se responde a peticiones.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_PROTOCOL</varname>'</term>
       <listitem>
        <simpara>
         Nombre y revisi&oacute;n del protocolo de informaci&oacute;n
         mediante el cual fue solicitada la p&aacute;gina;
         es decir, '<literal>HTTP/1.0</literal>';
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REQUEST_METHOD</varname>'</term>
       <listitem>
        <simpara>
         Cu&aacute;l m&eacute;todo de petici&oacute;n fue usado para
         acceder a la p&aacute;gina; es decir, '<literal>GET</literal>',
         '<literal>HEAD</literal>', '<literal>POST</literal>',
         '<literal>PUT</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REQUEST_TIME</varname>'</term>
       <listitem>
        <simpara>
         La marca de tiempo del inicio de la
         petici&oacute;n. Disponible desde PHP 5.1.0.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>QUERY_STRING</varname>'</term>
       <listitem>
        <simpara>
         La cadena de consulta, si existe, mediante la cual se
         accedi&oacute; a la p&aacute;gina.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>DOCUMENT_ROOT</varname>'</term>
       <listitem>
        <simpara>
         El directorio ra&iacute;z de documentos bajo el que
         est&aacute; siendo ejecutado el script actual, tal y como se
         define en el archivo de configuraci&oacute;n del servidor.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT</varname>'</term>
       <listitem>
        <simpara>
         Contenidos de la cabecera <literal>Accept:</literal> de la
         petici&oacute;n actual, si existe.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_CHARSET</varname>'</term>
       <listitem>
        <simpara>
         Contenidos de la cabecera <literal>Accept-Charset:</literal>
         de la petici&oacute;n actual, si existe. Ejemplo:
         '<literal>iso-8859-1,*,utf-8</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_ENCODING</varname>'</term>
       <listitem>
        <simpara>
         Contenidos de la cabecera <literal>Accept-Encoding:</literal>
         de la petici&oacute;n actual, si existe. Ejemplo:
         '<literal>gzip</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_ACCEPT_LANGUAGE</varname>'</term>
       <listitem>
        <simpara>
         Contenidos de la cabecera <literal>Accept-Language:</literal>
         de la petici&oacute;n actual, si existe. Ejemplo:
         '<literal>en</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_CONNECTION</varname>'</term>
       <listitem>
        <simpara>
         Contenidos de la cabecera <literal>Connection:</literal> de
         la petici&oacute;n actual, si existe. Ejemplo:
         '<literal>Keep-Alive</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_HOST</varname>'</term>
       <listitem>
        <simpara>
         Contenidos de la cabecera <literal>Host:</literal> de la
         petici&oacute;n actual, si existe.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_REFERER</varname>'</term>
       <listitem>
        <simpara>
         La direcci&oacute;n de la p&aacute;gina (si la hay) la cual
         refiri&oacute; al agente de usuario a la p&aacute;gina
         actual. Este valor es definido por el agente de usuario. No
         todos los agentes de usuario lo definen, y algunos proveen la
         capacidad de modificar <varname>HTTP_REFERER</varname> como
         una caracter&iacute;stica del software. En resumen, no se
         puede confiar realmente en este valor.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>HTTP_USER_AGENT</varname>'</term>
       <listitem>
        <simpara>
         Contenidos de la cabecera <literal>User-Agent:</literal> de
         la petici&oacute;n actual, si existe. Esta es una cadena que
         denota el agente de usuario que est&aacute; accediendo a la
         p&aacute;gina. Un ejemplo t&iacute;pico es:
         <computeroutput>Mozilla/4.5 [en] (X11; U; Linux 2.2.9
         i586)</computeroutput>. Entre otras cosas, puede usar este
         valor con <function>get_browser</function> para personalizar
         la salida de su p&aacute;gina a las capacidades del agente de
         usuario.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_ADDR</varname>'</term>
       <listitem>
        <simpara>
         La direcci&oacute;n IP desde donde el usuario est&aacute;
         observado la p&aacute;gina actual.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_HOST</varname>'</term>
       <listitem>
        <simpara>
         El nombre Host desde donde el usuario est&aacute; viendo la
         p&aacute;gina actual. La consulta dns de vuelta est&aacute;
         basada en el valor <varname>REMOTE_ADDR</varname> del
         usuario.
        </simpara>
        <note>
         <simpara>
          Su servidor web debe estar configurado para crear esta
          variable. Por ejemplo, en Apache
          necesitar&aacute; <literal>HostnameLookups On</literal>
          dentro de &httpd.conf; para que exista. Vea tambi&eacute;n
          <function>gethostbyaddr</function>.
         </simpara>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REMOTE_PORT</varname>'</term>
       <listitem>
        <simpara>
         Es puerto que est&aacute; siendo usado en la m&aacute;quina
         del usuario para comunicarse con el servidor web.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SCRIPT_FILENAME</varname>'</term>
       <listitem>
        <para>
         La ruta absoluta del nombre del script siendo ejecutado
         actualmente.
         <note>
          <para>
           Si un script es ejecutado en el entorno CLI usando una ruta
           relativa, tal como <filename>archivo.php</filename>
           o <filename>../archivo.php</filename>,
           <varname>$_SERVER['SCRIPT_FILENAME']</varname>
           contendr&aacute; la ruta relativa especificada por el
           usuario.
          </para>
         </note>
        </para>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_ADMIN</varname>'</term>
       <listitem>
        <simpara>
         El valor dado a la directiva SERVER_ADMIN (para Apache) en el
         archivo de configuraci&oacute;n del servidor web. Si el
         script est&aacute; siendo ejecutado en un host virtual,
         &eacute;ste ser&aacute; el valor definido para ese host
         virtual.
        </simpara>
       </listitem>
      </varlistentry>
      
      <varlistentry>
       <term>'<varname>SERVER_PORT</varname>'</term>
       <listitem>
        <simpara>
         El puerto en el equipo servidor que est&aacute; siendo usado
         por el servidor web para comunicaci&oacute;n. En
         configuraciones predeterminadas, ese valor ser&aacute;
         '<literal>80</literal>'; usando SSL, por ejemplo, este valor
         cambiar&aacute; a cualquiera que sea el puerto que
         est&eacute; definido para HTTP seguro.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SERVER_SIGNATURE</varname>'</term>
       <listitem>
        <simpara>
         Cadena que contiene la versi&oacute;n del servidor y el
         nombre de host virtual que es agregado a las p&aacute;ginas
         generadas por el servidor, si est&aacute; habilitada esta
         funcionalidad.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PATH_TRANSLATED</varname>'</term>
       <listitem>
        <simpara>
         Ruta sobre el sistema de archivos (no la ra&iacute;z de
         documentos) al script actual, luego de que el servidor haya
         realizado cualquier asignaci&oacute;n al vuelo
         virtual-a-real.
        </simpara>
        <note>
         <simpara>
          A partir de PHP 4.3.2, <envar>PATH_TRANSLATED</envar> ya no
          se define impl&iacute;citamente bajo la
          <acronym>SAPI</acronym> de Apache 2, a diferencia de lo que
          ocurre en Apache 1, en donde se define con el mismo valor de
          la variable de servidor <envar>SCRIPT_FILENAME</envar>
          cuando Apache no se encarga de definirlo. Este cambio fue
          realizado para cumplir con la especificaci&oacute;n
          <acronym>CGI</acronym> de que <envar>PATH_TRANSLATED</envar>
          debe existir &uacute;nicamente si <envar>PATH_INFO</envar>
          se define.
         </simpara>
         <simpara>
          Los usuarios de Apache 2 pueden usar <literal>AcceptPathInfo
          = On</literal> al interior de
          <filename>httpd.conf</filename> para definir
          <envar>PATH_INFO</envar>.
         </simpara>
        </note>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>SCRIPT_NAME</varname>'</term>
       <listitem>
        <simpara>
         Contiene la ruta del script actual. &Eacute;sta es
         &uacute;til para p&aacute;ginas que necesitan apuntar a ellas
         mismas. La constante <link
         linkend="language.constants.predefined">__FILE__</link>
         contiene la ruta completa y nombre del archivo actual (es
         decir, incluido).
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>REQUEST_URI</varname>'</term>
       <listitem>
        <simpara>
         El URI que fue dado para acceder a esta p&aacute;gina; por ejemplo,
         '<literal>/index.html</literal>'.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PHP_AUTH_DIGEST</varname>'</term>
       <listitem>
        <simpara>
         Cuando se est&aacute; corriendo bajo Apache como
         m&oacute;dulo, realizando autenticaci&oacute;n HTTP Digest,
         esta variable recibe el valor de la cabecera 'Authorization'
         enviada por el cliente (la cual deber&iacute;a ser usada para
         efectuar la validaci&oacute;n apropiada).
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PHP_AUTH_USER</varname>'</term>
       <listitem>
        <simpara>
         Cuando se corre sobre Apache o IIS (ISAPI en PHP 5) como
         m&oacute;dulo realizando autenticaci&oacute;n HTTP, esta
         variable es definida con el nombre de usuario definido por el
         cliente.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>PHP_AUTH_PW</varname>'</term>
       <listitem>
        <simpara>
         Cuando se corre sobre Apache o IIS (ISAPI en PHP 5) como
         m&oacute;dulo realizando autenticaci&oacute;n HTTP, esta
         variable es definida con la contrase&ntilde;a entregada por
         el usuario.
        </simpara>
       </listitem>
      </varlistentry>

      <varlistentry>
       <term>'<varname>AUTH_TYPE</varname>'</term>
       <listitem>
        <simpara>
         Cuando se corre sobre Apache como m&oacute;dulo realizando
         autenticaci&oacute;n HTTP, esta variable es definida con el
         tipo de autenticaci&oacute;n.
        </simpara>
       </listitem>
      </varlistentry>

     </variablelist>
    </para>

   </sect2>

   <sect2 id="reserved.variables.environment">
    <title>Variables de entorno: <varname>$_ENV</varname></title>

    <note>
     <simpara>
      Introducidas en 4.1.0. En versiones anteriores,
      use <varname>$HTTP_ENV_VARS</varname>.
     </simpara>
    </note>

    <simpara>
     Estas variables son importadas en el espacio de nombres global de
     PHP desde el entorno bajo el que est&aacute; siendo ejecutado el
     int&eacute;rprete PHP. Muchas son entregadas por el
     int&eacute;rprete de comandos bajo el que PHP est&aacute;
     corriendo y diferentes sistemas suelen tener diferentes tipos de
     int&eacute;rpretes de comandos, una lista definitiva es
     imposible. Por favor consulte la documentaci&oacute;n de su
     int&eacute;rprete de comandos por una lista de varibles de
     entorno que resultan definidas.
    </simpara>

    <simpara>
     Otras variables de entorno incluyen las variables CGI, colocadas
     all&iacute; independientemente de que PHP est&eacute; siendo
     ejecutado como m&oacute;dulo del servidor o procesador CGI.
    </simpara>

    <simpara>
     Esta es una variable 'superglobal', o global
     autom&aacute;tica. Esto simplemente quiere decir que est&aacute;
     disponible en todos los contextos a lo largo del script. No
     necesita hacer <command>global $_ENV;</command> para acceder a
     ella desde funciones o m&eacute;todos, tal y como lo hace
     con <varname>$HTTP_ENV_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_ENV_VARS</varname> contiene la misma
     informaci&oacute;n inicial, pero no es autoglobal. (Note que
     <varname>$HTTP_ENV_VARS</varname> y <varname>$_ENV</varname> son
     variables diferentes y que PHP las trata como tal)
    </simpara>

    <simpara>
     Si la directiva <link
     linkend="ini.register-globals">register_globals</link>
     est&aacute; definida, entonces estas variables tambi&eacute;n se
     har&aacute;n disponibles en el entorno global del script; i.e.,
     por separado de las matrices <varname>$_ENV</varname>
     y <varname>$HTTP_ENV_VARS</varname>. Para informaci&oacute;n
     relacionada, consulte el cap&iacute;tulo de seguridad
     titulado <link linkend="security.globals">Uso de
     Registros Globales</link>. Estas globales individuales no son
     autoglobales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.cookies">
    <title>Cookies HTTP: <varname>$_COOKIE</varname></title>

    <note>
     <simpara>
      Introducidas en 4.1.0. En versiones anteriores, use
      <varname>$HTTP_COOKIE_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     Una matriz asociativa de variables pasadas al script actual a
     trav&eacute;s de cookies HTTP. Global autom&aacute;ticamente en
     cualquier contexto.
    </simpara>

    <simpara>
     Esta es una variable 'superglobal', o global
     autom&aacute;tica. Esto simplemente quiere decir que est&aacute;
     disponible en todos los contextos a lo largo de un script. No
     necesita hacer <command>global $_COOKIE;</command> para acceder a
     ella dentro de funciones o m&eacute;todos, como lo hace
     con <varname>$HTTP_COOKIE_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_COOKIE_VARS</varname> contiene la misma
     informaci&oacute;n inicial, pero no es autoglobal. (Note que
     <varname>$HTTP_COOKIE_VARS</varname> y
     <varname>$_COOKIE</varname> son variables diferentes y que PHP
     las trata como tal)
    </simpara>

    <simpara>
     Si la directiva <link
     linkend="ini.register-globals">register_globals</link>
     est&aacute; definida, entonces &eacute;stas variables
     tambi&eacute;n estar&aacute;n disponibles en el contexto global
     del script; i.e., por separado de las
     matrices <varname>$_COOKIE</varname>
     y <varname>$HTTP_COOKIE_VARS</varname>. Para informaci&oacute;n
     relacionada, consulte el cap&iacute;tulo de seguridad
     titulado <link linkend="security.globals">Uso de
     Registros Globales</link>. Estas globales individuales no son
     autoglobales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.get">
    <title>Variables HTTP GET: <varname>$_GET</varname></title>

    <note>
     <simpara>
      Introducidas en 4.1.0. En versiones anteriores, use
      <varname>$HTTP_GET_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     Una matriz asociativa de variables pasadas al script actual a
     trav&eacute;s del m&eacute;todo HTTP GET. Global
     autom&aacute;ticamente en cualquier contexto.
    </simpara>

    <simpara>
     Esta es una variable 'superglobal', o global
     autom&aacute;tica. Esto simplemente quiere decir que est&aacute;
     disponible en todos los contextos a lo largo de un script. No
     necesita hacer <command>global $_GET;</command> para acceder a
     ella dentro de funciones o m&eacute;todos, como lo hace
     con <varname>$HTTP_GET_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_GET_VARS</varname> contiene la misma
     informaci&oacute;n inicial, pero no es autoglobal. (Note que
     <varname>$HTTP_GET_VARS</varname> y <varname>$_GET</varname> son
     variables diferentes y que PHP las trata como tal)
    </simpara>

    <simpara>
     Si la directiva <link
     linkend="ini.register-globals">register_globals</link>
     est&aacute; definida, entonces &eacute;stas variables
     tambi&eacute;n estar&aacute;n disponibles en el contexto global
     del script; i.e., por separado de las
     matrices <varname>$_GET</varname>
     y <varname>$HTTP_GET_VARS</varname>. Para informaci&oacute;n
     relacionada, consulte el cap&iacute;tulo de seguridad
     titulado <link linkend="security.globals">Uso de
     Registros Globales</link>. Estas globales individuales no son
     autoglobales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.post">
    <title>Variables HTTP POST: <varname>$_POST</varname></title>

    <note>
     <simpara>
      Introducidas en 4.1.0. En versiones anteriores, use
      <varname>$HTTP_POST_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     Una matriz asociativa de variables pasadas al script actual a
     trav&eacute;s del m&eacute;todo HTTP POST. Global
     autom&aacute;ticamente en cualquier contexto.
    </simpara>

    <simpara>
     Esta es una variable 'superglobal', o global
     autom&aacute;tica. Esto simplemente quiere decir que est&aacute;
     disponible en todos los contextos a lo largo de un script. No
     necesita hacer <command>global $_POST;</command> para acceder a
     ella dentro de funciones o m&eacute;todos, como lo hace
     con <varname>$HTTP_POST_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_POST_VARS</varname> contiene la misma
     informaci&oacute;n inicial, pero no es autoglobal. (Note que
     <varname>$HTTP_POST_VARS</varname> y <varname>$_POST</varname>
     son variables diferentes y que PHP las trata como tal)
    </simpara>

    <simpara>
     Si la directiva <link
     linkend="ini.register-globals">register_globals</link>
     est&aacute; definida, entonces &eacute;stas variables
     tambi&eacute;n estar&aacute;n disponibles en el contexto global
     del script; i.e., por separado de las
     matrices <varname>$_POST</varname>
     y <varname>$HTTP_POST_VARS</varname>. Para informaci&oacute;n
     relacionada, consulte el cap&iacute;tulo de seguridad
     titulado <link linkend="security.globals">Uso de
     Registros Globales</link>. Estas globales individuales no son
     autoglobales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.files">
    <title>Variables de carga de archivos
    HTTP: <varname>$_FILES</varname></title>

    <note>
     <simpara>
      Introducidas en 4.1.0. En versiones anteriores, use
      <varname>$HTTP_POST_FILES</varname>.
     </simpara>
    </note>
    
    <simpara>
     Una matriz asociativa de elementos cargados al script actual a
     trav&eacute;s del m&eacute;todo HTTP POST. Global
     autom&aacute;ticamente en cualquier contexto.
    </simpara>

    <simpara>
     Esta es una variable 'superglobal', o global
     autom&aacute;tica. Esto simplemente quiere decir que est&aacute;
     disponible en todos los contextos a lo largo de un script. No
     necesita hacer <command>global $_FILES;</command> para acceder a
     ella dentro de funciones o m&eacute;todos, como lo hace
     con <varname>$HTTP_POST_FILES</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_POST_FILES</varname> contiene la misma
     informaci&oacute;n inicial, pero no es autoglobal. (Note que
     <varname>$HTTP_POST_FILES</varname> y <varname>$_FILES</varname>
     son variables diferentes y que PHP las trata como tal)
    </simpara>

    <simpara>
     Si la directiva <link
     linkend="ini.register-globals">register_globals</link>
     est&aacute; definida, entonces &eacute;stas variables
     tambi&eacute;n estar&aacute;n disponibles en el contexto global
     del script; i.e., por separado de las
     matrices <varname>$_FILES</varname>
     y <varname>$HTTP_POST_FILES</varname>. Para informaci&oacute;n
     relacionada, consulte el cap&iacute;tulo de seguridad
     titulado <link linkend="security.globals">Uso de
     Registros Globales</link>. Estas globales individuales no son
     autoglobales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.request">
    <title>Variables de
    petici&oacute;n: <varname>$_REQUEST</varname></title>

    <note>
     <simpara>
      Introducidas en 4.1.0. No existe una matriz equivalente en
      versiones anteriores.
     </simpara>
    </note>
    <note>
     <simpara>
      Antes de PHP 4.3.0, la informaci&oacute;n
      de <varname>$_FILES</varname> tambi&eacute;n era incluida
      en <varname>$_REQUEST</varname>.
     </simpara>
    </note>

    <simpara>
     Una matriz asociativa que consiste en los contenidos
     de <varname>$_GET</varname>, <varname>$_POST</varname>,
     y <varname>$_COOKIE</varname>.
    </simpara>

    <simpara>
     Esta es una variable 'superglobal', o global
     autom&aacute;tica. Esto simplemente quiere decir que est&aacute;
     disponible en todos los contextos a lo largo de un script. No
     necesita hacer <command>global $_REQUEST;</command> para acceder
     a ella dentro de funciones o m&eacute;todos.
    </simpara>

    <simpara>
     Si la directiva <link
     linkend="ini.register-globals">register_globals</link>
     est&aacute; definida, entonces &eacute;stas variables
     tambi&eacute;n estar&aacute;n disponibles en el contexto global
     del script; i.e., por separado de la
     matriz <varname>$_REQUEST</varname>. Para informaci&oacute;n
     relacionada, consulte el cap&iacute;tulo de seguridad
     titulado <link linkend="security.globals">Uso de
     Registros Globales</link>. Estas globales individuales no son
     autoglobales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.session">
    <title>Variables de sesi&oacute;n: <varname>$_SESSION</varname></title>

    <note>
     <simpara>
      Introducidas en 4.1.0. En versiones anteriores, use
      <varname>$HTTP_SESSION_VARS</varname>.
     </simpara>
    </note>
    
    <simpara>
     Una matriz asociativa que contiene las variables de sesi&oacute;n
     disponibles en el script actual. Consulte la documentaci&oacute;n
     sobre <link linkend="ref.session">Funciones de
     Sesi&oacute;n</link> para m&aacute;s informaci&oacute;n sobre
     c&oacute;mo es usada &eacute;sta matriz.
    </simpara>

    <simpara>
     Esta es una variable 'superglobal', o global
     autom&aacute;tica. Esto simplemente quiere decir que est&aacute;
     disponible en todos los contextos a lo largo de un script. No
     necesita hacer <command>global $_SESSION;</command> para acceder
     a ella dentro de funciones o m&eacute;todos, como lo hace
     con <varname>$HTTP_SESSION_VARS</varname>.
    </simpara>

    <simpara>
     <varname>$HTTP_SESSION_VARS</varname> contiene la misma
     informaci&oacute;n, pero no es autoglobal. (Note que
     <varname>$HTTP_SESSION_VARS</varname> y
     <varname>$_SESSION</varname> son variable diferentes y que PHP
     las trata como tal)
    </simpara>

    <simpara>
     Si la directiva <link
     linkend="ini.register-globals">register_globals</link>
     est&aacute; definida, entonces &eacute;stas variables
     tambi&eacute;n estar&aacute;n disponibles en el contexto global
     del script; i.e., por separado de las
     matrices <varname>$_SESSION</varname>
     y <varname>$HTTP_SESSION_VARS</varname>. Para informaci&oacute;n
     relacionada, consulte el cap&iacute;tulo de seguridad
     titulado <link linkend="security.globals">Uso de
     Registros Globales</link>. Estas globales individuales no son
     autoglobales.
    </simpara>
   </sect2>

   <sect2 id="reserved.variables.globals">
    <title>Variables globales: <varname>$GLOBALS</varname></title>

    <note>
     <simpara>
      <varname>$GLOBALS</varname> ha estado disponible desde PHP
      3.0.0.
     </simpara>
    </note>
    
    <simpara>
     Una matriz asociativa que contiene referencias a todas las
     variables que est&aacute;n definidas actualmente en el contexto
     global del script. Los nombres de las variables son las claves de
     la matriz.
    </simpara>

    <simpara>
     Esta es una variable 'superglobal', o global
     autom&aacute;tica. Esto simplemente quiere decir que est&aacute;
     disponible en todos los contextos a lo largo de un script. No
     necesita hacer <command>global $_GLOBALS;</command> para acceder
     a ella dentro de funciones o m&eacute;todos.
    </simpara>

   </sect2>

   <sect2 id="reserved.variables.phperrormsg">
    <title>El mensaje de error
    previo: <varname>$php_errormsg</varname></title>
    <simpara>
     <varname>$php_errormsg</varname> es una variable que contiene el
     texto del &uacute;ltimo mensaje de error generado por PHP. Esta
     variable solo estar&aacute; disponibles dentro del contexto en el
     que el error ocurri&oacute;, y solo si la opci&oacute;n de
     configuraci&oacute;n <link
     linkend="ini.track-errors">track_errors</link> est&aacute;
     habilitada (por defecto est&aacute; definida como off).
    </simpara>
   </sect2>
  </sect1>


  <sect1 id="reserved.classes">
   <title>Clases Predefinidas</title>

   <sect2 id="reserved.classes.standard">
    <title>Clases Est&aacute;ndar Predefinidas</title>

    <simpara>
     Estas clases est&aacute;n definidas en el juego de funciones
     est&aacute;ndar incluidas en la distribuici&oacute;n de PHP.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>Directory</classname></term>
      <listitem>
       <simpara>
        La clase a partir de la cual <link
        linkend="class.dir">dir</link> es instanciada.
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>stdClass</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>__PHP_Incomplete_Class</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>
   
   <sect2 id="reserved.classes.php5">
    <title>Clases predefinidas en PHP 5</title>
    
    <simpara>
     Estas clases predefinidas adicionales fueron introducidas en
     PHP 5.0.0
    </simpara>
    
    <variablelist>
     <varlistentry>
      <term><classname>exception</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>php_user_filter</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.ming">
    <title>Clases <link linkend="ref.ming">Ming</link>
    Definidas</title>

    <simpara>
     Estas clases est&aacute;n definidas en la extensi&oacute;n <link
     linkend="ref.ming">Ming</link>, y solo estar&aacute;n disponibles
     cuando tal extensi&oacute;n haya sido compilada junto con PHP o
     cargada din&aacute;micamente en tiempo de ejecuci&oacute;n.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>swfshape</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swffill</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfgradient</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfbitmap</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swftext</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swftextfield</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swffont</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfdisplayitem</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfmovie</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfbutton</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfaction</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfmorph</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>swfsprite</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.oci8">
    <title>Clases <link linkend="ref.oci8">Oracle 8</link>
    Definidas</title>

    <simpara>
     Estas clases est&aacute;n definidas en la extensi&oacute;n <link
     linkend="ref.oci8">Oracle 8</link>, y solo estar&aacute;n
     disponibles cuando tal extensi&oacute;n haya sido compilada junto
     con PHP o cargada din&aacute;micamente en tiempo de
     ejecuci&oacute;n.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>OCI-Lob</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>OCI-Collection</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

   <sect2 id="reserved.classes.qtdom">
    <title>Clases <link linkend="ref.qtdom">qtdom</link>
    Definidas</title>

    <simpara>
     Estas clases est&aacute;n definidas en la extensi&oacute;n <link
     linkend="ref.qtdom">qtdom</link>, y solo estar&aacute;n
     disponibles cuando tal extensi&oacute;n haya sido compilada junto
     con PHP o cargada din&aacute;micamente en tiempo de
     ejecuci&oacute;n.
    </simpara>

    <variablelist>
     <varlistentry>
      <term><classname>QDomDocument</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
     <varlistentry>
      <term><classname>QDomNode</classname></term>
      <listitem>
       <simpara>
       </simpara>
      </listitem>
     </varlistentry>
    </variablelist>
   </sect2>

  </sect1>

  &appendices.reserved.constants;

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
