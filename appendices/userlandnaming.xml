<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 322134 Maintainer: jpberdejo Status: ready -->
<appendix xml:id="userlandnaming" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Guia de Entorno de Usuario para Nombres</title>
 <para>
  Lo siguiente es una guía para saber cómo elegir el mejor nombre para los
  identificadores del código del entorno del usuario PHP. Cuando se eligen
  nombres para cualquier código que crea símbolos en el global namespace,
  es importante tener en cuenta los siguientes lineamientos para evitar que en
  futuras versiones de PHP estos choquen con los símbolos elegidos.
 </para>

 <section xml:id="userlandnaming.globalnamespace">
  <title>Global Namespace</title>
  <para>
   He aquí un panorama de codigo constructor que va en el global namespace:
  </para>

  <itemizedlist>
   <listitem><para>Funciones</para></listitem>
   <listitem><para>clases</para></listitem>
   <listitem><para>interfaces</para></listitem>
   <listitem><para>constantes (no constanstes de clase)</para></listitem>
   <listitem>
    <para>variables definidas fuera de las funciones/métodos</para>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="userlandnaming.rules">
  <title>Reglas</title>
  <para>
   La siguiente lista da un panorama de cuales derechos se reserva el
   proyecto PHP para si mismo, cuando elige los nombres para los nuevos
   identificadores internos.
   La guía definitiva es la oficial
   <link xlink:href="&url.userlandnaming.cs;">NORMAS DE CODIFICACION</link>:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     PHP es el propietario de el namespace de nivel superior, pero trata de 
     encontrar una descripción decente de nombres y evitar así futuros choques.
    </para>
   </listitem>
   <listitem>
    <para>
     Los nombres de función usan guión bajo entre palabras, mientras que los
     nombres de las clases usan las reglas <literal>camelCase</literal> o <literal>PascalCase</literal>.
    </para>
   </listitem>
   <listitem>
    <para>
     PHP prefijará cualquier símbolo global de una extensión con el nombre
     de la extensión. (En el pasado, han habido numerosas excepciones a esta regla.)
     Ejemplos:
    </para>

    <itemizedlist>
     <listitem><para><function>curl_close</function></para></listitem>
     <listitem><para><function>mysql_query</function></para></listitem>
     <listitem><para>PREG_SPLIT_DELIM_CAPTURE</para></listitem>
     <listitem><para>new DOMDocument()</para></listitem>
     <listitem>
      <para>
       <function>strpos</function> (ejemplo de un error del pasado)
      </para>
     </listitem>
     <listitem><para>new SplFileObject()</para></listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>
     Iteradores y Excepciones son como siempre, simplemente postfijados con
     "<literal>Iterator</literal>" y <literal>Exception</literal>."
     Ejemplos:
    </para>
    <itemizedlist>
     <listitem><para><classname>ArrayIterator</classname></para></listitem>
     <listitem><para><classname>LogicException</classname></para></listitem>
    </itemizedlist>
   </listitem>
   <listitem>
    <para>
     PHP se reserva todos los simbolos que comienzan con <literal>__</literal>
     como magicos. Es recomendado que no se creen simbolos que comiencen con
     <literal>__</literal> en PHP a menos que se quiera usar una funcionalidad
     magica documentada. Ejemplos:
    </para>
    <itemizedlist>
     <listitem><para><link linkend="object.get">__get()</link></para></listitem>
     <listitem><para><function>__autoload</function></para></listitem>
    </itemizedlist>
   </listitem>
  </itemizedlist>
 </section>

 <section xml:id="userlandnaming.tips">
  <title>Tips</title>
  <para>
   Con el fin de escribir código de prueba a futuro, es recomendado que se prefijen
   (o sufijen) cualquier cosa que vaya en el global namespace con 3-4 letras no
   comúnes prefijadas (o sufijadas) separadas con un guión bajo. Es recomendado que en orden
   de evitar choques de namespace con otro código de entornos de usuarios que en sus
   proyectos investiguen la existencia de prefijos (o sufijos) usados en otros
   proyectos y anuncien sus prefijos (o sufijos) elegidos apropiadamente.
   Ejemplos
  </para>

  <itemizedlist>
   <listitem><para>MyPx_someFunc()</para></listitem>
   <listitem><para>Foo_Date</para></listitem>
   <listitem><para>$asdf_dbh</para></listitem>
  </itemizedlist>
 </section>

</appendix>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
