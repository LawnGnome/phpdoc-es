<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.6 $ -->
<!-- EN-Revision: 1.38 Maintainer: lboshell Status: ready -->
 <appendix id="migration4">
  <title>Migraci&oacute;n de PHP 3 a PHP 4</title>

  <section id='migration4.changes'>
   <title>Qu&eacute; ha cambiado en PHP 4</title>
   <para>
    PHP 4 y el motor Zend integrado han mejorado considerablemente las
    capacidades y el rendimiento de PHP, pero se ha tenido mucho
    cuidado para evitar cualquier impacto negativo sobre el
    c&oacute;digo existente. De modo que migrar su c&oacute;digo desde
    PHP 3 a PHP 4 debe ser mucho m&aacute;s sencillo que migrar de
    PHP/FI 2 a PHP 3. Bastante c&oacute;digo de PHP 3 existente debe
    estar listo para correr sin modificaciones, pero aun as&iacute; es
    importante que sepa sobre las pocas diferencias, y tome las
    precauciones necesarias para probar su c&oacute;digo antes de
    cambiar las versiones en entornos de producci&oacute;n. Las
    siguientes l&iacute;neas deben propocionarle algunas pistas sobre
    qu&eacute; tipo de cosas considerar.
   </para>
  </section>

  <section id="migration4.php4.with.php3">
   <title>Ejecutar PHP 3 y PHP 4 simult&aacute;neamente</title>
   <simpara>
    Sistemas operativos recientes ofrecen la posibilidad de realizar
    versionamiento y contextualizaci&oacute;n. Estas
    caracter&iacute;sticas hacen posible que PHP 3 y PHP 4 corran como
    m&oacute;dulos concurrentes en un servidor Apache.
   </simpara>
   <simpara>
    Se conoce que esta caracter&iacute;stica funciona sobre las
    siguientes plataformas:
   </simpara>
   <itemizedlist>
     <listitem><simpara>Linux con versi&oacute;n reciente de binutils
     (se ha probado con binutils 2.9.1.0.25) </simpara></listitem>
     <listitem><simpara>Solaris 2.5 o superior</simpara></listitem>
     <listitem><simpara>FreeBSD (se ha probado con 3.2, 4.0)</simpara></listitem>
   </itemizedlist>
   <para>
    Para habilitarlo, configure PHP 3 y PHP 4 para que usen APXS
    (--with-apxs) y las extensiones de enlace necesarias
    (--enable-versioning). Por lo dem&aacute;s, todas las
    instrucciones de instalaci&oacute;n est&aacute;ndar se
    aplican. Por ejemplo:
    <informalexample>
     <programlisting role="configure">
<![CDATA[
$ ./configure \
  --with-apxs=/apache/bin/apxs \
  --enable-versioning \
  --with-mysql \
  --enable-track-vars
]]>
     </programlisting>
    </informalexample>
   </para>
  </section>

  <section id="migration4.configuration">
   <title>Migraci&oacute;n de Archivos de Configuraci&oacute;n</title>
   <para>
    El archivo de configuraci&oacute;n
    global, <filename>php3.ini</filename>, ha cambiado su nombre a
    &php.ini;.
   </para>
   <para>
    Para el archivo de configuraci&oacute;n de Apache, existen unos
    cuantos cambios m&aacute;s. Los tipos MIME reconocidos por el
    m&oacute;dulo PHP han cambiado.
    <informalexample>
     <programlisting role="apache-conf">
<![CDATA[
application/x-httpd-php3        -->    application/x-httpd-php
application/x-httpd-php3-source -->    application/x-httpd-php-source
]]>
     </programlisting>
    </informalexample>
   </para>
   <para>
    Puede hacer que sus archivos de configuraci&oacute;n trabajen con
    ambas versiones de PHP (dependiendo de cu&aacute;l es la que
    est&aacute; compilada actualmente con el servidor), usando la
    siguiente sintaxis:
    <informalexample>
     <programlisting role="apache-conf">
<![CDATA[
AddType  application/x-httpd-php3        .php3
AddType  application/x-httpd-php3-source .php3s

AddType  application/x-httpd-php         .php
AddType  application/x-httpd-php-source  .phps
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Adicionalmente, los nombres de directivas PHP para Apache han
    cambiado.
   </simpara>
   <para>
    A partir de PHP 4.0, existen solo cuatro directivas Apache que se
    relacionan con PHP:
    <informalexample>
     <programlisting role="apache-conf">
<![CDATA[
php_value [nombre de directiva PHP] [valor]
php_flag [nombre de directiva PHP] [On|Off]
php_admin_value [nombre de directiva PHP] [valor]
php_admin_flag [nombre de directiva PHP] [On|Off]
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Existen dos diferencias entre los valores Admin y los no-admin:
   </simpara>
   <itemizedlist>
    <listitem>
     <simpara>
      Los valores (o banderas) admin pueden aparecer solo en los
      archivos de configuraci&oacute;n globales de Apache (p.ej.,
      &httpd.conf;).
     </simpara>
    </listitem>
    <listitem>
     <simpara>
      Los valores (o banderas) est&aacute;ndar no pueden controlar
      ciertas directivas PHP, por ejemplo: &safemode; (si pudiera
      sobrescribir los par&aacute;metros del modo seguro en los
      archivos &htaccess;, se estropear&iacute;a la gracia de
      &safemode;). En contraste, los valores Admin pueden modificar el
      valor de cualquier directiva PHP.
     </simpara>
    </listitem>
   </itemizedlist>
   <simpara>
    Para hacer el proceso de transici&oacute;n m&aacute;s sencillo,
    PHP 4 es distribuido con scripts que convierten
    autom&aacute;ticamente su configuraci&oacute;n en archivos Apache
    y &htaccess; para que trabajen con PHP 3 y PHP 4. &iexcl;Estos
    scripts NO convierten las l&iacute;neas de tipos mime!
    Tendr&aacute; que convertir &eacute;stas manualmente.
   </simpara>
   <para>
    Para convertir sus archivos de configuraci&oacute;n de Apache,
    ejecute el script apconf-conv.sh (disponible en el directorio
    scripts/apache/). Por ejemplo:
    <informalexample>
     <programlisting role="shell">
<![CDATA[
~/php4/scripts/apache:#  ./apconf-conv.sh /usr/local/apache/conf/httpd.conf
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    Su archivo de configuraci&oacute;n original ser&aacute; guardado
    en httpd.conf.orig.
   </simpara>
   <para>
    Para convertir sus archivos &htaccess;, ejecute el
    script <filename>aphtaccess-conv.sh</filename> (disponible
    as&iacute; mismo en el
    directorio <filename>scripts/apache/</filename>):
    <informalexample>
     <programlisting role="shell">
<![CDATA[
~/php4/scripts/apache:#  find / -name .htaccess -exec ./aphtaccess-conv.sh {} \;
]]>
     </programlisting>
    </informalexample>
   </para>
   <simpara>
    De modo semejante, sus archivos &htaccess; antiguos ser&aacute;n
    guardados con el prefijo .orig.
   </simpara>
   <simpara>
    Los scripts de conversi&oacute;n requieren que awk est&eacute;
    instalado.
   </simpara>
  </section>

  <section id='migration4.parser'>
   <title>Comportamiento del analizador sint&aacute;ctico</title>
   <para>
    El proceso de an&aacute;lisis sint&aacute;ctico y la
    ejecuci&oacute;n son ahora dos pasos completamente separados, no
    se proceder&aacute; a la ejecuci&oacute;n del c&oacute;digo de
    cualquier archivo hasta que &eacute;ste en su totalidad,
    as&iacute; como todo el c&oacute;digo requerido se haya analizado
    completa y satisfactoriamente.
   </para>
   <para>
    Uno de los nuevos requisitos introducidos con esta
    separaci&oacute;n es que todos los archivos requeridos y de
    inclusi&oacute;n tienen que ser sint&aacute;cticamente completos
    ahora. Ya no es permitida la separaci&oacute;n de diferentes
    segmentos de una estructura de control a trav&eacute;s de varios
    archivos. Esto quiere decir que ahora no puede iniciar un
    ciclo <literal>for</literal> o <literal>while</literal>, una
    sentencia <literal>if</literal> o un
    bloque <literal>switch</literal> en un archivo, y tener el final
    del ciclo,
    sentencias <literal>else</literal>, <literal>endif</literal>,
    <literal>case</literal> o <literal>break</literal> en un archivo
    diferente.
   </para>
   <para>
    Aun es perfectamente legal incluir c&oacute;digo adicional al
    interior de ciclos u otras estructuras de control,
    &uacute;nicamente las palabras claves de control y los corchetes
    correspondientes <literal>{...}</literal> tienen que estar en la
    misma unidad de compilaci&oacute;n (archivo o cadena procesada
    por <function>eval</function>).
   </para>
   <para>
    Esto no debe generar una repercusi&oacute;n significativa ya que
    separar el c&oacute;digo de esta manera debe ser considerado como
    muy mal estilo, en cualquier caso.
   </para>
   <para>
    Algo m&aacute;s que ya no es posible, aunque es rara veces visto
    en c&oacute;digo PHP 3, es devolver valores desde un archivo
    requerido. Devolver un valor desde un archivo de inclusi&oacute;n
    es posible aun.
   </para>
  </section>

  <section id='migration4.error-reporting'>
   <title>Reporte de errores</title>

   <section id='migration4.error-reporting.config'>
    <title>Cambios de configuraci&oacute;n</title>
    <para>
     Con PHP 3 el nivel de reporte de errores estaba establecido como
     un valor num&eacute;rico simple formado por la suma de los
     n&uacute;meros relacionados con diferentes niveles de
     error. Algunos valores usuales eran 15 para reportar todos los
     errores y advertencias, o 7 para reportar todo excepto mensajes
     de noticias simples que indicaban mal estilo del c&oacute;digo y
     cosas por el estilo.
    </para>
    <para>
     PHP 4 tiene un conjunto de niveles de error y advertencia mayor y
     viene con un analizador sint&aacute;ctico de configuraci&oacute;n
     que permite el uso de constantes simb&oacute;licas para
     determinar el comportamiento deseado.
    </para>
    <para>
     El nivel de reporte de errores debe ser ahora configurado
     mediante la deshabilitaci&oacute;n expl&iacute;cita de niveles de
     advertencia que no desea que generen mensajes de error, con una
     sentencia l&oacute;gica OR sobre la constante
     simb&oacute;lica <literal>E_ALL</literal>. &iquest;Suena
     complicado?  Bien, digamos que usted desea que el sistema de
     reporte de errores le haga saber sobre cualquier problema excepto
     por las advertencias de estilo simples que est&aacute;n
     categorizadas por la constante
     simb&oacute;lica <literal>E_NOTICE</literal>. En ese caso,
     colocar&aacute; lo siguiente en su
     &php.ini;: <literal>error_reporting = E_ALL &amp; ~ ( E_NOTICE
     )</literal>. Si desea suprimir las advertencias tambi&eacute;n,
     usted agrega la constante apropiada al interior de los
     par&eacute;ntesis usando el operador binario OR '|':
     <literal>error_reporting= E_ALL &amp; ~ ( E_NOTICE | E_WARNING
     )</literal>.
    </para>
    <warning>
     <para>
      Cuando actualice c&oacute;digo o servidores desde PHP 3 a PHP 4,
      usted deber&iacute;a chequear estos par&aacute;metros y llamadas
      a <function>error_reporting</function> o puede que quiera
      deshabilitar el reporte de los nuevos tipos de error,
      especialmente E_COMPILE_ERROR. Esto puede llevar a la
      generaci&oacute;n de documentos sin informaci&oacute;n alguna
      sobre qu&eacute; ha pasado o en d&oacute;nde investigar por
      posibles problemas.
     </para>
    </warning>
    <warning>
     <para>
      El uso de los valores antiguos 7 y 15 para establecer el reporte
      de errores es una muy mala idea ya que esto suprime algunas de
      las nuevas clases de errores presentes, incluyendo errores de la
      fase de an&aacute;lisis sint&aacute;ctico. Esto puede producir
      comportamientos bastante extra&ntilde;os, debido a que
      posiblemente los scripts no trabajen m&aacute;s sin dejar de
      mostrar mensajes de error en todas partes.
     </para>
     <para>
      Esto ha producido una cantidad enorme de reportes de fallos
      irreproducibles en el pasado, en donde la gente reportaba
      problemas con el motor de scripts que eran incapaces de
      rastrear, cuando lo que suced&iacute;a en realidad era
      usualmente alg&uacute;n '}' que faltaba en un archivo requerido,
      que el analizador sint&aacute;ctico no pod&iacute;a reportar
      debido a un sistema de reporte de errores mal configurado.
     </para>
     <para>
      As&iacute; que revisar la configuraci&oacute;n de su reporte de
      errores debe ser lo primero que debe hacer siempre que sus
      scripts mueran silenciosamente. El motor Zend puede considerarse
      suficientemente maduro en la actualidad como para afirmar que
      &eacute;ste no es el causante de estos comportamientos
      extra&ntilde;os.
     </para>
    </warning>
   </section>

   <section id='migration4.error-reporting.additions'>
    <title>Mensajes de advertencia adicionales</title>
    <para>
     Una gran cantidad de c&oacute;digo PHP 3 existente usa
     construcciones del lenguaje que deben ser consideradas como muy
     mal estilo ya que, aunque logran el efecto esperado ahora, pueden
     verse influenciadas por cambios en otros lugares del
     c&oacute;digo. PHP 4 desplegar&aacute; una enorme cantidad de
     mensajes de noticia en tales situaciones en donde PHP 3 no lo
     hac&iacute;a. La soluci&oacute;n simple es deshabilitar los
     mensajes E_NOTICE, pero usualmente es una buena idea arreglar el
     c&oacute;digo en su lugar.
    </para>
    <para>
     El caso m&aacute;s com&uacute;n que produce mensajes de noticia
     ahora es el uso de constantes de cadena sin comillas como
     &iacute;ndices de matrices. Tanto PHP 3 como PHP 4
     llegar&aacute;n a interpretar &eacute;stas como cadenas si no
     existen palabras clave o constantes con tales nombres, pero en
     donde sea que una constante con tal nombre haya sido definida en
     alg&uacute;n lugar del c&oacute;digo, puede da&ntilde;ar el
     script. Esto puede convertirse incluso en un riesgo de seguridad
     si alg&uacute;n intruso logra redefinir constantes de cadena en
     forma tal que hace que sus scripts le den derechos de acceso que
     &eacute;l no deb&iacute;a tener. As&iacute; que PHP 4 le
     advertir&aacute; ahora siempre que use constantes de cadena sin
     comillas, como por ejemplo
     en <literal>$_SERVER[REQUEST_METHOD]</literal>. Modificar tal
     expresi&oacute;n
     por <literal>$_SERVER['REQUEST_METHOD']</literal> har&aacute;
     feliz al analizador sint&aacute;ctico y mejorar&aacute;
     significativamente el estilo y la seguridad de su c&oacute;digo.
    </para>
    <para>
     Otra cosa sobre la que PHP 4 le notificar&aacute; es sobre el uso
     de variables o elementos de matrices sin inicializar.
    </para>
   </section>
   
  </section>

  <section id='migration4.initializers'>
   <title>Inicializadores</title>
   <para>
    Las variables est&aacute;ticas y los inicializadores de miembros
    de clase aceptan &uacute;nicamente valores escalares, mientras que
    en PHP 3 aceptaban cualquier expresi&oacute;n v&aacute;lida. Esto
    es, nuevamente, debido a la separaci&oacute;n entre el
    an&aacute;lisis sint&aacute;ctico y la ejecuci&oacute;n ya que el
    c&oacute;digo no ha sido ejecutado aun cuando el analizador
    sint&aacute;ctico ve el inicializador.
   </para>
   <para>
    Para clases, deber&iacute;a usar constructores para inicializar
    variables miembro en su lugar. Para variables est&aacute;ticas,
    cosas diferentes a simples valores est&aacute;ticos rara vez
    tienen sentido despu&eacute;s de todo.
   </para>
  </section>

  <section id='migration4.empty'>
   <title><literal>empty("0")</literal></title>
   <para>
    Quiz&aacute;s el cambio de comportamiento m&aacute;s controversial
    ha ocurrido con el modo en que
    trabaja <function>empty</function>. Una cadena que contenga solo
    el caracter '0' (cero) es considerada vac&iacute;a, mientras que
    en PHP 3 no era as&iacute;.
   </para>
   <para>
    Este nuevo comportamiento tiene sentido en aplicaciones web, dado
    que todos los campos de entrada devuelven cadenas incluso si se
    solicitan valores num&eacute;ricos, y dadas las capacidades de
    conversi&oacute;n autom&aacute;tica de tipos de PHP. Pero, por
    otra parte, puede da&ntilde;ar su c&oacute;digo en formas sutiles,
    causando comportamientos ex&oacute;ticos que son dif&iacute;ciles
    de rastrear si no sabe qu&eacute; buscar.
   </para>
  </section>

  <section id='migration4.missing'>
   <title>Funciones faltantes</title>
   <para>
    Aunque PHP 4 viene con una gran cantidad de
    caracter&iacute;sticas, funciones y extensiones nuevas, puede que
    aun encuentre funciones de la versi&oacute;n 3 que hacen falta. Un
    n&uacute;mero peque&ntilde;o de funciones centrales han
    desaparecido ya que no funcionan con el nuevo esquema de
    separaci&oacute;n de an&aacute;lisis sint&aacute;ctico y
    ejecuci&oacute;n que se introdujo en PHP 4 con el motor
    Zend. Otras funciones, e incluso extensiones completas, se han
    marcado obsoletas a medida que nuevas funciones y extensiones
    cubren las mismas tareas y en ocasiones en una forma m&aacute;s
    general. Algunas funciones simplemente no han sido portadas aun y
    finalmente algunas funciones o extensiones pueden faltar debido a
    conflictos de licencias.
   </para>

   <section id='migration4.missing.concept'>
    <title>Funciones faltantes debido a cambios conceptuales</title>
    <para>
     Dado que PHP 4 separa ahora el an&aacute;lisis sint&aacute;ctico
     de la ejecuci&oacute;n, ya no es posible modificar el
     comportamiente del analizador sint&aacute;ctico (embebido ahora
     en el motor Zend) en tiempo de ejecuci&oacute;n, dado que el
     an&aacute;lisis ya ha ocurrido para entonces. De modo que la
     funci&oacute;n <function>short_tags</function> ya no existe. Aun
     puede modificar el comportamiento del analizador
     sint&aacute;nctico definiendo los valores apropiados en el
     archivo &php.ini;.
    </para>
    <para>
     Otra caracter&iacute;stica de PHP 3 que no es parte de PHP 4 es
     la interfaz de depuraci&oacute;n integrada. Existen adiciones de
     terceros para el motor Zend que a&ntilde;aden funcionalidades
     similares.
    </para>
   </section>

   <section id='migration4.deprecate'>
    <title>Funciones y extensiones deprecadas</title>
    <para>
     Las extensiones de bases de datos Adabas y Solid ya no
     existen. Larga vida a la extensi&oacute;n unificada ODBC en su
     lugar.
    </para>
   </section>

   <section id='migration4.unset'>
    <title>Status modificado para <function>unset</function></title>
    <para>
     <function>unset</function>, aun cuando sigue estando disponible,
     es implementada ahora como una construcci&oacute;n del lenguaje
     en lugar de una funci&oacute;n.
    </para>
    <para>
     Esto no tiene consecuencia alguna en el comportamiento
     de <function>unset</function>, pero realizar una prueba con
     "unset" usando <function>function_exists</function>
     devolver&aacute; &false; del mismo modo que ocurrir&iacute;a con
     otras construcciones del lenguaje que tienen apariencia de
     funciones, como <function>echo</function>.
    </para>
    <para>
     Otro cambio m&aacute;s pr&aacute;ctico es que ya no es posible
     llamar <function>unset</function> indirectamente, esto
     es, <literal>$func="unset"; $func($alguna_variable)</literal> no
     funcionar&aacute; m&aacute;s.
    </para>
   </section>
  </section>

  <section id='migration4.extensions'>
   <title>Extensiones PHP 3</title>
   <para>
    Las extensiones escritas para PHP 3 no trabajar&aacute;n con PHP
    4, ni como binarios ni al nivel de fuente. No es dif&iacute;cil
    portar extensiones a PHP 4 si tiene acceso a las fuentes
    originales. Una descripci&oacute;n detallada de tal proceso de
    migraci&oacute;n no hace parte de este documento.
   </para>
  </section>

  <section id='migration4.strings'>
   <title>Sustituci&oacute;n de variables en cadenas</title>
   <para>
    PHP 4 a&ntilde;ade un nuevo mecanismo para la sustituci&oacute;n
    de variables en cadenas. Ahora, finalmente, puede acceder a
    variables miembro de objetos y elementos de matrices
    multidimensionales al interior de cadenas.
   </para>
   <para>
    Para tal efecto, necesita rodear sus variables con corchetes,
    colocando el signo de d&oacute;lar inmediatamente despu&eacute;s
    del corchete de apetura: <literal>{$...}</literal>
   </para>
   <para>
    Para embeber el valor de una variable miembro de objeto en una
    cadena, simplemente escriba <literal>"texto {$obj-&gt;miembro}
    texto"</literal>, mientras que en PHP 3 deb&iacute;a hacer algo
    como
    <literal>"texto ".$obj-&gt;miembro." texto"</literal>.
   </para>
   <para>
    Esto deber&iacute;a representar c&oacute;digo m&aacute;s legible,
    aunque podr&iacute;a arruinar scripts existentes escritos para PHP
    3. Pero puede encontrar f&aacute;cilmente este tipo de problemas,
    revisando el c&oacute;digo por la combinaci&oacute;n de
    caracteres <literal>{$</literal> en su c&oacute;digo, y
    reemplaz&aacute;ndola por <literal>\{$</literal> con su
    herramienta de b&uacute;squeda-y-reemplazo favorita.
   </para>
  </section>

  <section id='migration4.cookies'>
   <title>Cookies</title>
   <para>
    PHP 3 ten&iacute;a el mal h&aacute;bito de definir cookies en el
    orden contrario al de las llamadas
    a <function>setcookie</function> en su c&oacute;digo. PHP 4
    acab&oacute; con este h&aacute;bito y crea las l&iacute;neas de
    cabecera de cookies en el mismo orden exacto en el que usted
    define las cookies en el c&oacute;digo.
   </para>
   <para>
    Esto puede da&ntilde;ar c&oacute;digo existente, pero el
    comportamiento antiguo era tan extra&ntilde;o de entender que
    merec&iacute;a un cambio para prevenir posteriores problemas en el
    futuro.
   </para>
  </section>

  <section id='migration4.variables'>
   <title>Gesti&oacute;n de variables globales</title>
   <para>
    Aunque el manejo de variables globales se enfocaba en la
    simplicidad en PHP 3 y versiones tempranas de PHP 4, &eacute;ste
    enfoque ha cambiado para ser m&aacute;s seguro. Mientras que en
    PHP 3 el siguiente ejemplo funcionaba bien, en PHP 4 debe ser
    unset(<literal>unset($GLOBALS["id"])</literal>);. Este es
    s&oacute;lo un detalle de la gesti&oacute;n de variables
    globales. Usted deber&iacute;a usar siempre
    <varname>$GLOBALS</varname>, con versiones recientes de PHP 4
    est&aacute; obligado a hacerlo en la mayor&iacute;a de casos. Lea
    m&aacute;s sobre este asunto en la <link
    linkend="references.global">secci&oacute;n de referencias
    <literal>global</literal></link>.
   </para>
   <example>
    <title>Migraci&oacute;n de variables globales</title>
    <programlisting role="php">
<![CDATA[
<?php
$id = 1;
function prueba()
{
    global $id;
    unset($id);
}
prueba();
echo($id); // Esto imprime 1 en PHP 4
?>
]]>
    </programlisting>
   </example>
  </section>

 </appendix>


<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
