<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision: 293566 $ -->
<!-- EN-Revision: 293566 Maintainer: lboshell Status: ready -->
<appendix xml:id="filters" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Lista de Filtros Disponibles</title>
 <para>
  La siguiente es una lista de unos cuantos filtros de secuencia integrados
  que puede usar con <function>stream_filter_append</function>. Su versión
  de PHP puede tener más (o menos) filtros de los que son listados aquí.
 </para>

 <para>
  Vale la pena anotar una ligera asimetría entre
  <function>stream_filter_append</function> y
  <function>stream_filter_prepend</function>. Cada secuencia en PHP contiene
  un pequeño <emphasis>búfer de lectura</emphasis> en donde almacena los
  bloques de datos recibidos desde el sistema de archivos u otro recurso
  para procesar los datos de la forma más eficiente. Tan pronto como los
  datos son tomados del recurso y colocados en el búfer interno de la
  secuencia, éstos son procesados inmediatamente a través de cualquier
  filtro adjunto sin importar que la aplicación PHP esté lista para los
  datos o no. Si los datos están en el búfer de lectura cuando un filtro es
  <emphasis>añadido al final</emphasis>, los datos serán procesados
  inmediatamente a través del filtro haciendo parecer que el proceso fuera
  transparente. Sin embargo, si los datos están en el búfer de lectura
  cuando un filtro es <emphasis>adjuntado al comienzo</emphasis>, los datos
  <emphasis>NO</emphasis> serán procesados a través del filtro. En su lugar
  esperará a que el siguiente bloque de datos sea recuperado del recurso.
 </para>

 <para>
  Para una lista de filtros instalados en su versión de PHP, use
  <function>stream_get_filters</function>.
 </para>

 <section xml:id="filters.string">
  <title>Filtros de Cadena</title>

  <simpara>
   Cada uno de estos filtros hace precisamente lo que sus nombres implican y
   corresponden al comportamiento de una función de manipulación de cadenas
   que hace parte de php. Para más información sobre un filtro dado,
   refiérase a la página del manual de la función correspondiente.
  </simpara>

  <simpara>
   <literal>string.rot13</literal> (a partir de PHP 4.3.0) El uso de este
   filtro es equivalente a procesar todos los datos de la secuencia a través
   de la función <function>str_rot13</function>.
  </simpara>
  <example>
   <title>string.rot13</title>
   <programlisting role="php">
<![CDATA[
<?php
$da = fopen('php://output', 'w');
stream_filter_append($da, 'string.rot13');
fwrite($da, "Esto es una prueba.\n");
/* Imprime:  Rfgb rf han cehron. */
?>
]]>
   </programlisting>
  </example>

  <simpara>
   <literal>string.toupper</literal> (a partir de PHP 5.0.0) El uso de este
   filtro es equivalente a procesar todos los datos de la secuencia a través
   de la función <function>strtoupper</function>.
  </simpara>
  <example>
   <title>string.toupper</title>
   <programlisting role="php">
<![CDATA[
<?php
$da = fopen('php://output', 'w');
stream_filter_append($da, 'string.toupper');
fwrite($da, "Esto es una prueba.\n");
/* Imprime:  ESTO ES UNA PRUEBA.   */
?>
]]>
   </programlisting>
  </example>

  <simpara>
   <literal>string.tolower</literal> (a partir de PHP 5.0.0) El uso de este
   filtro es equivalente a procesar todos los datos de la secuencia a través
   de la función <function>strtolower</function>.
  </simpara>
  <example>
   <title>string.tolower</title>
   <programlisting role="php">
<![CDATA[
<?php
$da = fopen('php://output', 'w');
stream_filter_append($da, 'string.tolower');
fwrite($da, "Esto es una prueba.\n");
/* Imprime:  esto es una prueba.   */
?>
]]>
   </programlisting>
  </example>

  <simpara>
   <literal>string.strip_tags</literal> (a partir de PHP 5.0.0) El uso de
   este filtro es equivalente a procesar todos los datos de la secuencia a
   través de la función <function>strip_tags</function>. Acepta parámetros
   en una de dos formas: Ya sea como una cadena que contiene una lista de
   etiquetas, similar al segundo parámetro de la función
   <function>strip_tags</function>, o como una matriz de nombres de
   etiqueta.
  </simpara>
  <example>
   <title>string.strip_tags</title>
   <programlisting role="php">
<![CDATA[
<?php
$da = fopen('php://output', 'w');
stream_filter_append($da, 'string.strip_tags', STREAM_FILTER_WRITE, "<b><i><u>");
fwrite($da, "<b>texto en negrilla</b> llevado a <h1>nivel de cabecera 1</h1>\n");
fclose($da);
/* Imprime:  <b>texto en negrilla</b> llevado a nivel de cabecera 1   */

$da = fopen('php://output', 'w');
stream_filter_append($da, 'string.strip_tags', STREAM_FILTER_WRITE, array('b','i','u'));
fwrite($da, "<b>texto en negrilla</b> llevado a <h1>nivel de cabecera 1</h1>\n");
fclose($da);
/* Imprime:  <b>texto en negrilla</b> llevado a nivel de cabecera 1   */
?>
]]>
   </programlisting>
  </example>

 </section>

 <section xml:id="filters.convert">
  <title>Filtros de Conversión</title>

  <simpara>
   De forma similar a los filtros string.*, los filtros convert.* realizan
   acciones semejantes a sus nombres. Los filtros de conversión fueron
   agregados en PHP 5.0.0. Para más información sobre un filtro dado,
   refiérase a la página del manual sobre la función correspondiente.
  </simpara>

  <simpara>
   <literal>convert.base64-encode</literal> y
   <literal>convert.base64-decode</literal> El uso de estos filtros es
   equivalente a procesar todos los datos de la secuencia a través de las
   funciones <function>base64_encode</function> y
   <function>base64_decode</function> respectivamente.
   <literal>convert.base64-encode</literal> soporta el uso de parámetros
   entregados como una matriz asociativa. Si se usa
   <parameter>longitud-linea</parameter>, la salida base64 será separada en
   paquetes de <parameter>longitud-linea</parameter> caracteres cada uno. Si
   se usa <parameter>caracteres-final-de-linea</parameter>, cada paquete
   será delimitado por los caracteres dados. Estos parámetros ofrecen el
   mismo efecto que usar <function>base64_encode</function> con
   <function>chunk_split</function>.
  </simpara>
  <example>
   <title>
    convert.base64-encode y
    convert.base64-decode
   </title>
   <programlisting role="php">
<![CDATA[
<?php
$da = fopen('php://output', 'w');
stream_filter_append($da, 'convert.base64-encode');
fwrite($da, "Esto es una prueba.\n");
fclose($da);
/* Imprime:  RXN0byBlcyB1bmEgcHJ1ZWJhLgo=  */

$param = array('line-length' => 8, 'line-break-chars' => "\r\n");
$da = fopen('php://output', 'w');
stream_filter_append($da, 'convert.base64-encode', STREAM_FILTER_WRITE, $param);
fwrite($da, "Esto es una prueba.\n");
fclose($da);
/* Imprime:  RXN0byBl
          :  cyB1bmEg
          :  cHJ1ZWJh
          :  Lgo=  */

$da = fopen('php://output', 'w');
stream_filter_append($da, 'convert.base64-decode');
fwrite($da, "RXN0byBlcyB1bmEgcHJ1ZWJhLgo=");
fclose($da);
/* Imprime:  Esto es una prueba.  */
?>
]]>
   </programlisting>
  </example>

  <simpara>
   <literal>convert.quoted-printable-encode</literal> y
   <literal>convert.quoted-printable-decode</literal> El uso de la versión
   de docedificación de este filtro es equivalente a procesar todos los
   datos de la secuencia a través de la función
   <function>quoted_printable_decode</function>. No existe una función
   equivalente a <literal>convert.quoted-printable-encode</literal>.
   <literal>convert.quoted-printable-encode</literal> soporta el uso de
   parámetros dados como una matriz asociativa. Adicionalmente a los
   parámetros soportados por <literal>convert.base64-encode</literal>,
   <literal>convert.quoted-printable-encode</literal> soporta también los
   argumentos booleanos <parameter>binary</parameter> y
   <parameter>force-encode-first</parameter>.
   <literal>convert.base64-decode</literal> soporta únicamente el parámetro
   <parameter>line-break-chars</parameter> como una sugerencia del tipo para
   eliminar del material codificado.
  </simpara>
  <example>
   <title>
    convert.quoted-printable-encode y
    convert.quoted-printable-decode
   </title>
   <programlisting role="php">
<![CDATA[
<?php
$da = fopen('php://output', 'w');
stream_filter_append($da, 'convert.quoted-printable-encode');
fwrite($da, "Esto es una prueba.\n");
/* Imprime:  =Esto es una prueba.=0A  */
?>
]]>
   </programlisting>
  </example>
 </section>

 <section xml:id="filters.compression">
  <title>Filtros de Compresión</title>

  <simpara>
   Aunque las <link linkend="wrappers.compression">Envolturas de
   Compresión</link> ofrecen una forma de crear archivos compatibles con
   gzip y bz2 en el sistema de archivos local, no ofrecen un método de
   compresión generalizado sobre secuencias de red, ni ofrecen la forma de
   comenzar con una secuencia no-comprimida y trasladarse a una comprimida.
   Para esto, un filtro de compresión puede ser aplicado sobre cualquier
   recurso de secuencia en cualquier momento.
  </simpara>

  <note>
   <simpara>
    Los filtros de compresión <emphasis>no</emphasis> generan cabeceras ni
    caracteres finales usados por utilidades de la línea de comandos como
    <literal>gzip</literal>. Sólo comprimen y descomprimen las porciones
    significativas de las secuencias de datos comprimidas.
   </simpara>
  </note>

  <simpara>
   <literal>zlib.deflate</literal> (compresión) y
   <literal>zlib.inflate</literal> (descompresión) son implementaciones de
   los métodos de compresión descritos en <link xlink:href="&url.rfc;1951">RFC
   1951</link>. El filtro <literal>deflate</literal> recibe hasta tres
   parámetros pasados como una matriz asociativa.

   <parameter>level</parameter> describe la intensidad de compresión (1-9).
   Números más grandes producen, por lo general, resultados más pequeños, al
   costo de tiempo de procesamiento adicional. Dos niveles de compresión
   especiales existen también: 0 (para no-compresión), y -1 (el valor
   predeterminado de zlib -- actualmente 6).

   <parameter>window</parameter> es el registro en base-2 del tamaño de
   ventana del circuito cerrado de compresión. Valores más altos (de hasta
   15 -- 32768 bytes) producen mejor compresión al costo de más memoria,
   mientras valores más bajos (alrededor de 9 -- 512 bytes) producen una
   compresión inferior en un espacio de memoria más pequeño. El tamaño de
   <parameter>window</parameter> es actualmente <constant>15</constant>.

   <parameter>memory</parameter> es una escala que indica cuánta memoria
   debería ser reservada. Los valores válidos están en el rango de 1
   (reserva mínima) a 9 (reserva máxima). Esta reserva de memoria afecta
   únicamente la repidez y no tiene impacto en el tamaño del resultado
   generado.
  </simpara>

  <note>
   <simpara>
    Dado que el nivel de compresión es el parámetro usado con mayor
    frecuencia, puede indicarse alternativamente como un valor entero simple
    (en lugar de un elemento tipo matriz).
   </simpara>
  </note>

  <simpara>
    Los filtros de compresión zlib.* están disponibles con PHP desde la
    versión <literal>5.1.0</literal> si el soporte de <link
    linkend="ref.zlib">zlib</link> se encuentra habilitado. También están
    disponibles como una característica portada de vuelta en la versión
    <literal>5.0.x</literal>, instalando el paquete <link
    xlink:href="&url.pecl.package;zlib_filter">zlib_filter</link> desde <link
    xlink:href="&url.pecl;">PECL</link>. Estos filtros <emphasis>no</emphasis>
    están disponibles para PHP 4.
  </simpara>

  <example>
   <title>
    <literal>zlib.deflate</literal> y <literal>zlib.inflate</literal>
   </title>
   <programlisting role="php">
<![CDATA[
<?php
$params = array('level' => 6, 'window' => 15, 'memory' => 9);

$texto_original = "Esto es una prueba.\nEsto es solo una prueba.\nEsta no es una cadena importante.\n";
echo "El texto original tiene " . strlen($texto_original) . " caracteres.\n";

$da = fopen('test.deflated', 'w');
stream_filter_append($da, 'zlib.deflate', STREAM_FILTER_WRITE, $params);
fwrite($da, $texto_original);
fclose($da);

echo "El archivo comprimido tiene " . filesize('test.deflated') . " bytes.\n";
echo "El texto original era:\n";
/* Use readfile y zlib.inflate para descomprimir al vuelo */
readfile('php://filter/zlib.inflate/resource=test.deflated');

/* Genera la salida:

El texto original tiene 79 caracteres.
El archivo comprimido tiene 59 bytes.
El texto original era:
Esto es una prueba.
Esto es solo una prueba.
Esta no es una cadena importante.

 */
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>
    <literal>zlib.deflate</literal> simple
   </title>
   <programlisting role="php">
<![CDATA[
<?php
$texto_original = "Esto es una prueba.\nEsto es solo una prueba.\nEsta no es una cadena importante.\n";
echo "El texto original tiene " . strlen($texto_original) . " caracteres.\n";

$da = fopen('test.deflated', 'w');
/* Aqui "6" indica el nivel 6 de compresion */
stream_filter_append($da, 'zlib.deflate', STREAM_FILTER_WRITE, 6);
fwrite($da, $texto_original);
fclose($da);

echo "El archivo comprimido tiene " . filesize('test.deflated') . " bytes.\n";

/* Genera la salida:

El texto original tiene 79 caracteres.
El archivo comprimido tiene 53 bytes.

 */
?>
]]>
   </programlisting>
  </example>

  <simpara>
   <literal>bzip2.compress</literal> y <literal>bzip2.decompress</literal>
   funcionan de la misma forma que los filtros zlib descritos anteriormente.
   El filtro <literal>bzip2.compress</literal> acepta hasta dos parámetros
   dados como elementos de una matriz asociativa:

   <parameter>blocks</parameter> es un valor entero desde 1 hasta 9 que
   indica el número de bloques de 100kbytes de memoria a reservar para el
   espacio de trabajo.

   <parameter>work</parameter> es también un valor entero que va desde 0 a
   250, e indica cuánto esfuerzo debe invertirse para expandir usando el
   método de compresión normal antes de caer en un método más lento pero más
   confiable. Modificar este parámetro afecta únicamente la rapidez de
   compresién. Ni el tamaño de la salida comprimida ni el uso de memoria se
   modifican por este valor. Un factor de trabajo de 0 le indica a la
   biblioteca bzip que debe usar el valor interno predeterminado.

   El filtro <literal>bzip2.decompress</literal> sólo acepta un parámetro,
   el cual puede ser pasado como un valor booleano ordinario, o como el
   elemento <parameter>small</parameter> de una matriz asociativa.

   <parameter>small</parameter>, cuando se define a un valor &true;, le
   indica a la biblioteca bzip de realice una descompresión con una cantidad
   de memoria mínima, al costo de la rapidez.
  </simpara>

  <simpara>
    Las filtros de compresión bzip2.* se encuentran disponibles con PHP
    desde la versión <literal>5.1.0</literal> si el soporte de <link
    linkend="ref.bzip2">bz2</link> se encuentra habilitado. También se
    encuentran disponibles como una característica portada hacia atrás en la
    versión <literal>5.0.x</literal>, instalando el paquete <link
    xlink:href="&url.pecl.package;bz2_filter">bz2_filter</link> desde <link
    xlink:href="&url.pecl;">PECL</link>. Estos filtros <emphasis>no</emphasis> se
    encuentran disponibles para PHP 4.
  </simpara>

  <example>
   <title>
    <literal>bzip2.compress</literal> y
    <literal>bzip2.decompress</literal>
   </title>
   <programlisting role="php">
<![CDATA[
<?php
$param = array('blocks' => 9, 'work' => 0);

echo "El archivo original tiene " . filesize('LICENSE') . " bytes.\n";

$da = fopen('LICENSE.compressed', 'w');
stream_filter_append($da, 'bzip2.compress', STREAM_FILTER_WRITE, $param);
fwrite($da, file_get_contents('LICENSE'));
fclose($da);

echo "El archivo comprimido tiene " . filesize('LICENSE.compressed') . " bytes.\n";

/* Genera la salida:

El archivo original tiene 3288 bytes.
El archivo comprimido tiene 1488 bytes.

 */
?>
]]>
   </programlisting>
  </example>
 </section>

 <section xml:id="filters.encryption">
  <title>Filtros de Encripción</title>

  <simpara>
   <literal>mcrypt.*</literal> y <literal>mdecrypt.*</literal> ofrecen
   encripción y desencripción simétrica usando libmcrypt. Ambos conjuntos de
   filtros soportan los mismos algoritmos disponibles a la <link
   linkend="ref.mcrypt">extensión mcrypt</link> en la forma de
   <literal>mcrypt.ciphername</literal>, en donde
   <parameter>ciphername</parameter> es el nombre del cifrado que debe ser
   pasado a <function>mcrypt_module_open</function>. Los siguientes cinco
   parámetros se encuentran disponibles también:
  </simpara>

  <para>
   <table>
    <title>parámetros del filtro mcrypt</title>
    <tgroup cols="4">
     <thead>
      <row>
       <entry>Parámetro</entry>
       <entry>¿Requerido?</entry>
       <entry>Predeterminado</entry>
       <entry>Ejemplos</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>mode</entry>
       <entry>Opcional</entry>
       <entry>cbc</entry>
       <entry>cbc, cfb, ecb, nofb, ofb, stream</entry>
      </row>
      <row>
       <entry>algorithms_dir</entry>
       <entry>Opcional</entry>
       <entry>ini_get('mcrypt.algorithms_dir')</entry>
       <entry>Ubicación de los módulos de los algoritmos</entry>
      </row>
      <row>
       <entry>modes_dir</entry>
       <entry>Opcional</entry>
       <entry>ini_get('mcrypt.modes_dir')</entry>
        <entry>Ubicación de los módulos de los modos</entry>
      </row>
      <row>
       <entry>iv</entry>
       <entry>Requerido</entry>
       <entry>N/A</entry>
       <entry>Usualmente 8, 16, o 32 bytes de datos binarios. Depende
       del cifrado</entry>
      </row>
      <row>
       <entry>key</entry>
       <entry>Requerido</entry>
       <entry>N/A</entry>
       <entry>Usualmente 8, 16, o 32 bytes de datos binarios. Depende
       del cifrado</entry>
      </row>
     </tbody>
    </tgroup>
   </table>
  </para>

  <example>
   <title>Encripción de la salida usando 3DES</title>
   <programlisting role="php">
<![CDATA[
<?php
$frase_secreta = 'Mi secreto';

/* Convertir una frase legible en una pareja iv/llave reproducible
 */
$iv = substr(md5('iv'.$frase_secreta, true), 0, 8);
$llave = substr(md5('contrasenya1'.$frase_secreta, true) .
               md5('contrasenya2'.$frase_secreta, true), 0, 24);
$opciones = array('iv'=>$iv, 'key'=>$key);

$da = fopen('archivo-secreto.enc', 'wb');
stream_filter_append($da, 'mcrypt.tripledes', STREAM_FILTER_WRITE, $opciones);
fwrite($da, 'Datos muy muy muy secretos');
fclose($da);
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>Lectura de un archivo encriptado</title>
   <programlisting role="php">
<![CDATA[
<?php
$frase_secreta = 'Mi secreto';

/* Convertir una frase legible en una pareja iv/llave reproducible
 */
$iv = substr(md5('iv'.$frase_secreta, true), 0, 8);
$llave = substr(md5('contrasenya1'.$frase_secreta, true) .
               md5('contrasenya2'.$frase_secreta, true), 0, 24);
$opciones = array('iv'=>$iv, 'key'=>$llave);

$da = fopen('archivo-secreto.enc', 'rb');
stream_filter_append($fp, 'mdecrypt.tripledes', STREAM_FILTER_READ, $opciones);
$datos = rtrim(stream_get_contents($da));
fclose($da);

echo $datos;
?>
]]>
   </programlisting>
  </example>

 </section>

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
