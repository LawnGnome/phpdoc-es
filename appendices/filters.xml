<?xml version="1.0" encoding="iso-8859-1"?>
<!-- $Revision: 1.2 $ -->
<!-- EN-Revision: 1.13 Maintainer: lboshell Status: ready -->
<appendix id="filters">
 <title>Lista de Filtros Disponibles</title>
 <para>
  La siguiente es una lista de unos cuantos filtros de secuencia
  integrados que puede usar con
  <function>stream_filter_append</function>. Su versi&oacute;n de PHP
  puede tener m&aacute;s (o menos) filtros de los que son listados
  aqu&iacute;.
 </para>

 <para>
  Vale la pena anotar una ligera asimetr&iacute;a entre
  <function>stream_filter_append</function> y
  <function>stream_filter_prepend</function>. Cada secuencia en PHP
  contiene un peque&ntilde;o <emphasis>b&uacute;fer de
  lectura</emphasis> en donde almacena los bloques de datos recibidos
  desde el sistema de archivos u otro recurso para procesar los datos
  de la forma m&aacute;s eficiente. Tan pronto como los datos son
  tomados del recurso y colocados en el b&uacute;fer interno de la
  secuencia, &eacute;stos son procesados inmediatamente a
  trav&eacute;s de cualquier filtro adjunto sin importar que la
  aplicaci&oacute;n PHP est&eacute; lista para los datos o no. Si los
  datos est&aacute;n en el b&uacute;fer de lectura cuando un filtro es
  <emphasis>a&ntilde;adido al final</emphasis>, los datos ser&aacute;n
  procesados inmediatamente a trav&eacute;s del filtro haciendo
  parecer que el proceso fuera transparente. Sin embargo, si los datos
  est&aacute;n en el b&uacute;fer de lectura cuando un filtro es
  <emphasis>adjuntado al comienzo</emphasis>, los datos
  <emphasis>NO</emphasis> ser&aacute;n procesados a trav&eacute;s del
  filtro. En su lugar esperar&aacute; a que el siguiente bloque de
  datos sea recuperado del recurso.
 </para>

 <para>
  Para una lista de filtros instalados en su versi&oacute;n de PHP,
  use <function>stream_get_filters</function>.
 </para>

 <section id="filters.string">
  <title>Filtros de Cadena</title>

  <simpara>
   Cada uno de estos filtros hace precisamente lo que sus nombres
   implican y corresponden al comportamiento de una funci&oacute;n de
   manipulaci&oacute;n de cadenas que hace parte de php. Para
   m&aacute;s informaci&oacute;n sobre un filtro dado,
   refi&eacute;rase a la p&aacute;gina del manual de la funci&oacute;n
   correspondiente.
  </simpara>

  <simpara>
   <literal>string.rot13</literal> (a partir de PHP 4.3.0) El uso de
   este filtro es equivalente a procesar todos los datos de la
   secuencia a trav&eacute;s de la funci&oacute;n
   <function>str_rot13</function>.
  </simpara>
  <example>
   <title>string.rot13</title>
   <programlisting role="php">
<![CDATA[
<?php
$da = fopen('php://output', 'w');
stream_filter_append($da, 'string.rot13');
fwrite($da, "Esto es una prueba.\n");
/* Imprime:  Rfgb rf han cehron. */
?>
]]>
   </programlisting>
  </example>

  <simpara>
   <literal>string.toupper</literal> (a partir de PHP 5.0.0) El uso de
   este filtro es equivalente a procesar todos los datos de la
   secuencia a trav&eacute;s de la funci&oacute;n
   <function>strtoupper</function>.
  </simpara>
  <example>
   <title>string.toupper</title>
   <programlisting role="php">
<![CDATA[
<?php
$da = fopen('php://output', 'w');
stream_filter_append($da, 'string.toupper');
fwrite($da, "Esto es una prueba.\n");
/* Imprime:  ESTO ES UNA PRUEBA.   */
?>
]]>
   </programlisting>
  </example>

  <simpara>
   <literal>string.tolower</literal> (a partir de PHP 5.0.0) El uso de
   este filtro es equivalente a procesar todos los datos de la
   secuencia a trav&eacute;s de la funci&oacute;n
   <function>strtolower</function>.
  </simpara>
  <example>
   <title>string.tolower</title>
   <programlisting role="php">
<![CDATA[
<?php
$da = fopen('php://output', 'w');
stream_filter_append($da, 'string.tolower');
fwrite($da, "Esto es una prueba.\n");
/* Imprime:  esto es una prueba.   */
?>
]]>
   </programlisting>
  </example>

  <simpara>
   <literal>string.strip_tags</literal> (a partir de PHP 5.0.0) El uso
   de este filtro es equivalente a procesar todos los datos de la
   secuencia a trav&eacute;s de la funci&oacute;n
   <function>strip_tags</function>. Acepta par&aacute;metros en una de
   dos formas: Ya sea como una cadena que contiene una lista de
   etiquetas, similar al segundo par&aacute;metro de la funci&oacute;n
   <function>strip_tags</function>, o como una matriz de nombres de
   etiqueta.
  </simpara>
  <example>
   <title>string.strip_tags</title>
   <programlisting role="php">
<![CDATA[
<?php
$da = fopen('php://output', 'w');
stream_filter_append($da, 'string.strip_tags', STREAM_FILTER_WRITE, "<b><i><u>");
fwrite($da, "<b>texto en negrilla</b> llevado a <h1>nivel de cabecera 1</h1>\n");
fclose($da);
/* Imprime:  <b>texto en negrilla</b> llevado a nivel de cabecera 1   */

$da = fopen('php://output', 'w');
stream_filter_append($da, 'string.strip_tags', STREAM_FILTER_WRITE, array('b','i','u'));
fwrite($da, "<b>texto en negrilla</b> llevado a <h1>nivel de cabecera 1</h1>\n");
fclose($da);
/* Imprime:  <b>texto en negrilla</b> llevado a nivel de cabecera 1   */
?>
]]>
   </programlisting>
  </example>

 </section>

 <section id="filters.convert">
  <title>Filtros de Conversi&oacute;n</title>

  <simpara>
   De forma similar a los filtros string.*, los filtros convert.*
   realizan acciones semejantes a sus nombres. Los filtros de
   conversi&oacute;n fueron agregados en PHP 5.0.0. Para m&aacute;s
   informaci&oacute;n sobre un filtro dado, refi&eacute;rase a la
   p&aacute;gina del manual sobre la funci&oacute;n correspondiente.
  </simpara>

  <simpara>
   <literal>convert.base64-encode</literal> y
   <literal>convert.base64-decode</literal> El uso de estos filtros es
   equivalente a procesar todos los datos de la secuencia a
   trav&eacute;s de las funciones <function>base64_encode</function> y
   <function>base64_decode</function> respectivamente.
   <literal>convert.base64-encode</literal> soporta el uso de
   par&aacute;metros entregados como una matriz asociativa. Si se usa
   <parameter>longitud-linea</parameter>, la salida base64 ser&aacute;
   separada en paquetes de <parameter>longitud-linea</parameter>
   caracteres cada uno. Si se usa
   <parameter>caracteres-final-de-linea</parameter>, cada paquete
   ser&aacute; delimitado por los caracteres dados. Estos
   par&aacute;metros ofrecen el mismo efecto que usar
   <function>base64_encode</function> con
   <function>chunk_split</function>.
  </simpara>
  <example>
   <title>
    convert.base64-encode y
    convert.base64-decode
   </title>
   <programlisting role="php">
<![CDATA[
<?php
$da = fopen('php://output', 'w');
stream_filter_append($da, 'convert.base64-encode');
fwrite($da, "This is a test.\n");
fclose($da);
/* Imprime:  VGhpcyBpcyBhIHRlc3QuCg==  */

$param = array('line-length' => 8, 'line-break-chars' => "\r\n");
$da = fopen('php://output', 'w');
stream_filter_append($da, 'convert.base64-encode', STREAM_FILTER_WRITE, $param);
fwrite($da, "This is a test.\n");
fclose($da);
/* Imprime:  VGhpcyBp
          :  cyBhIHRl
          :  c3QuCg==  */

$da = fopen('php://output', 'w');
stream_filter_append($da, 'convert.base64-decode');
fwrite($da, "VGhpcyBpcyBhIHRlc3QuCg==");
fclose($da);
/* Imprime:  This is a test.  */
?>
]]>
   </programlisting>
  </example>

   <simpara>
   <literal>convert.quoted-printable-encode</literal> y
   <literal>convert.quoted-printable-decode</literal> El uso de la
   versi&oacute;n de docedificaci&oacute;n de este filtro es
   equivalente a procesar todos los datos de la secuencia a
   trav&eacute;s de la funci&oacute;n
   <function>quoted_printable_decode</function>. No existe una
   funci&oacute;n equivalente a
   <literal>convert.quoted-printable-encode</literal>.
   <literal>convert.quoted-printable-encode</literal> soporta el uso
   de par&aacute;metros dados como una matriz
   asociativa. Adicionalmente a los par&aacute;metros soportados por
   <literal>convert.base64-encode</literal>,
   <literal>convert.quoted-printable-encode</literal> soporta
   tambi&eacute;n los argumentos booleanos
   <parameter>binary</parameter> y
   <parameter>force-encode-first</parameter>.
   <literal>convert.base64-decode</literal> soporta &uacute;nicamente
   el par&aacute;metro <parameter>line-break-chars</parameter> como
   una sugerencia del tipo para eliminar del material codificado.
  </simpara>
  <example>
   <title>
    convert.quoted-printable-encode y
    convert.quoted-printable-decode
   </title>
   <programlisting role="php">
<![CDATA[
<?php
$da = fopen('php://output', 'w');
stream_filter_append($da, 'convert.quoted-printable-encode');
fwrite($da, "Esto es una prueba.\n");
/* Imprime:  =Esto es una prueba.=0A  */
?>
]]>
   </programlisting>
  </example>
 </section>

 <section id="filters.compression">
  <title>Filtros de Compresi&oacute;n</title>

  <simpara>
   Mientras que <xref linkend="wrappers.compression"/> ofrece una
   forma de crear archivos compatibles con gzip y bz2 en el sistema de
   archivos local, no ofrece un m&eacute;todo de compresi&oacute;n
   generalizado sobre secuencias de red, ni ofrece la forma de
   comenzar con una secuencia no-comprimida y trasladarse a una
   comprimida. Para esto, un filtro de compresi&oacute;n puede ser
   aplicado sobre cualquier recurso de secuencia en cualquier momento.
  </simpara>

  <note>
   <simpara>
    Los filtros de compresi&oacute;n <emphasis>no</emphasis> generan
    cabeceras ni caracteres finales usados por utilidades de la
    l&iacute;nea de comandos como <literal>gzip</literal>. S&oacute;lo
    comprimen y descomprimen las porciones significativas de las
    secuencias de datos comprimidas.
   </simpara>
  </note>

  <simpara>
   <literal>zlib.deflate</literal> (compresi&oacute;n) y
   <literal>zlib.inflate</literal> (descompresi&oacute;n) son
   implementaciones de los m&eacute;todos de compresi&oacute;n
   descritos en <ulink url="&url.rfc;1951">RFC 1951</ulink>. El filtro
   <literal>deflate</literal> recibe hasta tres par&aacute;metros
   pasados como una matriz asociativa.

   <parameter>level</parameter> describe la intensidad de
   compresi&oacute;n (1-9). N&uacute;meros m&aacute;s grandes
   producen, por lo general, resultados m&aacute;s peque&ntilde;os, al
   costo de tiempo de procesamiento adicional. Dos niveles de
   compresi&oacute;n especiales existen tambi&eacute;n: 0 (para
   no-compresi&oacute;n), y -1 (el valor predeterminado de zlib --
   actualmente 6).

   <parameter>window</parameter> es el registro en base-2 del
   tama&ntilde;o de ventana del circuito cerrado de
   compresi&oacute;n. Valores m&aacute;s altos (de hasta 15 -- 32768
   bytes) producen mejor compresi&oacute;n al costo de m&aacute;s
   memoria, mientras valores m&aacute;s bajos (alrededor de 9 -- 512
   bytes) producen una compresi&oacute;n inferior en un espacio de
   memoria m&aacute;s peque&ntilde;o. El tama&ntilde;o de
   <parameter>window</parameter> es actualmente
   <constant>15</constant>.

   <parameter>memory</parameter> es una escala que indica
   cu&aacute;nta memoria deber&iacute;a ser reservada. Los valores
   v&aacute;lidos est&aacute;n en el rango de 1 (reserva
   m&iacute;nima) a 9 (reserva m&aacute;xima). Esta reserva de memoria
   afecta &uacute;nicamente la repidez y no tiene impacto en el
   tama&ntilde;o del resultado generado.
  </simpara>

  <note>
   <simpara>
    Dado que el nivel de compresi&oacute;n es el par&aacute;metro
    usado con mayor frecuencia, puede indicarse alternativamente como
    un valor entero simple (en lugar de un elemento tipo matriz).
   </simpara>
  </note>

  <simpara>
    Los filtros de compresi&oacute;n zlib.* est&aacute;n disponibles
    con PHP desde la versi&oacute;n <literal>5.1.0</literal> si el
    soporte <xref linkend="ref.zlib"/> se encuentra
    habilitado. Tambi&eacute;n est&aacute;n disponibles como una
    caracter&iacute;stica portada de vuelta en la versi&oacute;n
    <literal>5.0.x</literal>, instalando el paquete <ulink
    url="&url.pecl.package;zlib_filter">zlib_filter</ulink> desde
    <ulink url="&url.pecl;">PECL</ulink>. Estos filtros
    <emphasis>no</emphasis> est&aacute;n disponibles para PHP 4.
  </simpara>

  <example>
   <title>
    <literal>zlib.deflate</literal> y <literal>zlib.inflate</literal>
   </title>
   <programlisting role="php">
<![CDATA[
<?php
$params = array('level' => 6, 'window' => 15, 'memory' => 9);

$texto_original = "This is a test.\nThis is only a test.\nThis is not an important string.\n";
echo "El texto original tiene " . strlen($texto_original) . " caracteres.\n";

$da = fopen('test.deflated', 'w');
stream_filter_append($da, 'zlib.deflate', STREAM_FILTER_WRITE, $params);
fwrite($da, $texto_original);
fclose($da);

echo "El archivo comprimido tiene " . filesize('test.deflated') . " bytes.\n";
echo "El texto original era:\n";
/* Use readfile y zlib.inflate para descomprimir al vuelo */
readfile('php://filter/zlib.inflate/resource=test.deflated');

/* Genera la salida:

El texto original tiene 70 caracteres.
El archivo comprimido tiene 56 bytes.
El texto original era:
This is a test.
This is only a test.
This is not an important string.

 */
?>
]]>
   </programlisting>
  </example>

  <example>
   <title>
    <literal>zlib.deflate</literal> simple
   </title>
   <programlisting role="php">
<![CDATA[
<?php
$texto_original = "This is a test.\nThis is only a test.\nThis is not an important string.\n";
echo "El texto original tiene " . strlen($texto_original) . " caracteres.\n";

$da = fopen('test.deflated', 'w');
/* Aqui "6" indica el nivel 6 de compresion */
stream_filter_append($da, 'zlib.deflate', STREAM_FILTER_WRITE, 6);
fwrite($da, $texto_original);
fclose($da);

echo "El archivo comprimido tiene " . filesize('test.deflated') . " bytes.\n";

/* Generates output:

El texto original tiene 70 caracteres.
El archivo comprimido tiene 56 bytes.

 */
?>
]]>
   </programlisting>
  </example>

  <simpara>
   <literal>bzip2.compress</literal> y
   <literal>bzip2.decompress</literal> funcionan de la misma forma que
   los filtros zlib descritos anteriormente. El filtro
   <literal>bzip2.compress</literal> acepta hasta dos
   par&aacute;metros dados como elementos de una matriz asociativa:

   <parameter>blocks</parameter> es un valor entero desde 1 hasta 9
   que indica el n&uacute;mero de bloques de 100kbytes de memoria a
   reservar para el espacio de trabajo.

   <parameter>work</parameter> es tambi&eacute;n un valor entero que
   va desde 0 a 250, e indica cu&aacute;nto esfuerzo debe invertirse
   para expandir usando el m&eacute;todo de compresi&oacute;n normal
   antes de caer en un m&eacute;todo m&aacute;s lento pero m&aacute;s
   confiable. Modificar este par&aacute;metro afecta &uacute;nicamente
   la rapidez de compresi&eacute;n. Ni el tama&ntilde;o de la salida
   comprimida ni el uso de memoria se modifican por este valor. Un
   factor de trabajo de 0 le indica a la biblioteca bzip que debe usar
   el valor interno predeterminado.

   El filtro <literal>bzip2.decompress</literal> s&oacute;lo acepta un
   par&aacute;metro, el cual puede ser pasado como un valor booleano
   ordinario, o como el elemento <parameter>small</parameter> de una
   matriz asociativa.

   <parameter>small</parameter>, cuando se define a un valor &true;,
   le indica a la biblioteca bzip de realice una descompresi&oacute;n
   con una cantidad de memoria m&iacute;nima, al costo de la repidez.
  </simpara>

  <simpara>
    Las filtros de compresi&oacute;n bzip2.* se encuentran disponibles
    con PHP desde la versi&oacute;n <literal>5.1.0</literal> si el
    soporte <xref linkend="ref.bzip2"/> se encuentra
    habilitado. Tambi&eacute;n se encuentran disponibles como una
    caracter&iacute;stica portada hacia atr&aacute;s en la
    versi&oacute;n <literal>5.0.x</literal>, instalando el paquete
    <ulink url="&url.pecl.package;bz2_filter">bz2_filter</ulink> desde
    <ulink url="&url.pecl;">PECL</ulink>. Estos filtros
    <emphasis>no</emphasis> se encuentran disponibles para PHP 4.
  </simpara>

  <example>
   <title>
    <literal>bzip2.compress</literal> y
    <literal>bzip2.decompress</literal>
   </title>
   <programlisting role="php">
<![CDATA[
<?php
$param = array('blocks' => 9, 'work' => 0);

echo "El archivo original tiene " . filesize('LICENSE') . " bytes.\n";

$da = fopen('LICENSE.compressed', 'w');
stream_filter_append($da, 'bzip2.compress', STREAM_FILTER_WRITE, $param);
fwrite($da, file_get_contents('LICENSE'));
fclose($da);

echo "El archivo comprimido tiene " . filesize('LICENSE.compressed') . " bytes.\n";

/* Genera la salida:

El archivo original tiene 3288 bytes.
El archivo comprimido tiene 1488 bytes.

 */
?>
]]>
   </programlisting>
  </example>
 </section>

</appendix>

<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"../../manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
